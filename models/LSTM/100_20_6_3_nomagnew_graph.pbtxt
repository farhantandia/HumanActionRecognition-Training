node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "LSTM_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "LSTM_1/kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 32
          }
        }
        tensor_content: "ov\010\2762\357\343<!xu\276\274Cg\275sZq\276f\315\255>\310g\036\274\326\002H\273\252|~=\312\244H>\3356\310\274\207^e>\240\355I\276\376\253\336=\235\354\000>N\236k>|\200\037=J;%\275]\247\255<\330\337h=\t\035\006>1\373\263\276\272V\364=\021\352\234\276\257h\300\274\315\013\226\276/\303O>\004\365E\275\372\266k>\245\375\300=\342\271d\276<\312L\276\235%(=\310P\317=\016\345d>\221V\t=\"\220%>8Pp>t\223.\275a\277\321>\001E\215;\344p\213\273\263K(>/9\025\276\365\274p\276@\244F<\263\255\'>QD\220\276\374\350\247\276\230\343s>\036\274\312=\"A\366<(\361\355=\031gY\276\n\353\013>\372\216e\275{\342\005>v4\323\275\301R\337=\213P\030>\023\261\247\276\'V`\276\225]%=>R@\275\200\016\222=v\032t>C\201\374=&0u\275923=\351\222\202\275\243\\\366=R\347{> \377\341\271n\2126\276.\027\217<\251$&>\371yj\27539\265=\341a\273=\263\222\031\275e\024z>\217\200\022\276\2444\340\275\226P\213>\007\211\026?\334*\254\274\234#q\276\203\034\256=k\203\222\275\242\240\303\275\245\375\312:Z\302\031=\033\317\035>\177\032\332=\003\247\341=-1\262>\217\210\221=\223o\356<\007^D\276h\316\363\275)z\353;\371\250w\275\310\327_=R\246o\275\031Os>vKK>\261\340\242>\270U}>\233\201G\275\273\332i\276j\260\200<\350\317\203\276I\3319\276\351\223\357=T\271\255\276=\016\361\274\261\314\371;Z\275\273=b\224\327\275\001q4\276\332\n\215\276\305S\274>\363\221w>\010\225h>&\271\304=\033R\000\274\340\214\222\275\230\353\216=K\335M\276\370\260`\276\363\252\177>\276\233\024=fQ\224\275\304\314\361\276G\216K=\332N\307\275\374\273n\274@.0\276s\217\352\275\037\210_>\013:\367\275\374Q\033=\346\323\252>\233 \346<\306\211k=Q\213.>\370m\032\276\367=\000\276?\314\344=\231\360\327=+\313t>\335\250\336\275\"\026\262;f\351\247\275\217\243G>\366\2272\276\200\237\177\275\031<\234\276\216xd\276\330\177s=\224I\343<\247\203\311\276\302\244\341\275|\356\025\276V2\032=\031\334\341\275G\020%=ZN\276=8\324e>&\325c\275\303\236\251>\026\337\314\273\031\373!>\263\245\227>Qe\246\276\3621\350\274)\\U>\267\204\200=?\364\030>h\343\335>\010\355V<\365\245\247;m\022\237\275\\u\316\275\312\225\032\275\344\rz\275\nR\255=\"\365\343\275\354\335n\276\203\027\030\2767\341\361\2752\315\376\275"
      }
    }
  }
}
node {
  name: "LSTM_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/kernel/Assign"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "LSTM_1/kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/kernel/read"
  op: "Identity"
  input: "LSTM_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Square"
  op: "Square"
  input: "LSTM_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer/mul"
  input: "LSTM_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer/add/x"
  input: "LSTM_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\325\237W\273\313\265\273>\237p\341=XOy\276tZ\016=\310 \361\274\352)\352=\254\233\005>,,\031=\\_.\275\274\033\252=\245\246\240={\005\313;U@s>.\177\375=k-\010>j\017\005\277\021\264/\275B\247+\2766\352\317\275S3\226\274\227g\254\276ED\303\275\233\227\264=7\271r\274d\"\237\276\276R\020>\344\366O>\025 \026>WB\233=\232\024\321\2751\257\017>G\365\356=z\232\'\275\314\261\301=\227\212\216>c%!>\331\236-\276\363\222\343\275h0W=>$\021\275\310\215\260\276(>\267\273\212\233\205>a\320U\276\217\000!=\375\200\010>~\215\214>xgL;\343\372\325\275\362\2028\276\333\334\001>QT\265>\'\035\021\276\357p\037\276\225\300\227\274~\322S\276X\254C>?\014\325\273IG\014\276\352^\264\276l\000\232<\014\276P\276\004D\306=KN\0009\343>\210\275\207t\256=\037K3\2768A\360\275\"t\205\275\250W\322>\365u*\276s\275/\276 \273@\276{\2004\276\251|\000=/V\316\274\332/}>\212\322\361\275\236\317\305>\255Y\311=\345\026n=\007E\302=\375\240\200\275\375\337\344\275\204}\212\275\023\021\253>\234\363<\2758dN\276\321\n\253>1\031\006\276W0s>\366\261\215=\0235\277=\0262\030>^\"c=\033\036\273\276\271as\276\217\242\350\275\3616\247\276ES\250=b\301\202\276R\253\255;\246;x>\316\016\361<T\355\257\276o\243\250\273\256\002\027\274\267L\030\276\311Rs<\310T*>L\310\240\275\022\260@>r\325\375=\260\003r>\324X\216=\325\317F\275\311\222\010\276\202\262\004\276=\331\261>\267\022t>\340\257\231<5\303H\275\025\261r\274\260\003\273=\366\303\027\276\200\305\214\275\030\265\022>h\310\217=\272\010W\273\250\342\306\275\235X\005\275p\225\005=\266\331\246=P\315\250\276e\177\'\276\344\214\220\275\221\370\235\276\370\270\342\275\014\334\037>JX\270\275\217\334a\275\307\370\223=81\212=\003Xc\276\006\251\t<YiL\276\017\201\350=z\267h\275\224\032Y=%3\340>Y\036d\276\265\215\370>+\241\n=\355c\213=\032\357\325<>\240\371=\325\363\207\276\370}\246=\335\177\027<\252V\214\276\374L\035\275\3375^\276k&q>>d\202>QB\230>\213\2432>B\222\206\276\2758>\276w}G>\312-\320\275H\236\325=E\003\"\275\261t\210>w\341\254=\254m}\276`\370\020=t8a=\203\216\202\274\257\006h\276\274\361\207>j4\260\275\216e->Hc\367=\210d\225\274IA\304\273\254\340\260<\375\351\242<4j1=\255\346A\276\235\310u\276\306^z>S\264\373\275\252\007\003\276D\271\021>\204E2\276\226\350\212\276k\204\225:\"\033\016\275R\267@\275\026\362p>\257\364\261;\226]\024\276i\301G\276\004\023\260\275}\365\025>-\347\362=\252#\267=\357\340\206>\"\211/\276\330L\035\276\344\214A\276`\200\316=\022<\263\275\3208\303=-\236\023\276\277\321\261\275\212\364(\276Yx\217>>\325\210=\006+\262\2750\355\225\276\231\\\234\276\307D\320\2766\320\230>\026\313}\275m\254\324=u4\323\274;)v\276\014\344\252\275\315p\214=\316\247/\276\002\224S\273\240\216y\275\364^\177\275=;w\276H\274U\276\271\240\034>b4T\276\332\260k\276\030\354\252\276~W\256=\363\205\201>\202\213\243>\367\373\235<~1\034=\347\020\214=,\265\300=\243\266\342\275\317J@\273\303\024\247\275\031c\205\276\250\001\254=\307\326+\276\316h\300\276p\323\213="
      }
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "LSTM_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/read"
  op: "Identity"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Square"
  op: "Square"
  input: "LSTM_1/recurrent_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_1/mul"
  input: "LSTM_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_1/add/x"
  input: "LSTM_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/concat"
  op: "ConcatV2"
  input: "LSTM_1/Const"
  input: "LSTM_1/Const_1"
  input: "LSTM_1/Const_2"
  input: "LSTM_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/bias/Assign"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "LSTM_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/bias/read"
  op: "Identity"
  input: "LSTM_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Square"
  op: "Square"
  input: "LSTM_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_2/mul"
  input: "LSTM_1/weight_regularizer_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_2/add/x"
  input: "LSTM_1/weight_regularizer_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Sum"
  op: "Sum"
  input: "LSTM_1/zeros_like"
  input: "LSTM_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LSTM_1/ExpandDims"
  op: "ExpandDims"
  input: "LSTM_1/Sum"
  input: "LSTM_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile_1"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose"
  op: "Transpose"
  input: "LSTM_1_input"
  input: "LSTM_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12"
  op: "StridedSlice"
  input: "LSTM_1/Shape"
  input: "LSTM_1/strided_slice_12/stack"
  input: "LSTM_1/strided_slice_12/stack_1"
  input: "LSTM_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13"
  op: "StridedSlice"
  input: "LSTM_1/transpose"
  input: "LSTM_1/strided_slice_13/stack"
  input: "LSTM_1/strided_slice_13/stack_1"
  input: "LSTM_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/MatMul"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/MatMul"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_1"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_2"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_3"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add"
  op: "Add"
  input: "LSTM_1/BiasAdd"
  input: "LSTM_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul"
  op: "Mul"
  input: "LSTM_1/mul/x"
  input: "LSTM_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_1"
  op: "Add"
  input: "LSTM_1/mul"
  input: "LSTM_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_1"
  input: "LSTM_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/clip_by_value/Minimum"
  input: "LSTM_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_2"
  op: "Add"
  input: "LSTM_1/BiasAdd_1"
  input: "LSTM_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_1"
  op: "Mul"
  input: "LSTM_1/mul_1/x"
  input: "LSTM_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_3"
  op: "Add"
  input: "LSTM_1/mul_1"
  input: "LSTM_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_3"
  input: "LSTM_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_1/Minimum"
  input: "LSTM_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_2"
  op: "Mul"
  input: "LSTM_1/clip_by_value_1"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_4"
  op: "Add"
  input: "LSTM_1/BiasAdd_2"
  input: "LSTM_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh"
  op: "Tanh"
  input: "LSTM_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_3"
  op: "Mul"
  input: "LSTM_1/clip_by_value"
  input: "LSTM_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_5"
  op: "Add"
  input: "LSTM_1/mul_2"
  input: "LSTM_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_6"
  op: "Add"
  input: "LSTM_1/BiasAdd_3"
  input: "LSTM_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_4"
  op: "Mul"
  input: "LSTM_1/mul_4/x"
  input: "LSTM_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_7"
  op: "Add"
  input: "LSTM_1/mul_4"
  input: "LSTM_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_7"
  input: "LSTM_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_2/Minimum"
  input: "LSTM_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_5"
  op: "Mul"
  input: "LSTM_1/clip_by_value_2"
  input: "LSTM_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/TensorArrayUnstack/Shape"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayUnstack/range/start"
  input: "LSTM_1/TensorArrayUnstack/strided_slice"
  input: "LSTM_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM_1/TensorArray_1"
  input: "LSTM_1/TensorArrayUnstack/range"
  input: "LSTM_1/transpose"
  input: "LSTM_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose"
      }
    }
  }
}
node {
  name: "LSTM_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "LSTM_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Enter"
  op: "Enter"
  input: "LSTM_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_1"
  op: "Enter"
  input: "LSTM_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_2"
  op: "Enter"
  input: "LSTM_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_3"
  op: "Enter"
  input: "LSTM_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_4"
  op: "Enter"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Merge"
  op: "Merge"
  input: "LSTM_1/while/Enter"
  input: "LSTM_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_1"
  op: "Merge"
  input: "LSTM_1/while/Enter_1"
  input: "LSTM_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_2"
  op: "Merge"
  input: "LSTM_1/while/Enter_2"
  input: "LSTM_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_3"
  op: "Merge"
  input: "LSTM_1/while/Enter_3"
  input: "LSTM_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_4"
  op: "Merge"
  input: "LSTM_1/while/Enter_4"
  input: "LSTM_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Less"
  op: "Less"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less/Enter"
  op: "Enter"
  input: "LSTM_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1"
  op: "Less"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM_1/while/Less"
  input: "LSTM_1/while/Less_1"
}
node {
  name: "LSTM_1/while/LoopCond"
  op: "LoopCond"
  input: "LSTM_1/while/LogicalAnd"
}
node {
  name: "LSTM_1/while/Switch"
  op: "Switch"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_1"
  op: "Switch"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_2"
  op: "Switch"
  input: "LSTM_1/while/Merge_2"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_3"
  op: "Switch"
  input: "LSTM_1/while/Merge_3"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_4"
  op: "Switch"
  input: "LSTM_1/while/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Identity"
  op: "Identity"
  input: "LSTM_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_1"
  op: "Identity"
  input: "LSTM_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_2"
  op: "Identity"
  input: "LSTM_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_3"
  op: "Identity"
  input: "LSTM_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_4"
  op: "Identity"
  input: "LSTM_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add"
  op: "Add"
  input: "LSTM_1/while/Identity"
  input: "LSTM_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/while/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul"
  input: "LSTM_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_1"
  input: "LSTM_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_2"
  input: "LSTM_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_3"
  input: "LSTM_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_1"
  op: "Add"
  input: "LSTM_1/while/BiasAdd"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul"
  op: "Mul"
  input: "LSTM_1/while/mul/x"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_2"
  op: "Add"
  input: "LSTM_1/while/mul"
  input: "LSTM_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_1"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_2"
  input: "LSTM_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "LSTM_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_3"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_1"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_1/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_1"
  op: "Mul"
  input: "LSTM_1/while/mul_1/x"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_4/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_4"
  op: "Add"
  input: "LSTM_1/while/mul_1"
  input: "LSTM_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_2"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_3"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_4"
  input: "LSTM_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "LSTM_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_2"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_1"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_5"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_2"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh"
  op: "Tanh"
  input: "LSTM_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_3"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_6"
  op: "Add"
  input: "LSTM_1/while/mul_2"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_7"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_3"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_4/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_4"
  op: "Mul"
  input: "LSTM_1/while/mul_4/x"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_8/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_8"
  op: "Add"
  input: "LSTM_1/while/mul_4"
  input: "LSTM_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_4"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_5"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_8"
  input: "LSTM_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "LSTM_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_5"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_2"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/mul_5"
  input: "LSTM_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_9/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_9"
  op: "Add"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration"
  op: "NextIteration"
  input: "LSTM_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit"
  op: "Exit"
  input: "LSTM_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_1"
  op: "Exit"
  input: "LSTM_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_2"
  op: "Exit"
  input: "LSTM_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_3"
  op: "Exit"
  input: "LSTM_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_4"
  op: "Exit"
  input: "LSTM_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayStack/range/start"
  input: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/TensorArrayStack/range"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "LSTM_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/sub"
  op: "Sub"
  input: "LSTM_1/while/Exit_1"
  input: "LSTM_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/sub"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose_1"
  op: "Transpose"
  input: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2764793
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/random_uniform/max"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        tensor_content: "&A1>7%:\276X\232X=\235b\215\276l\277\230\276\275\002\211\273I\372\317\275X\257\266=\251\230&\276\241c$\275\214\2721>\320\021E<\254\032?\275\000\247\207\274M\376\234\274\273\316\000>2\016\231\275\2255\325>X\031\325<\325\034\001\277\330!\026=\317/<>P\222\202>\033\232\322=\010\032b=\246d>>\020\277\364\275\261cg=\330\324\032\276-\204<=h\2176\276\327\253\005\276\221\263f>XW\336=#\374\202\276E\211,\273\276d\022>DQ\237\274\210*\\\276\352\360\317<\227X\212>\240\236R\276\213\236\361\275K>4\275\177\r/\276\246\234W\276\024m\247=\371\351\r>\327\240\027<S7\346=\201\204\346<I\250\027\276\030\031\244>\000\307\215\276\n\251Q\276\351\035\313\275\'\371i>\211\256w=\250dc\276\300\3346\276\261\002\271>N^\t>\216\354\224\275\317-\002\276\352Q\262=\274\252\000>5;\035\276\326\272\221>\325O\202=|T\'\276\tB\305\274\365uN\275\205\2201>G\273\005\2762\202z\275N\024I=\216\306j\274\261&\237\276\324\321\335\275\205\352A>H\341\027=,\227\016=\343\357\\>c\354\260\274<\3463\276\354\005\227>\327_\267=\225\266\002>\322\202\350\276~\325\326\275eP\006>\230\003\225\273\267\002`\275P\237,=\353\201\355<m\333\351\2764-\302\276\327\223\031>\224+\372\274\344\322\305\275\004\317\257\275\020\276\036>89\312=\327\333}>\256\355\307\274\300\232\037\276e\252\253\275\277W\236>\007C\242>\256\350\250\2754<\243=n\247B\276\262VN\2734\360\224\275\326o\251;\032\375\314\276|X\306=O\320\361\275\271\312\247\276\347\006\\>\014\206~\274v\n\003\276\014\023\025>!O\210;\222\324\212\275\223\3113>84\277=\363L\r\2762o\304<T \315\274 P\253\276\373\372\245>\235\267\374\275\241\006c>\023\366\224>]\014\354=a\035\343\275\224p\323=QR\365\275d\007/>>4\016>\247\233_=\20619\275s\224\341>3&\240=\251\026\031>\240\n\265<D\236\215=\260m\031=8\303X\276\037\\\225;\346\352\024>n\353\270\275sq\r=G\345\217\276\035N \276\203\343^\276E\343\363\275\246P\234\2758\024l>\334\211\231<~1\226=\345\256->\217T\'>rg\">\316D\334\275\t\352\256=7\200&\276<!\361\273\314\314\221=0:o>\223A\374=M\270;>\002\206q>\216\302e\276\236J:=Q|\022>\207Z/>\333\027R>\354\001\322\275, q>\213\246\013>w\214\202\2760\215\263\276\014E\336=\032\363\302\276\362\272;\276\247\220E>o\234\225\275\341\301\337\274\203\224V\276\267\271\312\275_\020U\275;\215!\276\036*_>\255\272\204<\267\266=\276\256\025\275=`\r.\275\222}\210\276H\037\371\274\361>\014\276\010\243\364\274\266lz>\004~\023=\344)\225\276\2102W\275<\342\375=&\363M\275\321\251\276\276b\312\231\275d\353\246\275\343-\262\274\312\'y=\334\252B\276S\017\217\274=C\377\275\244oN>Y\323\341\275\364\321\374=\224\356q>\361\237\260\276Y\244\320\276\nf\232=+\335q\2767\244\221\274\351\213\205=\201}\367=\025Of=\315\251\246>\303.l\276]f\266\275\230\260\006>a\232\232\274\270\216\317=\324\306\002;f\254\251=W\021\200\276\005\270u>I\373\373=\016<W\276Rn\357>\327\226\214\274;D\227;\325\357\270\275\303\003\3639X;U=]k\210\276%\374q\275\236\201@\276\322\373\246>\337`\014\275\335\204\210=\311\242\324\275\360\325J\274C\353\216>"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1757725
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/random_uniform/max"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        tensor_content: "r\217_\276\323\311h\2769sL>\024X\260\275\327\370X=\032\251\225\275\375\203\327\276\005r\320\275\202/\325\274\346?\311\274!@\222\274\332\231\320<\331\325\224\275u\242T\275\367m\270>.\361!\275\204e\036>WMU=\202.Q\275\270\335\032\273\352\316\272=\202\"%>Jw\377=b\216)>\032\334I<\325\000\226>B\037d\275\321\235\035=\376\037\353\276\203\357\201>kA\371=\360!.\276\242$\310\2751)\007?\302\357#\276\377\323&>P\335/\276\036C.\276\244\222\'\276\224>Y\276\373$\220=\313\370O>\337\375X\275\223\250\000=\332\222b<\306;\002>\235}\"\274\310\006\341=r\262\267\275\364K6>\352\314\035\276\253\260\260>_/\020=Y\356\245>\276\177\242:\352\320\253=\313\303 >\033\210\215\276oU\245=;\333\221\275:\335?\275\326b\017>q\303E=\027\253\t\276\377\"|>\003;\252=\364\352\234>\333\213\320\274\370uS>\217i\264<\234\335b\276&\214\"\276O\360\376=gP0>b\003\"\276\362\353b>x(\247\276\361V\177\276`\r\322;\260\354\350>\353\343~>u\022\010=o5\022=\322\251z\275\236\341\010\275Qe\332=B\323\204\274z\330.\276Q\242\316\275lB\315;\t\025\242=\'\334\307\275x\224T>\215nD\276a\214\224=\335\327\205=\254\332|>\361\273\024\276\202\275z\276\342K\035<!\2426>\244\013\312\275C\037\367=]\032\004\277\262V\324=i\321a\274$\260\314=\354\302\321\274GA\r\276_\200X\273\027\345F\276\226\207.\276T:\331\275\021\2229>\223\344\335\275>\217]>\374\004C>\230\025\255\275X#\306\275\214\324\r=\\^\352\275:\262\332>\227\017\205>q6%\275|\327\225;~ 7=\335IG=\203\244G=\2329 >\342\331\017>N\214\276\275G\237\372=I\216\247=2\365\314>8tC\276\216\027v>\336\212:>>\340\207\276\332\016\243\276\317\357I=U\366P<3 u=\t\341\254\276\255\325\321=`\3652\276g\303\035<\356`\214\275\'a\335\272\322\364\314=\244H\033>>\014\265\275\225q\337=\0042#>\363\221v>\376\014\330\275\221\210\326=\2178\244\276S\034+\276\336\351\215\274\021c\323=X\344\330=\250\367r\274P\243\271\273$\213\226\276,j\001>\302\260\313\275\305{\021\276\033\3112<K8\201\275\236$\310\275\005m\216>\377;t=]87>\323\227\276\275@O\036\276\034!s>\374=H\276\346\254~=\337v!>\025\250;\276\002\235\021>\314W5=\355\017\225>\347E\225>\310\236\327>\300\007-\275\350\213\036>\236]\213=\225FM>\330=]>yD\304=TLW>\371\315\360>\341\277U=G\370^>Bx\231=\210\305U\272m\211\333\275\001\3511>\300\376;<\313\021S\274\267\337\324\275[\251\246\275\202\3273\276\253\036\246>\331?|\276\256\177\024>\037\243i\276O\346\307=X\330\361=;\354\336\275\333\020\307\274\013//\275+\023\274>\005\025:\275\211\354\336\274\216m\274=R\362\236=\027Q\215\2766\363\217\276\322\252[=#P0>H\234H\275r;\357=\272\304E>\344\324\317=\204\020\013>\272-z<-\000\310>\3622o\276\211r_\275\342&X>\372[\376\2751t\272=N\243g;\004QW><\200\031\275\313:\355>\312\301\000>\022\2305\276\345\211\030\276v\203\r\276\242\275\273=\213f\244<\360\364&\276\234\203\242\275j}4\276\246T\254<J\034\016=\004E3\275\277\202<>\301\236\214\276t\354H\276FM\262\274\352\252W>=GF>"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "LSTM_1/transpose_1"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value/Minimum"
  input: "bidirectional_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while/Enter_4"
  input: "bidirectional_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1"
  op: "Less"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while/Less"
  input: "bidirectional_1/while/Less_1"
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/LogicalAnd"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while/Merge_4"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_2"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "bidirectional_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_4"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "bidirectional_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_8"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "bidirectional_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_9"
  op: "Add"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit_1"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "LSTM_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "LSTM_1/transpose_1"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_3/Minimum"
  input: "bidirectional_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_4/Minimum"
  input: "bidirectional_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_5/Minimum"
  input: "bidirectional_1/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_4"
  input: "bidirectional_1/while_1/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1"
  op: "Less"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while_1/Less"
  input: "bidirectional_1/while_1/Less_1"
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/LogicalAnd"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_4"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_2"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "bidirectional_1/while_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_4"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/while_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_8"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/while_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9"
  op: "Add"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit_1"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_3"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/Shape"
  input: "Flatten/strided_slice/stack"
  input: "Flatten/strided_slice/stack_1"
  input: "Flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/Prod"
  op: "Prod"
  input: "Flatten/strided_slice"
  input: "Flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/stack"
  op: "Pack"
  input: "Flatten/stack/0"
  input: "Flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Reshape"
  op: "Reshape"
  input: "bidirectional_1/concat"
  input: "Flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\006\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.061084721237421036
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.061084721237421036
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4297740
    }
  }
}
node {
  name: "Dense_1/random_uniform/sub"
  op: "Sub"
  input: "Dense_1/random_uniform/max"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform/mul"
  op: "Mul"
  input: "Dense_1/random_uniform/RandomUniform"
  input: "Dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform"
  op: "Add"
  input: "Dense_1/random_uniform/mul"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1600
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/kernel/Assign"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "Dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/kernel/read"
  op: "Identity"
  input: "Dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Square"
  op: "Square"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer/mul"
  input: "Dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add"
  op: "Add"
  input: "Dense_1/weight_regularizer/add/x"
  input: "Dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/bias/Assign"
  op: "Assign"
  input: "Dense_1/bias"
  input: "Dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/bias/read"
  op: "Identity"
  input: "Dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer_1/mul"
  input: "Dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_1/weight_regularizer_1/add/x"
  input: "Dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/MatMul"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "Dense_1/MatMul"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_1/Relu"
  op: "Relu"
  input: "Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7385489344596863
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7385489344596863
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8146899
    }
  }
}
node {
  name: "Dense_2/random_uniform/sub"
  op: "Sub"
  input: "Dense_2/random_uniform/max"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/mul"
  op: "Mul"
  input: "Dense_2/random_uniform/RandomUniform"
  input: "Dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform"
  op: "Add"
  input: "Dense_2/random_uniform/mul"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/kernel/Assign"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "Dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/kernel/read"
  op: "Identity"
  input: "Dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Square"
  op: "Square"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer/mul"
  input: "Dense_2/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add"
  op: "Add"
  input: "Dense_2/weight_regularizer/add/x"
  input: "Dense_2/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/bias/Assign"
  op: "Assign"
  input: "Dense_2/bias"
  input: "Dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/bias/read"
  op: "Identity"
  input: "Dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer_1/mul"
  input: "Dense_2/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_2/weight_regularizer_1/add/x"
  input: "Dense_2/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/MatMul"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "Dense_2/MatMul"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_2/Softmax"
  op: "Softmax"
  input: "Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "Dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum"
  op: "Sum"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv"
  op: "RealDiv"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub"
  op: "Sub"
  input: "loss/Dense_2_loss/sub/x"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Log"
  op: "Log"
  input: "loss/Dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul"
  op: "Mul"
  input: "Dense_2_target"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/Dense_2_loss/mul"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean"
  op: "Mean"
  input: "loss/Dense_2_loss/Neg"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "Dense_2_sample_weights"
  input: "loss/Dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Cast"
  op: "Cast"
  input: "loss/Dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/Dense_2_loss/Cast"
  input: "loss/Dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/Dense_2_loss/mul_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/Dense_2_loss/truediv_1"
  input: "loss/Dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "LSTM_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "Dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "Dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "LSTM_1/weight_regularizer_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "LSTM_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "Dense_2/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/add_5"
  input: "Dense_2/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "Dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "Dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/bias/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/kernel/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\006\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\006\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/bias/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/kernel/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/bias/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "Dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2_target"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/Dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  input: "Dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional_1/concat/axis"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while_1/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_1/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_6"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_2/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_3/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_7"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_8"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum_1/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_8"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Identity_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  input: "bidirectional_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_12"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_16"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/AddN_21"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "LSTM_1/while/Exit_2"
  input: "^training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "LSTM_1/TensorArrayStack/range"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_22"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_8"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_23"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_23"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  input: "LSTM_1/while/Identity_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  input: "LSTM_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "LSTM_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  input: "LSTM_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  input: "LSTM_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_25"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_26"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_27"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\006\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1600
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\006\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1600
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "LSTM_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "Dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "Dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "Dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "Dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "Dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "Dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "LSTM_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "LSTM_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Dense_1/bias/Assign"
  input: "^Dense_1/kernel/Assign"
  input: "^Dense_2/bias/Assign"
  input: "^Dense_2/kernel/Assign"
  input: "^LSTM_1/bias/Assign"
  input: "^LSTM_1/kernel/Assign"
  input: "^LSTM_1/recurrent_kernel/Assign"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Dense_2/Softmax"
}
versions {
  producer: 38
}
