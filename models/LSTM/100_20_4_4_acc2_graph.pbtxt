node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "LSTM_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "LSTM_1/kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\352!\244<\023\332d9\376\233D\275\365L`\275\231\001\240\275\020\317\010\275\225\0020<M\3022\275\312\332\241\274\324D\274=\353\360l<\362\374\364\274Bg\324<A\327\000\275P\251\277=\335\264\223\275\230\245\247\275U9\023=2ps\275j/\037=\255\203\020\275\342\005\320\275U\242\342<W\320\020\276CA\344=\344\362\214<\333~\313\273k%\304<\331Z\312\275\213#\335;NCX\275\274\350\256=\327U\026>\365\252\216\275\367\361\267\275\243\311\307\275\365\347\257\273\023\0237=p^\335<a\211\360\274!K\221=\274\246\375=\r\344\301<3\244\303\275B\004O\275\031\277$<i\314\255\275\000[\275::)\033\275ln\325\275\036\350\325<\262,\261\274\tw1={\020n;\037\\\036=E\310Z\274\247\375\"=\337s\342=mq <\321\357\365\273\361\307\214=\354\223\331\275\234\356\313<\264\231q=\022Ah=\363\377\203=j\2558=\321\215\277=\202\236\212<\255b\205=)q.\275\304\234\322=\347\235\356=\206QA=<E\016\275C\004\310<\337\202\207\274\345\243R=\"\377\021\275|\361T=3CQ=r\213\'\274\021\316S\273\227$P\275\310:p=ao\212=\310\363\213\271\267 \016<Mi\246\275x7m=q\221%\275\242u\344\275y\313\007\276@\020_\275>Z\240\275\372z\237<[\330\254=\017\210\213\274\034\214_=3\010\272;\260\352\310=\354\027\205;\261\216$=\004\032G=O\213!\275;)1\273\026\002\214\275\224\231\220\275\204\177\217=\032~\261\272\2563\007\275\t\2269\275 5\237=\020\366\344\274\003\007\004<\243\351\245;i\330]=\306\323T\275\222\302\257\275<\236\352\274\312\323\220<\235oE<A\301\326\274#>\300<9dH=6\024L=C\341\031=\346\006W\275\360\246\002<g\361\210\275d\374r<\272\360\321\272\373\016\227\275\240~\202<D\362\330=p\2377\275\003M\347<\321}\004> \014?=\206x\014\276\366\234\201=\261\021\356\274@R\016=z\312\014\276\333\031d<\221=G=^\246\206\274w~0\274\t\370\314:E\2741\275\002\313H;(\304\013\274\021\213!\276\265}?<CI\213=\303h\177=rk\323=\n\237\016\276\'\"\260\274\237m;=U{_\274\3748\200\275\324b\251=<\352\306=\261\376\234\275\233\355\231\273-\"r\274\254 \332\275)\\\257\275\'$\014\275\275\314&=\245a8\275\206q\037<\'9\220\274n\245\235\275@\350\214=\374\232\275\274\270\031\210<\265\220&=\271|t=3\247\232\275Mv\236\275\263 \247=\\\256\347\275\'\373\337\275!\371*<\371^\277\275\351;>=\023\221\247=\3311~=<-\330\275\345\232a\275\232)\303=.Q\177\275\363\230\212=\242\200\037=\252A^=\302\216\367=\343\365\001\276\'\026\226\275LT\301=;\230I\275\205\303\203\275FwB=O\326\271\275\340\244\343\275u\377\006\276`V\215\275_\010\214<p\216,<\367h\253=h(\007=\025\014<<]\337g\275y\221<\275?3\033\274\322W\234<\032~s\274}\356]\275\210\344\021\275J\336\231\275\347ke<|\034\006=\306\246\235\275REt;\243#z=\317\372\203\275(\241\034<\177B\224=l\340\255<4\345\364<\005\235T<\247l\207\275\364\237\220<\255R\261\275\326\005\340\2747\272\030\274\2034\214\273\250_\211<\362\303\036>\r\267O\275\330\211=\275\377]\220\275/)\271\275\265Dn\27575N=\215\374\\<\004\034\226<\272\275\245\274\235\3636\274j\\\216\275E\356\376\274\341[\217\275\331\211x\274\270\337\270\274&\373\326\274\034\n==\266R\374\275\325\217\274=\335X\310\275\262\317\357=\250P\216;\031{9\275>\251\272\275@\374h=6w\352\274\234\004\264=\360\231\257\275\234H\326=\016\005`=\247\372~\275h-\207\275Zj\\<\271;$=\263\204u=D\343\206\274cd\307\275\026\320\224=\315\222\322=\022\277\014>\200\031\306\275<C\217;1\214\243\275Y\333\211\275\247\334\262<r0|=\332\335x<iaF\276\327|7\2743\024\240\275B)\250<?\016\351=\372\"\302\274\211?\277\273N\205\324\275\251\261m\275\274\245;\275}<\013>,\237F\273FC\373<g\272s\275\013A\201<8\317\234\275r\235c=<SB\2754\326\321\274Ueu=\237\\\327\274\247\204?\275_ l=\214\277\377\274\256A\302\275\035\037\203\275\250\274\036\274\363(\351\275m\212:<\352\206\002=\250\202@\274\020\300\301=\210>8=\355\357v\275\tX\361<\026*\\=5#\306;\366>\004\275\354\254\004\275B\262\n\275G\323\017>g!x\275\025\230Q\275\337\227\342<d#\t\274\271\243\367\275\365\350\361;\2541\221=n\355\262\274\255\245\240=\343K\235\275a\351\212\275\262`C\275\236\2021\274\010\376\254\275\223\037x\275\203p\304=-\002\361\274\2734\302=pO\235\275\234\374\023\275\316`\376<\340yb==\213\326=,\260\335\275*\374\320\274}\034\210\275\212]\223=P\261j\275!\375\003\276H\004\311<L\320\t<\266\355+\275d\376\3339\2312\236\275U\002-\274[i\275\275\255 #=\273\217\004=\247\222\001\275\376n\014=\334\235\021=\177;\221\274\247\213\213\275\275TY<\346\331Y=N\340\343\274\247\225\201\275\"z\027<\200|$<\204\022\272<\226\016\255\274\204\355f\270\263\327\222=\327vJ\272u5\233\274V\177\017\275\200\331\362\274\274\256\343\274$\350 \275\2178\n\275\235\t\223\273\3721\265\273\267/<=-\360W=\337\267\230\275\021MR=\240pD=@\0226=\324\232\020=5\341Y\275\245\313W=H\224l\275\306\265\360<r\261\230\275\r\017\206\275\213\322@=\202w\333<\373W\204\274Zi[=\355b\247\275H\260d\275M?\203\275\2768\354<f\2034=\354\315\364\273l\206!=G\237\203=\267\273\305\274\257\272\210=_|\352<\253\253\247\275\327R\364=\236y\251\274lA\235=\203\347D\275\240U\021\276\373\022D=\343L\237=\366\350\321;D\020\t\274\366/M= A\362\275\212oM\275\027\000\260<GG\243<m\230T=\010\331i\2748gG<M1J<C\225f\275g\312\377\275X8\337=\215 \261< \272Y<\\\347\325\273\236K?\275\224q\205\273\225\242\277\275|\264\003=Kc\376\275\332\317\370<\033E/\274u\356%\274G\253\324<\033FG=\360\226\245\274S\000==\320\026K\275b\377\004\276\371\323\177=\035\005\226\274sxt=r\234\350\274\301\363\330\275\371\254@=\300E\226<(=\001=\213\232\264\275\342>q:\307b\224;\211\223\242<\244$\001\275!-?;wO\305\275\370\227\301\275pf\"\275\016aL;u\2619\275\213\353\357=%\0303\275l\316\251=H\357\226=\275R^=A\'e=g\333)\275\034\225\246=\007\000H\273\2654Q=\320\250\276\273\036}\t\276~G\235\275\336?d<\217\331#<\364]M<P\255$>\265\355\252:\201\266\321<\311\231\213\274\366\327\300\275\033\377\227\275\370S\177\275hJ;=\356E\232\275\350Jp;\367\311\202\275*\334\226\275\005~\250=\246*\235=\273\243d\274\230\367h\274\024\226\235\272\245~*=\331<\275;J\233\266\275\365j\316\274\3650-=\335\236\020\275,f\030\275\\J\r=Uw\241\274\027\236\350\274D\014\005<\022\266\250:\221\306\004>\351\227\227\272\353\236\003=\303<P;\231t\324;u\224c=V\261\234=\035 \271=\220\347\010\275&J\201\275\"\202\344\273\001\027\200\275T\2677\275m\337;=h-\373;\035pa\274\270?>;\227\3645\275&.%<\364\277\334=5=*=w8\016=\310\371\361\275\376\361\345\271@\217\277=\246\210\315\272\031\376\021=!k.=\231\360\364=\362\357V\275hgK=\315X\364\274m\016y=gf\n\275\323\010k\275\255\022\005\276\366(\240=\372\033}=8Rb=~\216\230\274(\252\257\274W\272\034<i\202*\2752\330\341\274Q:\001\276\240\n}\275\300X\204\275F\260\236=\274\3743>\033i\034<\014\335\276\275G\332\201=b\376\362\272\320\354\354\275!T\227=\364\350-\274\336%\000=\257\202\021\276\2053\244=\312\004\014=\332\031\275=\266R\253\275)V\203=_2\227\274\375\344%\275\216\317c\275)\3021=\314\313\032>\335G\036=)8\230=n7\203\275YO\201\275(\330x\2755w\002\275)\205\335<#\026(=\260+\366\274\233\241h=\000wM\276S{\213=m\322]\274\225\214\234:\003\276#\275\326\351\014=\n\n\266\273\221\021&<p\014\245\274)\026;=\007\340\337=\215\330\211=X\201\000\276\330\324\241\275lI\342<\316T\300=\353\204\003\275t\033\017\275\324\346\344=1\275\r>\37116;\\a\357<\315d\024\276 \243\325\274\315\332Z\2751\215F\274\001\270\351\274\351\222\231\271\342\330\265=*\362\341<\213\305\223\273Q\023!=\212\365\311;\346\356\227\2750\313\305\274\374l\016<\215\254\237=\231qF\275\036\236\243<`\365\256\273)\253w=6\320\261\274\003\215&=_B\255=\377\2735\275\346\351\303\275\307zk=Cp\307\275\no\360<\217%\205=/\'\227=!w8\275\377.\277\274$\207\026\276\014\370\207<\037Nr=\013\023A\275\365\002\024<4:t\275\240\301\217\275\375A\014\274\325\256\010<{\274\201=D\'\314\275[\213\214=\\}\t>\022K\214\274\353\026\005<\326o\357\274N>\025<\324\335\256<\220\250\240=8\236\271\275\214\031\032>\373\372\003=\251t\303<]@\216=3g*=\030\t\312<\324S\'<G\225\370\272|\272\226\275\006\314\302;\261\201\205<Oo\347\274\341\310T=\253j\'\274l\330\334\275u\347\215;\335\024\243<\340\030\240\274\323]?\275#\347E\275\352u\303\274\270\373\006=\n\266L\275\257\246\317\275\202?\313=\321\301\007\276\326\000\236\273|\233\261<\030\325\300\273\225R\264\275%\003\341\275\317\300\303\274lI\3749x\\\351\275\327N.\275\026,X=\016\374\341\273\254\210<=31\032\275\252\353d\273\232\314\210\275\361V2=\244\033<=@mH=\212\362\234<6\200O\274H\2005\275\273\021\016>\320\322\374=\017\371@=\033\303\273=\020\226\253\274S\322\001\275g\243\017=Lk;=ak\370<C\362\201<\000\354\362\274\270\037e\275\205\254^=\245\256\020=\253\032B\275\023c\232=\232\020U=h\030\206=\353b\203\275\215\3461\275y\354-\275\nx\251\275\017h\001\276\t\334)\275\356a\311\274\312E\207\275\307w\233\272\316U\236\275\366\005\341\275U\256\310\273oE\034=\3125O=\2265\031\275\013XX=q\272:\274AK\377<\374A`;\177\242\375<\215l\346\274\010\361\235=\214\004\210=l\324\217\275\272\205\225\274\271\333\256:\326\361 <\230\030E\275\307\373\014\275\346\227d=\376\224\033=\317\037!\2759\235\270\274Xe\253\273\317F\001=p\341\201=L\356\025>\r\270\355=\364o\227=u\336&\275$|\306<y\'\252=@L\014\274A\224\317\275>\264d=\215\031D\2757\016?\275KBM\275\263G\220=F)\362\275\032/\365=\003\023\202;U\201\300<\235\212\220\275\273\260i=\001\000<=F\340\321=\314\030 =J\367\030\275vIZ=c\013\243=\024\355\377\273%r?>7\376\223<]v\364\275\213Yj=$r\033=\000\005\250<\304u\361\273\377\177\016\275\334\246\031\275 \332\273\274B\262\301;\301Us=\251\256\333\275?^\335;\227Z\331<8\315=\275\n\r\350=\006D\004=\347\301\034;\3210\314;\203\220\217\273\375\022\323;\326\214E=\"\266\"<{V\2209\3379c=\221\313\314\2757\323J=\272\330\\\274\024\n\205\275X\226\344;\353\302\352\274Pi\276\275t\253\210\275N^\033\275@7\010\275\254\273\203\275\353\034\206=\235,\225\275S\020\332\274A?\274=d2j=\027w\340<z\374}\275}N =\206*\n=\206\251\033\275<\021]\274\351\266A=\371\327\207<B\306\023=\314\016\025=\005C\251\275\243\252k\2758J\014\276\300\272\337=\363e\252\273B\355\272:`\275\301\274>(\327\275\304\302m\275+N\307\271\241\215y<\331\273\244\275\017\201\254=\247[\253<\222s\315\274\305\027\312=\033\005\314\274T)\267<\010\300\\=$O\230=\356\370\"=\373}\005\275\253\007\317\274\034\236\217=\354\003\247\275\324@\255=\220U\262\275\334D4\275\210V\240=\320b\023<\336\254\222\275{vf;\033\373\313=\333\252-\274*\246\212<^\247\035<2\016\356\275\201\006\203\275P\004\304;L,\260\273\031\252d\2754\353\202<\344W\256<\365\005\014=\3633\351=\270t\206;&\252>\276<\325C<,\025\364=$\273\'>\227\376\216=\303\362\215\275?\214Q\275\364\264\255<\325!Q=#(\342<(\362\317=k\307\203\275\"N\200\275\264\202\000>\206\247\247=[\355p=\345\177\031=\213\276\345\274\311\244\366;\006\200\333\273\3320\021\275<\206\037\276\007\026\271=m\244\352\274y>R\274\365ml\275s\313=<\202U\013>\030\255(\276\331[L=\002\3326\275\357\215\272\274@\342k=5\354\274\275\227 \253\274`T\344<g`\t\275\014\335G\275*\226G=\2079O<V\315\206\274\247\364\375\274\327\"\205=9\217^=\322pP=\215\271&\274!>\234\274\237\013f\275!\360\211<\300pv:<\202\317\274\021;==\274\324\207=\315\316\020<.]\220=[w6\275\n\240C\275Z\267f\273\221I\t=\311\376\225=\'\342;=X43<p\325\232=\211y0\275\005\210\306\274\326[y\274I|j\274\033\016\003\274\342A\007=\200\371\310=1\004\236\275\236\251\303\271\007\331>=\333C\006\276\251GR=x\357\3229s\317\361\273\253\330\252;IW{=\207\236\033=\0001\312\275\331\223\375;\024\321\220<\006\234\001=\031\251e\274\243\245\357=\024t}\275lh4=\3250\277\273\211\'\254=\301\202\215<\276\'\245\273\031:b;\364*\004=qZ\301=\244;\274=\303\273\203\275\022\343^=\214\265L<o\344\343=\3224\226=\231Y9=\224 \037\275\274\217\243\272\216X\267\275\351\342\213=\247\270\354=\033\303G<\363=?=)\273\346\274\255g\305\275\344\333\272;\343\004\215\274\367\247\300<\035\256^\274>h/\275\304\317\004\275\273\330\347=\232\307[=\000\256\025<\014n\306=\240+h\274b\214\"<\371\257\302\275^\330\262;\224L\251\275\257\326P\274"
      }
    }
  }
}
node {
  name: "LSTM_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/kernel/Assign"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "LSTM_1/kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/kernel/read"
  op: "Identity"
  input: "LSTM_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Square"
  op: "Square"
  input: "LSTM_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer/mul"
  input: "LSTM_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer/add/x"
  input: "LSTM_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\027\024/\275\t\325\244<w\207r=\0176I\275\224\212==\353\024\035<\222E\262=\0173\240\275Y\350\030=\211\251y<]\357\224<\272\022q\274;TP\275\210\200:=K\210u<\277\014\335\274LZU\275\262\374S\275c\272l\275\2505g\275Y\364\337=\327Q~\275\364\324\"=W\034\314\274\267\'\022\275\013\232\347\271-9a\275\033\305{=\366I\276<\207\027\340=F\306\353\275g\343\202=\250\\O=+_p\275\265\000\346\274\262\320x\275\3209\315=jy\235=\377\352\277;\362?\246\275\227\303\375<P\366\341;\0370\370\275\330\240\211=\342S\033\273\263>\276:\345\354\231\275\325|\346=\341\376<\275\343H\343=\203K\335\275=,2\275\230\020\233\274\317K\371<\274\257\203\275\007\240\211:\'HN\275\335\354\263\274o|\245</\220\006\276\336\302\231\275\245\270g\274z\263\033\274\326t\256;*\203\214\273\221d\221<qP\002>T\211/\276\002\244K\273\257\276(=C[%\275\034v>=<\031\022\275@\334\235\275\027;\010<Y\203}=\261\027\244\274\243e\227\274,a\307=\222m\025\275/\250\233\274gw2\2755<\337\274W\2319\276D\312\355\274\0109\034>Z\245\201=?U\356\275:Ws\275\210@\202=\021\216m=\000\315\233\275\246%l\275\361R[\274\327\215#=\251\300\272\274T\354\223\274\226\316\204=Dc\007\275\343q\222\275D\353Q\272a\276\006=n\027\320<\271\202\252\275\353\341D\275\337|\334\274\177O\n=\362\363\303<\020\000\254=\016;\265\274\251\252{\274\362\301w\2752\277\341<\\`\333=\020\305\334\274\330P\320=\301\372\201\275\367-\327\275\370\353\322<}}p=\202\252\325=}\212k=K\017|=o\365\027=\032\353\036\275\204\231\360<_\247\305=\0333,\276\377\302\024=\325u\274=\002g!=\336\363\350\275\216\375o\274\263\263\327<\310N\210=s\307:=\363\312\273<\377\266\253=\255)a<\340\301\2338uj\002>\354\204\352=\361}v;\374\r\020\275+\211\224\273o\207&=a3F\275gz\326<.4\232\275{\022\232\275YN\301<[\021\330<\233\335#\274\005\376#\274\303\302s\275\344\000\273<\021X\347;\221\376V=\326\257\004\276!v8\272\276L\022\275\314O\250;\322BJ\275\032\352\334<n2\013\275\341.\266=\204\364\212\275\224\274e\275\333\027[\2736\272\"\2742*\n=v\020\225:|PN>\214O\024\274\3535l=C\022\353\274\332W\262\274\017\211|\275E\031[=\243\326_\274\006\213D=S\254\036\273<\021\300=\331$\235\274\206u\'=\271\214\275=ic*\275\250\341\'\274\027\226\036>\003\217%\275\317!S=W\316+\275R:N<\007w*=#\022\010=\361R\006\276\272J!<*\321\211=\000T\233=\261\331)==\234\235\274\272\005\r\274\224\340H<m4\300;\345\352\356\274H\220\270=\\\252\325\273?\274\007=j\332/\275\343\014\272=6\214\253<\333\247\305\274\220\354\234\273\342\216\207<\342}\235\274\230\253\202\275\037\311\311<oT\271<\013QM\275\242*-<T3\001\2741\346\010\276\301@\222=\216\030\003\276G\246\363=\035Z9=\240C\241;\304\230\227\274\363\374y<5\314\324;\367\252Y<z\000\003\276\215\374k=\225\371]<\220:f<\003\273\336<)\000A\275C\353\207<\350\032\332=>\177\212\275\330\366\023\275\305Fl\275-\225u=\344\231\024\276\274\235<=\361\203\364\274\237Q\306\274\35788\274Z\337*=\300g\302<\251_k<\001\336\014>\3216^\275\'5\222\274\334T\354<\273^\002\275\334P\211\274e@\"\274y\356\241\274\301\327X<\366O\366\274;\371\203<\\\376\r=\346\036\320\274v\327j=AX\003\274\352\000K\273\372t\306<%\177\033\275*(]=\347\250\'=a\327\304=\343\364\243<\230@\244=Zab=\275\336x\274%\020\366<}\206T\275\363\275\304\275T+\026>{p3<\372.\274\274J\022e\274\201\320$<2Q\251\275\201\351\261<\314\'\265;\014sl=\232,]\275~\332\r<\204\006\021>\0307\302\274N\352:=\010\213\343<\346JI=`\270\271=\234\347\261=@6\t=H-\251\274\210\247\241=Q\304R<1j\235<\231}\023\275\354K7\275\336\266\000\275\006\334\017\276\263\374\304=\256\206\362<\217\340H\274<\221L\275tX\361;\037\022w<\330\207\362\275\333\300\006=\362\3731\275\017F}\275\270\240\022\275cp\275=\327\235\274<\205\310\240=\002\260\334\275\301\023S\273\037\027\032\275hKI=\330K\265:\301\373\206<\n%\333\274\267\362\253\275\372l\206=\342\235\345=@\372$\275!\205c=-b\214<\354\220\304\275\324\017\231=g\217\242\275\256\322\344<L\310\345<n%6\274k\233\362:k)\355\275#\343\260<Y\333\224\274\277L0\275\352A\271\275\233MY\275\220oD\274\260\305\257\274F\377\217\275\020\016\216\275$\363/\274\276\027\246;eC\025\275!\253\027\275Ax\302\274\232\232\016>\023\255\206<\215\024\303<Sd\215\274\277\315U=\264\261\201<\212\362\261=\365\211[=1\300\236\275B\370\225=\202\017\353<\302\237\022=\362L#=\200\0043>:\300\322=\234\375\316\275\034\300\221=C\332\252<\'e\">\206\246\351=\200\330@\275#\006\004=_\230\322=S\\}=\210j_=D9\377<kR\362\273\253\037\310\273\365\006\262\274\327\337\024<\276C\215=]\377\266\275\201\244\256;]\tN<\373>\362\275\025\022\207\275\337\360\">\316W\"=\336\'\310<#4E\275\007C\234=\rB\257=\261\270\302\274\376\275\252\275gD\275=\033T\232=\024c\000\276\326-\177\275g\0048\274?WT\274|\274d\275\036\336I\274\030@B\274&\377\207\275M\350\274\275\325%5>\022}\340=\036\324~\273H\024B\275\341Av=\374\340G=\367\237y\275\362\326P<\216D\235<gn\301\275\365\353\007=\005\261\306\275\006\"\007>u\200D\275\244p\200\275\275\373\024=\351\350\225=\234\305\013\274\356\376\272\273g7\214<\261\234!=\362h\017\275#\256\277\275H\320\276\275\217\205\344<\277:\222<Rs\271;\034\202\333\274(\227<\275\223\224\037<-I\250\275\022|$<&\226\215=\215\210\027=\n\2332\2758\234\t>WF0\275\340\311\333<\267~.\275\034\240\240\274<J\310\274\274\256\320\273\267W,\274,\030\336\275#\223\'=[\307\305;\375\315\335\274GK8=\010\213\030>\362\212\317<\265\320\001=\217\235\252\274\326\025\224<w\215S\274o\t\261<\177k\344=3\003\203\274L\312\357\270\233yf\273\226\202+\274\001\201@=]\005\311\275\246\316\324\274\206m2\274\014\237\234=\036`L=\245\361|\271QH\217=\022+e\275\245\321\307\274F\027\013\275\013\350U\274E\201\311=(\274i=\200\302\262\274\343\246&=)\361|<\325(\317<c\013\025\275\360\272\006\275P$\027\2758\376d=e2\241\275\362N\301;\362\027\002\275YN\235\275$=A\275\307\245\260\2758\037\013>n\273/\275/1\311=\201d\210<)\335\344\274|\2740\274j\033.\274\276\0300>\235\346\264<d=\352<\350u\362\275\366\267\217<\374\230\267=k\3411=\357{\360<\355\233\006\275\025\177\013\274e;?=\257\327\233\275]1\027=$\361\241\275\375[k\275\220\231\037\275\001\304x\275o\322Z=~\223\310\274V\237\265=\254\177\346<\245\336i=\375{\301=\377\325\350\274#\252j\275\271\207:=\314x\256\274\323q\337\274d\037\004>\336$\313<&\257\020=\206\332\223\274\314\177\203<\354\210F\274\020}\313=\212\177]=.N!\273\334\226\246<\200>}=\254\366E\275\367A@=`\r\3109\242\223_\275\321\326\247\275\037,l\275\337\376\016\275\367\276\277=\323\373^\274oL\240\273&\325\221=%Z\304=zT\327\275f\217\223=@<v\275\201`\360\274\025\273\022=\221F\214<\375\244\350<o\260\227\275\272\221\n\274\365F)<\010\t\027>\335j\377\274\253\025\312\274\\\241\314=\240\371\301\274\223\375\246\273\356\315#\274z\226\t=\220\221\306\275N\031\332\274\230M\022<\2300\003>)\261\021>\326CB>`\244\036\275F\212o=\244U\036\275\360\037\026=\362\321\036<U\352l=\260\361\025\275P\'\220=\2545\237=y\204\345<_\222\004\274\260q\275=/\215Z\275\331\327\010;V\'\202=\037V&\276\037mU\274\004a\325<\2775\022=E\333b\275D\251c=90V\275\3121\353=/&A=fpJ=n\201\007=\342nK=5{5<\212w\225<.U1\273\231h=\276]I\036=\3161);\335\026\276<\210zA=5\235\260\275\253>\032<@\241\265=v?\3119\200\301\016\274\234t^:\244\310\246\274\006p\217<\321\3734=\245\222\260=\320\227\340=h\251\006\275\016\332y=\202\030\332<,\243\200==,\026\2760\003\237=in\302\274\216\201i=\227\025\354=\033I\265\275Vm\027=\005\350\322\273\263Hp\275\004\375\310\274F\207\220\275\006\344r=\32256<\313\352\347\274\006\252\263\275\036\211\202=y\226\217<B\212\252\274\240\370\255=|\033\022=\276o\010=\350\362?\274h\213Y<s\n)\275\2022*\275\246\265\207<\253]\346\275\202\341\323<\340\245\215\275\304\364G=\234\010\216\274\216}\205\275i\370\034\2751*|=\337\374\337<\240\005\325\274\037\234^=\016\274\021\275V\n\302<X~\347\274\304\316\241=\202V\023=\310mb=\305\034\016\276\351\217\355\274\377\3246\274Y;.<\212a\213=\007\304\320\273p\202\200\275\005\023\342;|>G\275\277\300 \275n\037\221\274b\303a\275\212B\321=\233\274\036\275L\345\325\274\024\351\367\275\325\326\002>H\013L\275\305G\221\275\002\007\004=\023FG\272\345\311\253;\\\2237\275u\300\235\275:\014w=\333\264\337\275\334\363\341<\212\253\210\275;\223\023\276r\234\014\275!\371\356\275\020\247\212=\341Y)\275\373\374\200;\263#n=\353\036\231\275\017\240\036=?\304L\275\372<\224<\016\204\354=\245NE=B8\201=<=\274\275\336\342\013\276\'\264\206=\231\211r\275\362\323\233<mM\365\275\337\305\331\274\033\326F=V\022q\274\215\322C\274Qk\007>\235xk\275\337\017b<\203\"d\275\371\312\n\2748\274 =~\331\210=JM\215\275\231\310\031<\333\023\271=\214\366\273\274M`\t\275~X_\275in\016\275)\372J<\242\211\264=\361\357\316=\357\251\226=4\300[9T\277\317=\337\220R\275\037}v\275Z\223\250=\334s\033>\343\347\017;,|\034=\230\024C<.|2\274\036\203y=\324\220\204:\004\231o=0>C;\203\254\241=\013\256\364<V2=\275\303vH=d\"\215\274}0\013=\367\035\235<\031.)=n\360\355\274\301\304\372\274\353\374\030=y\374\025\276\336\024U=\204w\365\274C\265\013\273i\236r\275\210h\310\275\266w\020\275\n\344\341\274\000yD=\"\372[:\271\031\273:0Lh\275\216\332\266\275\023<+=\265\347\030=\225\201\033=\370\317\237\275?\371}<\363(\306\275\210[\023>v\006\026>\033\312\300<\2748\r\274\300\207\366:\245+\210\274\001\201\033<\362J\240\275I}C\275\204:u=\314\234\037\2752\263\003\274\322\314(=\342\377\224<\237\016\337\274\273;\216\274F\016x<\315b\256=}\313|\275\r\336\340=\232\022<=h\221\226<\350]:=\"\270+\275\246\212\227;\302\350==\347\251a\275\007\004\357\273\276&^=\350%\232\275:\024;\275 ;\265=j\333:<\302\211\215\274\021l\307\274\350\030\232=_9N=\217\327Z\275%\253\207=\312\370\201\275Fw<<\233\020\217=\223M\033\275\tS\271;G\242\216\275\311\203\276=\370\211\263=\020\336\214;\022\004\r\276-\226\224<#\2604=$\236\242\274\210\004\354\274E;\251=\023_\023\274\215\2508<\201\033\202\275\000\270\265=\253\2314=&,\340\274:\374\235\272*M\257\275u\266\201\275T\272\014\275\376\223\262<\261\276\362=\312\265\n\275v8(>\327\234{=<h\317<\3517*=!\267\'\2756!Y\273\225\257\266\273M6\266\274\025(\021;\226\377\262\272D\263\013=\313\"\364\275\264\246\202\275\316\227^\275\013\245?\273\375\302i<\026I\372\2745\240\243=Q6\245=V\350\320\274f\326\222\274\261G[=\3654\230\275\353\212#\274\202\342 \275\212\262T\275\331B\315\275\325M\267;\350\313\006\275\333\3035<\341!\275<\032\211\016>\3157\034>sx#=\374\000\366\273M\332\210\275\276\313\r==\277*\275\033\026\370\274X\001\253=\336\257\341\2759\311u\275\024\307\017\276\2617\001>\224]k\275\"j\222=*\267i\274\242\240p\275\203)B=i\303\272\275\234 \"\274\3037g\274\3561\255<J6\230\275E_A=P\273\243\275\221\205\277<X\223\244<\371\262\'\275\250\325}\275\235\013\024\275\332i(=\030\211\017;\017\345n\274L\210R=\014\256+\275\362\177\230\275\304\260\326\274\240\375\307\274\2170\377\275\251\321,=O\217\235\275X\332\t>\3751M=\226\230\242=\243,\267=VY\261\275\013\201p\274H\222Z\275\321\'m=\316\247\370\274\006\232\337\274\317\003\037\274\262Q&\274\210b\365=\256\376?=\3316\214=\332\177w\275\315\226\004\275\374\013\230<\360M\031=\316\234\237\271\371j\032\275\364\316\367<\316;\275=P\315\205\2740\352\250\275H\026o\274\372\r\002>Av\232;%c\330\2741\016\033\275\223}\262\273k\032(\276 _.\275\264\212\323<7K\337\274\3678\235=J\350Y=\270\273G=/}d\275\205]\266\274\234\245\264\275\337 >:\311\025\334<]\305+\276\261\322\336=\246\\L\275B~P;\336H\344\275\026\002\016\274L\270\266\272\032\177O<\n\270\000>O(]\2758\250\246<=\264\300=\003\t\273\274>\277T\275\205\353\220=\303\016}\275\\Z\344\274\271.\240\275\304D\345=$\345<\2752\3436<\254\257\360=b\322\301=;b\001\276\274\352\263\274B5:=+\257\222\275\325\360\3077E@\260\275\230d\361\273\253\272\375\273a\351\005=S@?<\031\237\260<Q\020\302<\"w\022\275\305\307\030=\272\335A=\205\233\t\276\000\252\203;)\223B=F\367S=\271Iw\275q\346\037=\371,\215\274\375(\003\275\244z\330=\013\374\021=\303\000\247<*_<\275\237\264\256\275@\213\002\275\243W\240:\365\3156=B2!\275\001\262M\274B\244\003\276\032\324\264\274\016\003\273=8\213\243\272\007%\\\275\334y\205=)Nf\274\037\350\276=\247e\331\273\014>\356<u\021\t>\022\203\023\276\261\010\320\274\234\337/=\350\303s=\356\336\314\275\333\253\254<\271\013\014>\036\037\244\275~BK\275\353\2160\275)\363\270<\357[\273=\243\256\326\275{\212\307\274\001\377\204=\305\331}\275\'r\313=\220=\221<\024\321\357=j\001\253\275\244\023~<\361\275[\275\331\266\323\274\\\"\242<w\361\372\274|\343T\274vw\375=W\347\033=\035\233n\275\022\343v\275c\310\316\274\323\307\n\275\212\025\224\275*\261\017=>c;\275\t\035\206\275/\201\254\275*\323o\27508w\275\000\037\353\275[-E\275\343\252z\275E\013#=@\310\201\275\006\003c=\342\236\\\275\353\352\030=\244\235+\275~\230\036<\023\010$<Q\243\210\2752\354\016\275Y\r\320\275\352\310\327;\315/t\274\037_\347\274*P\272\275\313\252\235<\230\013\214\2754\345.\275\333\004\343\273\253\2748\275\345\311\r=6)\035\274\342__\275\341\324\320\274\220\206y\275\353\027\253=\031\312\212=\346#\277<\'[\201\275\211\364\332=\343\230\223=\242P}<\330\312\360<\344\3153<\227Y4\275_\230y<\354[n\275Yc!=ZMy=\022\0054\275\324\'\032;gI\246<\037-q\275\021\213*\275\273\324\262;\037U\315\275L\031\234<k\316\217<\314\003\267=T\010\006\274\206\n\004\275\001\263\312<\353\320\272=\203#\031\276\353\226\244\274llu:\264\372\231=\"\342\\\274\212\234\210=\354\014\210=\274L\230=%^f\275P_\330\275K\024\334=jE\251=~w\276=e1\203\275\370S\301<\307\022\217\275I\315\343\275\334<\"=\206\312\343=\026\201\0068\366\224/=\377\036\034\275\"\261\272\273\340\245\270\275\331K7=\321\345}\275\302\274\27484\317e;\206\357\354=!n\376<P\332\276=fC\2169%9\342\275\301\207\362:\216\006(\275F\361\350\2756-:=\365Y\332=\332\335\257\2742\253\023=Epd=\3353\353;\016<\030\275\002\230\220\274Y\240\307;\321\214g;\366\200\360\274\250d\377\275\252\263\214=\247\360\003>\032\220\204\274\023\341\022\275\0265S=S\324\275;=\261u\275:\227|\274\315\257-:\215\224\013>.\260\230;\336a\272\2751\345c=\032\030\255=7I\243;bLc\275\332\007\241\275\366r\201\275g\207+\274r\271x\273\244\311+\276)4\345;\214\027\211=\325\221\031\275\020\035\267<\037-5<\302 7\275M\327\214\275\351\246g\274\236&\360=cW\261\275=r\032\274\270F\374\275\211\241\326=n\032\255<\270Aq\2744\'\302<\272\034\014=\213_^;\221\023\232\274\323n\262=H.\321\275\037:\030=\t\013\017>z\267\335<\233ZH<!9?<u\326O\274\244\273l=\177 5\275\350\245\250=Zo\003=\333\225\333;\222Ie=\324\317F=\364\211\241=\341\025I\274\265\\Y\275\377\3639\274\024\014K\275\027\272\024=\355\251\200=\377\034\014=\354h\323\273\344\345\313=W{\204<\330\301\211<s\274\222\274\030\354\255\275\301)\357\272\371<\253=\362\266\210\274\323\332\026=\032\350\004\275\337d\002=\367r\'=\2718\226\275\320>\026\275a\254\210\274\307\270V=$wJ\275\310\204\230\275\326\326\303;E\342q=g\022\003=\240\273\033=\026\226\247=;\305\022\275Qz2\275;n\240\274 3x\275\335\340\225=H\306\014=\254\224\325=\242\267\n\276i\370d\275\363\027G=\376\246\220=\316\3540\275\277\t\265=\252\254\372\274\362>\300\274\013S\332=\262\353\241\275\217\3122=}\364D=\327_\002=\003\\\016\275(TL<\323\0138\275\275\236\201\275\336\261\335=!\235\302\274D\'\252\275\000\217\234<x\007h=3\220\204=\226\366\252=\013\335l;\373o\272\274/\275\216=\247\243\335\274-\225\360<_rt\275\\s:=t\337\263<z\207\223\275WC\004=f\366B;uxW<\245\313p\272t\305\261\275\'\255\004=6\244\270<\264e\016<s\330\205\2752\345\212<D\346\305\274\204\267t<\352\376\251\274\246\260\275\275i\235M\275\261\207\001>\314g\261=\036!F\276B\226[\275\"\026O=\324\371\254=4\376(\275\325\310\016=\354\217\033\274\203\2564\274AT\267<\337\324R\275\020\303\200\275\025\222\351;\246\242\361\274\332s*\275\314\314\023=5\267\235<V\245\260\275\'\353\241<\005+\245\274\243=\027=\026\224F=\216\007\306\275f\202E\2712%\032\276\231\300\006\275`\335Z\275\177\365z=\035F\034\274d\034\006\274r\320\325<\3155\256=\203\353\343\275\021d\264\275\264\373\324<\215\234\237=\211\353\330\275}\222\244=\322\234\303=\303E9=\257k/=\271R\005\276\360@X\275h\n\266\275\220\007\020\2740\364=\275\036\245c=\311[\272\274\0069\207\275\317y\335<#6\361<\355\216-=\\8\257=\335P\212=\265R\037\276\272\t\276;h\314?=\227\231\004\2758\263\234<\334\363\353\274\200ny\275X\\\356<\031e_<\200\304\255<;XC\275\032v\034=\245\307C=\0362\305\275\247\252\025\275\224\374\367\275\370\346\250=\237\262\311<q\303\032<\'\355\312<\330\013\200\275\212,\206\274v\232{=\022\300\004=h\321\217=,\177F\275\301\303h=\230o\333\274A\225\004\276O\230s=\373>\251=\006\270{\274\321\006\255<m\003\210\274\026\226o\275\203\370\313\273\246!\307\274\256\216\024=\200\254\006\275P\334e;\230\270\230=\034\267\020\274\375\304\364\275\301T\377\275\371\201\273<\373\362\200=\204\005I\275\316WX\275\334\275d\274\366W\321;\252\236\n\275V/\335\2735(\013=:\267\342\272\266.\317=q\340M=\310\213S\275\362\215\320=\375\363\021=\233\350\322\275\255\350\267\275\315\342\371<\3442\266\274\r\340\336\274\251s6\275l\372\215=Z+]\275\313w\240\275\320\216<>i\301.=@Y\365\273\346\245K\275\221\207\336\275C5\224\274\274M\305<\217A\372\275\331\307z=\311l\306\275\2309\360;\016K@=\177\344\201\275\264?9=\030i\001=[\257\253=n\303\340\275`\033\372<(j\323=`r\206<?SK\275\337q\254=\021\373@\274y\034\207<\244\230s\275B\013p;\324]\201;\357\271\305=\271\250\352\275\240\220\276\275\273W\256\275\234\371k<\301\002\027=jnK\275wO\200\275\243\ny\275>\220\350\275\235O\022<\360Y\275=\274\211&=\211\247\352\275D\375\032\275B\323\247=`~e=\262<r\275\247\347\250\274\253\017\344<b\016\354<\361\021\255\275\256:\331<IO\016=qgj=\271\312\351;K\203\237=\0243\000\276\300\334\233\272v\212\232=($}\275hT0;\204\036\274\274\014\323\365\275;:\022\275\330jD\275\222\351\220<\264\252\273\275\304\377\236<\312\331\271=\322x8\275\363\025\274\273\3605\007<4\363&\275~N2=\324\003,=G\270\321\275\306\036\202=\267\017\035=\351F\026=?\274\301=[\2268<\014\374@=\003\210\225<\350\255\257\275=;\310\275\321\252\247=mjd=>\357\217\275ux\006=\220)r=V/)=\010\210\037\275\"!\377\273c\037\234\274\320\0262=\275\366\211\275\362\277\340<\252\017|<\225\266\207\275c!\336\274P\222\277\274\340y\302\275\347o\030>\366\372z\273tZ\307\275\315\037\233\274\242\305V<|\304N\275w\275\037>Bj\247\274\267m\013=\342\320-=J\375\311\274\'\270\r<\306!\232=\300)\367=\344\214H=\272\303\261\274\34270=\320\3141\274\257\241r<\243\227\302=\214:~=\362\257Z\275\217j0; e\n\274\367?\004<g\034\264=\303ut\275*I\226<]\367\353\274n\336\245<f#a\275\262\017\344\274\006\3503\274\230\314!=B\022\020=\212\300\350<\332!\232=x-|=\035I\370<{)\210\275\313\372\303\2741\226\246\275;7\202=\333)\270<6T\262\275~\251!\274~z\205\274\325\013\242\272\213\000\t=\031Q\313\275;\3059=\320\013J;\326\242,\275m_\261\2753\375\236\271\201\322\020\275\272\374\270<7\246.\274\261?\212\275)#\224\275K\004[<+\024\242\275\250\361\375<A\342q\275\257Tl=q\322\034\275\345X\177\274ym\345:uy\341\274\025|:\275\374\360\031\276\316\333\260=Z\212\332\275]\037\027=\256M\266<\312A\304\275\345\3125=\344\243\250<\2128K\275n\362\200=\313\254!\275\310\322M\275\'\317\332\274h\316\233\274+)|\274\345}\023<I\344%=\215\213\314\275\305\233\212=\257\026\014=\205\201Y=\337\343\327=0d\376\274}h$=\241R\344;\241\275\357<c\304p\2742{\362<\350\372\224=\013\014\372\274,\317\331=\014\271\\=A]\312\274\274\320$<\263\032\037\275\344\340\304\274G#\026\276*\354\002\276>9y=\242\021\202\274\001Y\201=\033Xx=\206\364\325<\257\373\334\275\205\337O>\210\261\251\275\362\214\374\274\323\221\353\275t\020\327<\267\322<\275\373H\313<\233\221^\274O<\325<2\324\224=\200v\216\275\330V\005=\021\210y=\2372\360\274\277\372P=\263\357J=\257|$=_dw<;\021\222=\277L)<\333\251\345\275\021\037\232\274\226_W<9\345\360=-V2=\343\016\306\2759Z\025>\344\320\311;(\251m=4\324\242\272Ax(\274\373O\021<\370q*\276D\374)\275\364\227\353<XN\312<$\301\357<\306\372W\275\211~9=\337\3405\275T\212\277\274.J\244\275\234\341\264=\302@A\275\260\377\000>\265\334a\2754\277\255;\207e\367<V\265:\273\234mc=\214\231\345\274\343\007\205\274]\314\276\275\374\246\246\275m\224,=\201\231\213=R\310f\274*\375\002=$n\177\275\3732\207\275~[\3449\032m\216\274\347O\351\275\301eV\274\345dP\275J\241v\275m\304\232<1@k=$\357\263\273a\\s\275\307\214\324<w\264\325<fE\210\274\3374\030\275 \304\003\275\006\344v\274\245]\240\275\352\310\006=\301Q\031\275\346\204z\275h[\017\276\222\273\226\274\311s\356\274\205\314$=\226\220J;9r\033=\346nP;;t\013\275k\211U\275_e_\275\267f$=\372\000*\275\357\217I\275\253\365\341==\037\343=\230\344\212=\275\311Z=B\026\372<\213\361\273=\225V\232\275\212\321\242\275n\323\275\275\313<\207\274\222\255\237=\204\305\036\275s\317\016\276\353\377\277\274\275>\334=\250\316\254=\271`:=\326\200\033\275O\2542\273\205\276\353\274\252\265\373<\357\216\346\275|\353\316<#;\020<\037\321\321\275\311\212n\275\270\361\010\275>\026s\274[\241\027\276\242\002\007=\333\231)\274tPh<\333\177\314\275\003\3618<U\212$>\350>\363<}\252/\275rH\242\275\265\240\301=\365a\242\275\017\367\207=\326\3035\275\350K\027=_O/=j\016\007\275\357\177\212\275\313\324\247\275M\213\253\2753\272\212=o\234\306\275\375\204_\275\242\217\336\274\3560\030=\304\367\242=m\225\205\275q\377\263\275\260H\200\275+\200\246:1\374~=4/\r>\202O\367=\217\tg=\234\203m\275{\343\t\275L\337l\275\024\235\036\275\326\003w\275x\016\017\276\213\250\252\275\240\374\330=\025\036n\2742S\345\274dX\375\274h)|<,\037\227<l\270\300\275{-H=\301\001\236\275\207n\352\274o\230\26791\240\220\2753\270i<\244\224\230\274K\343}\275\177\321A=\210\376\320<\313{\030\276\320h\331\274w\345m\2753_\245\275s\351v\275F\251\313\275n\356\212\274P\315\262\274`\210\202\273C\364\304\275\275\243\224\274\201\026\253\274_\311\212=o\354q=\321\3508\275\311\350s\273\016W9\270\311\177\204=r\241\260<\334qY<{\303\224\275^\220\251\275\237 W=\241\230x<]\023\017<\341\322\223\274\366\222\302\271\362=\343;\313\216\241\274q\204\377\275c\337\316<\317\320\003\276\265H\253=A\021V=\351\313\270=jRu\275\010 \014\274\006\372\202\275\007\307[<\323\022\211=\272\217\007\275\324#X=]\030\254=\374w6\274V\313\251\275sC\002\273k\217Y\275\332\216\244<\177Xm\274\373\322\303\275\005\222\337=\246M\372<\277\177}\275I\243\361\274\204\205\305=Y\256\220=_\210\203=\227~\023\275\013>\306\274\031\017\240<\244\312\025=\020\022j=$e{\274\244\020\211=W\247z\275)\336C\275>\252\257<K\232\222<\366\355\224<C\271\214=\313@\236\274I\022\270\273\224\312\211\274\247$R\274N\277h\276\215XF=\225\370\337<\214\023\262<\343\220\014\276-qY=\252\236\230=<\370\311<\200\237s\275O\320\245\275\246b`;\251\016U\275\364g\210;\005\002?< \220\200=*B\027<\324Js=\274\270\024<\334\017\253\274N|&\276\221\264\263=\266M\316\274\243*0\275Dg\225\27473\234\275\306\213\264=x\373\317\274,g\306\275\354\316\242<l\260t=\\f\252\275\255nO=U!\311<\n\346R=9\017\302=\216D\024\275\262X\346=\247\244\000=\r\317\210=L\242\036\275[\202\306<x\275\211</\340\226\275(\021\026\276Q\254\275<\005\367c\275\000\325{<\013\240*=_\030\244\274\216W\222<\344\226P=5\355\203\272\3566s<B\261\241\275\021\214\023\275!|\036\275j\'\014=\3673\330\2751X\007\275\256%3\275u\362\001\276\207&+\274,\375\273=\013\230R=\300\303\252=\026\271\204;\352\323w\275\0315\220\275~\312w\275\262\260\017\274cN\354\275\232>\300\275q\300\225\274\233\211\247\273\016\t\237\275\303\372\374:+7\230\275l\217\270=\202\352\211;\ti1\275\260\371\256\274\214\007\235\275<\005\267<Vp\202\275\244\364\364:\2536\376\274^V.<\365\321\343;\224\307\227;^\241\254<\253\202\002\274z\337\220\275|\035\313=n?&\275\3115\255=\364\322D\2753:C\274/\022\311\275\313\340\200\274j\366P\275\303\213\200<%Y\230\275\325I\274=\217\325\301<\263\251]\276IC\252\274(\376m\272%`\021:\300\217<\275\241\353\201\275\2278\340\274\025\264s\275\255\213`=\214|P\275P\177\256\273\206\224\340\275\343\312Z\275q\371\232;\366S1=\366\257p\273Bqn\275Q\201\323\275\370\366\260\275\376\243<<SbM\275\230\367\\=\306g\035=\322\t\200=q,\231\273l\367\245<\365V \273\301\215\344;!\2075=\3276\305;\360\336!\275\313\271\315\275\274>\343\275c\213\263\271\260\201/=\312\256\177<\312\237\002\275d\255\002\276b\203\270<\221\024;\275\355\260v=\233\273W=\314f\270<\326l\235<\334|&=J\307\213=Y\206\027\274\262k\256=\311\013$\276\302\027\240\274T\256\324\274%d\023\274 B;=\271\303\002=\254N\253=1\340P=8sD\274e\"\327\274b\013\256=\2541\216\275\363\027\215\275J\267\025\276\331pU\275\255\031\207=;\033\222\275\005\260\177\275|\250\253=Q]\234<\323\250\222\275\376D\335\275\327\250h\273r\355\350=\230\327D=y\227\264\275\233$P=\357H\251=\211R%\274\000lk=\307\303\004=\236\020/\274\026\014\247=\014\245\320\275\332Q7=v\304\306\273\333kD>{\357\220\275mx-\274_\005\337\274\032\340u;\314\362\365\275b\0005=\364\0376=O\314\247<\223\243l\275g0\342=\240P*=\233N\033=\323\033V;\n\340\215\273zQ\363;bJ\"=^\206\351\275G\226v\272\370\202\304=D\251\332<\032\'\036=\371,\006\275SD&<V\303\273\275\312N\272\275\007\255\362\274r\370\224<\277\353\320\274\375GJ\275h\370C\274\304\nU\274\305\263\262\274\007\365\270\273\351\262\016\275r\272\003>U\030\033\274\356cj=\263u@\274\035\177==\3444\246\275\000\311\241\275,\343\371\275\362\364\302\274\220\247c<\352\201,\275\013\237\233\275\300\276 \275\311\354\333\274\226f9\275A1\235\275\215Y:=z\025(\275\203\323\302\275u\\\033\275\235\300\240<|X\260=g\250\317<u\006l\275I*9\274Yy\362\275@\250\274<\3233\002>\177\203\\\2734\225\027<F\306\026<\001[B=\334\322\247\275\212\026\273\2745\344\020=\347|\024=\342z*\274\217\301\201=@\275\033\275\227\035\223=\303\246\216=\354\2547;\232<\230<\351\207\366<\200\303\266;\217r}9QH\001=\227qf\275{\003V\275\021\220>\274\264\211\220\274Z\341\266\275\365E\337\2740\033\024=\325\324\211=\277s\r>\232\374\334\274\312\322\247=\351\347{=\036\360\222\274\264r(\275\2771-\274\3618\234<\247\2071>w\332\331=\2335r<\255V\024>\264\355F\275]\326\024\275[\313\030=\266\002\230<~%\036=c\233\036\275\2061\007=\301\027E=\233SH\275Ak5\275#w1=H\033f=\272D\277<\251\035M\275\356\246\311=\206\241\347\274\303c\345\275\025\003\322\273\375\007\202\274_\255.\274\032DR=<\210d\275Pl\347\274\335q)=\333\233\206==1\234<\361\262\252\275\017<\226<v\2724=\304CU=$/U\275\363\300Y=#\207[\274\223\"\220=g\214X=\316Z\322<\021\251\026>e\016\r\275\022\333o\275\216\254\335\274\224\371b\275X\337\351\272S\001\010=\007mD\273\2523\'==(\206=\272\245t=g\207\272=\n3@\275\250\370\374<\363\001\316<\235\\W\276\351\'\332<\220\017g=\321b\321;\345\237&=\243`\347=\264\024\036\275\032V\017\276\321\320\367=vr\267<\270\020\332=L\355S<\276-g<\315\300\215\274\345\000\306;v\020o\275\355\327}=\356\247\317=\303)\210\272\366\265\025\275\357\237\261\275,\330J=6f\263\273\271\027\316\275\025\322\256\273\343I\375\274^\314\277\274\370b\352\274\247\273\245\275\321\005\022\275L#W=s\232\301\273yJ\240<\023\221g\275ar\247=\267\353==\021\351\236<\024\253\364=\224\342\201\275`E\335\274\347\360\002\275\375Y\021=\207\205\301<x\242e9\036\337\333\2750{b\274\352I\212\275\035,\200\275\257\347\244\275\274\373a;\337\312\265\275\242\037\277=\252\014\245\275\275\256!>io\033=4\264\275\273}\207\262=\2577\375=\360\"#\275\013\327\013=\021/\036\275lz\026=\n\254\035>\013\330\326\275]\215\363<\257\223\241=\267qX<\372x\347\273\375\005}<\275\373\230<\324CH\275ZM5\275\000b\211\274\014j\215=\2252\373<~\343\236=h\312\030>\336\233\202\274\257\032\350\273\326\374\257\275\315\177\212=\367\263\271\274JUl\275%\025\252\275\206\234\010>n6(\275\324g\246\273&\034c\275*u\312\275\260\023\234\275k\003\375\274`3r;\344\334j\275x\274L=\275\216\244\275r\346y\275\270\271\n\2755E|\275;t\333<S[\004\276\353L\261\275\271\251E\275y\253 =\261\342\224=i\344\363\275\205$\025\275\377\207Y\273\302j\377=\256\350\334<C\265c=\031\020\200=\271iT\275\251q\335<l^\022\274Q\021\005\275\027\252\333<\364\375s=<\221\234=\005z\231=?\2129\274Gr\272<\232@\212\275\224&\274\275U\312\241\274\241\310g<\025\307r\275a\202\326\273ai\276\273\375\253\243\274$\241@<\214\270-=\257<\361<\371\276.<\345V\234=\003\373B=s\366\350<\200\204\223\274.4O=\304\204@=\273\030\325<T|\276\275r\266#\275\253\315\266\273\275\225x=Up\361\272\3217\201=\206\326z=Z\022b\275\010?\236\275\236\253L=\340u\203\274ME\245=LnP=\310\376!\275w\266\332;\357\255*\276\371-B<\354:R\275m8\001>9\324\236\275\346\314\243\275\216/\227\273\312\020\340\275lH8=\014\360X<\031t\275\273Q\221\306=b\336\036\275\271\263\242\275\210\327];M\247\223\274\350\217g<\367ZP=}\362\021=\n\372\004=\375)\233=\037aF=<B\316\274\025\245i\275\031@\374;\350]`\275\330\3172\275\271\272\201<Zg\205=\265\340\314=\226\367\226;\261\246<\275\241\030;\275\232\322\256<\366\3303=\252p\270<o\r\037<\013\231\310=&\377^\275\325/\212<f k<\025D\337\274\350\210o<\021\250v=\332\223{=\367I\200\275\226\372/=\373\260o\275\234g\007\275[L\\\275}\305U<\373ez<u9\205\273!D8=\204\2779>\332\247\207\274L\327\271\274\254d==\251\374\376<\253{\300\273\310\345\007\276\325\005\027\273\202w[=\307\254\014<\027\034\262;\261\t\333;\361u\267;\004O\323\275\207\237\241\274\252\247\365\274s\022\247<nr\237\274\243\242\253<\253\311\342\273kP\206\274\003\006\232<\356\252\177=o\221\017\274*\264\226<\020\2071\275\321{H=\\,\013=\247\357\270=0c\356=0\324\177=\275\017:<\303A\273=F\027\355=\300u\340\275g\322&<\251\226\313\2743\220a\2750\337\231=\231\251\225=\204\330\023\275N\037n\27372\">\030p\027\275l\275\277\274\213\367\261\271\220\307\313\275\033c#>[W=<\313\204\315\275\330\t\343\274\036y\034=\203.\356<\221I\267=\323d\014<\302\226\014>m\000\201<\362\366\375\274\000\230w\274\000\017\373<\326\370\224<B\257\307<\001\031\371;(6\t<\003oC>?S\214<\032L\366:\010\005\304=\324\242\032=~\001d\275kH\237\275\272\314\260\275Z\360\215=\2030\201=,@>\275\362\244c\275\267\331\206\273\256\022b\275\245\2307\275\333\234\304=Sx\004=\214\366\213=\214n\221<37\200=\220\245S\274\213\263\010=`\017\231\2754\323\267=\006Ri\275\"}\224=\265\211N=\214\364\253=\270A\372<e\222j\275\321T\340\275m\0166\275\232\343\230\275m\366\005\275\201\370\253\275Bk\367=\342Y]\275\320F\204\274\022:?<\346\277\204\275\345\3564=7\275\252\275RS\307=\307\036\337\274\332\212\200\275\321\033\352<p{\005=s4g\2743\3123\275=\316\313;\356\212\221\275G\271\210\274E>\221\274J\341x\274H\250n\275\030d\"=*\262\343<q\332\235\275e.r=\271\231T\274-\202\002\275\014\036\345\273\3044\335\275Rm\036\274\230\324\311\2757\017\236=\317\215\263<\365=\376<h\256\\\275\362&\237=x\233M\274 *\235<%\206|=\315\203\324\274\210\331\353<\227W\367\2755ID=\354]Y<a\337X<\341w\004<\255.3=\347U\276=\233n\t\275\256\006\004\276\316\301;=\336<\236<eO5;\273P#=\331\363%\274\373\371d=u\335\377<\233\370\306\275\260\264s\274\251]\346;\350\246\237<\036\343\340\274\207\221\260\274LR\335\275\350a@<\223\232\204\275\341Sf\272\224\355(\274\236\017\370\275\027\246?\274\211\034r=\275\002\313\273Q\201Y=\333[\367\273~\212\272\275\241\024#<\272\346G\275J7|:J\020\233\274\002\"R\275\314\3450\275\223\356\223\275\004\n\014\276\244\253E<\025B\000=~\266\032=%\220K=\274=\024=\234g\201=8\245\226\275\311\342p\275xmb<Ke2=\336,\207=\275\016\305<\037\022\213<T\n\231<\347j\224\275K>\314:\222\260\346;\222\0365\274+\256]\274\260*8=%Uf<\343\240\235\275\215\211E=\023\221|=\\w\376<X\262\235=X\215\017\276\037x\020\276[~P=\023\364f=\036\204\001\276\2272\332\275\231`\356=P\257T\274\217k\007>\261\340\\<d\236\303\274\224#\r\274\363\362\313<\371\226\226=\331]3=\3646\342\275*\2704=6\301\277=\205\207)=\247&\'=\216\312\335\273D\330\t\275\260\230\243\274\237B\376\275\373\330\223<6.4\275(z\324\274)\210\021>\313zE<`.v\2758\003\312<N\020\325=\rf\262\274\034c\024\271K\321K\275\302\211J=\373Ik\275`~\030>\326\305\304\274\355$\000\275\244\2432\274\346\2521\274\263\346\364\274\260c\"\275\330\3458\275\363\214\332\275\254\370h:\2528\306\275\3365^\275\027\315\246=0 \000>\301\035J;\314\373.\275\236G\020\273]6\351\275\351\177\013\276\373p\356\272_!M\275\314\215y=\212&o\275\211\252\227\274<\330\005>\341\373\366<\311\222`<`\305\355\273\n\241\022\274\242\271k=\303\037\254\275s(o\275E\332\200\275\350#\236<\232\216o\275\031\033\'=\265~1<[\006\311=2\355\275\275`\310\017\276\303\253\363<\020\232\214=\211p\331<\263\357\260=`\322\370;\t}S=XZ7>\246V\251\273\355\243\246<\005\307\'\275S\316\247\275\014\210\000\276\0239\211=\367Y\276<C@\177<6\025\021\274e\233X<U3\007<\201\202/\273}}\256=pp\270=\217\357\017\275\362\004\357= E\013=\016$\212\274\252\255j=\341\023\036=*\2419=\354\204j\275rH\022\275\336\241\362<V\257O=\375\352\311\275\262\001\357\275\265\311\331;*\321\215=\000\242\215\275\216\371H;\321\220C<\3646\276<-B\006=0~\240=,A\2018\344\317\242=?8\335\275\216V\203\2751\265\210=\326\354r\275\367\243\257\273\007)0=\033\202\242=\242\271\217=c\0254\275\277f\202=H\206\233<\275\241-\273\345\014><\261\322\217=O\303\331\273\340eE\274\343so=\214\272\036\275\246\235\223\275\025\2779\275k\247\006<k3\033>*\220\010\274mU\302=5?\n\276g\306\217\275\252\256\270\274\227\330\345=7l\217=A\307\307<+\030\371\275\003\353t\275\341\350(\275\002\221p\275m2\334\274\357\3040=\344\376\313;\311U!<NnG=\233\276\301\275\027\205\006\275\021P\002\276\372\225\342<QQ:\273\377E\332\275\261\246\246<\023I\233\272%\364n\2751t\376\274\355\236\366\274\013-;=n\317\037>I\372\032=\023]\232\275\013\213\214=\342\267\265=\212:\246=\226\270.\274\333H\203<\372\260\364=\301W\254=i\3320\274jj\337\273\365>(=\255\240\270\275KG\213;2\241\273<L\245\231<\331\302c\275\273\244\251=\271\2765=\337up=6\025\026\276\355\350\305<J\304\226\275\337N\342\275\242\233\237=\315N\212\275#\017\314=$2\t=\372h\236=\017N\312\274sS8=\r\325\206=\370\253P;\013\237b\275\tD<\275~3K=\274.g\274\r\336\177\275\272;\203\273c\324\243=g\373+\274\310=\212\275\307\202\004\275\331\337\214\274\032\337o=c\310\006\275#\377\316\275 \371F<8\r\306<F\250\362<\217\334\034=\376$\312==2\210=\352\261\233<\356;\017<\271\373-\275\206C5<i\356\315=\013g\263=|\234\201<y\030\376=\211\305\033\275\270\301\322<[65=*\033@\275,\363\356<\203\274\224=j\342\204\275\035\372\346\275BJ\315=\r\344\234=\350\001\010<\376^\303\275\352\013\017<\210s\036\274\260\002\273\271\206}\"\274\032\376\235\274m\324\372\274`\220\001\275\301\302\272\274\250Ep\272\nHe\275\367\267\016>\241$6\275\236e.\273*e\303\275\"&\030;\267\263t<\334H\216=1\022\242\274\340\274\020>L\252\373<\231A\353\273\206\341\240\275\362\357\035\2758?\237<]\353\246\275\272p\244<h\250\027\275]j\362\273\230m\263=\325n!<G\353\315=\231(@\274\377d\203=\242^P9F\311\217=\\\327&\275/F\331\274j\220\216\275\365\377G\274\014(\324=\356x\233<8\230\275;.gG=\311n\212=\250>\212\275!\004&\274\247\016o\275\025\026A\275g\264\'\275\234\330\267<J@\350\275K\357h\275\336\216*\271Cv\211=\203\230\233\2750\355]\275\335\276\n\276Mm\326<\244\310\210\275\300\3125\275\315wE\275\266+\315\274\360\252\230=\335\024F\275\221\\\304=\351\305\014\275|\342\'<\251)\230\274I\000\321\275`\213{=\241L\2129pd\013\275\366m\261=\021 \365<\257\017@\275\316r\007\275\3149\333\274e\004\220=\314@\006\274\314\334\205\275\tF3<\207\3609=\317}\037=\037\337S\274\025\024\364\275\002\261:<\034\330q\275w\277\007\275E\257\212\275\250\264\276\274\004\310\353;\3320\254=\224\\e\271\251\266\211<\356\365\353\274\361\022S\275\311\000\223\274\276\352\303<s\'\341\275\257W0;FU\326\273-+a\2756|V\275\022%h=J\354\200\275\256\337\027=>1\204\274(\2111>\310\347\013=\370\347\270:\215#\323=7\017c<,cZ\274b*p\274\016Y\300\274\354\' \275\365\237^\275\344\020\264\274C\327\334\274\021\245]\275\324\005\226=\306\357\267=\336\024\013>\036\376\370<\370\235\356=\037\222a=\343[\364\275 \035/\275\317\302\234\275\271\253\033=\016\221.=\217e#<\361\222\026>\255\256\212\273\'\001\277=\337\257\001=\327x.\274\204>F=\210\354\301\274\243\354J\2757\227o\275\0019i=\346\202\211\274Vo\030=tw\203\275\032\n\260\274\357D7=\034x\032>\217\211\241\275\2365\320=\016\240s=k<\355<x\213$>\2236\313\274w\254\200\2752\314k\275\310\226\212\275\315\253m\275\203\007\277=N?\263<u\376\220<\030\224\275=dvr=\314+\250=\331$\366\275\350\345R\274\017\316\263\275\337A\207\275\201\362\220;U~\336\275\306\310\203\275\317\332\013>\031\347\250\275EpU=\261\224\225\275\013\323y\274\031a,=w\266\251=\322\307\347<\261\374\r=\2326\315=\317\271\330=\357w\255=\0015*\275Ik\342\274uB\307\275\032\000X=\242\236\261=\332\235\002\276\315m(<\274\265\354\275\375\254\265\275b\234\034=\376\351\017\275\013L{\275\300\020\362<\214\257\261;bc+\275I6\330<\320\264\373\271\363<X\274\347\356Y=\202K\264=\266\237u=\263r\367;\026\025f\274\374\337\364\273\223\322 \274\305bA;\255\307\006\275\236|G\275\311\250(=8\315\236\275\264\010\205\2740\tU\275\3524!<k\330\274=\001\325\233\275\357\360\262\275\263\211\366<\215\216\240=`\241\304\270U8\244\27580\230\274:\253\206\275;\225c\274\211\316\316=\022\212i;\334\304\344\274\240r\016\276[\277\010\276`uC\275\371\002\226=\372\002w=FS\271\274n\263\"=4Eb:\024\301\375\2759\016D\2756B\326<O\341\346\274\334\252\236\274(\364\375\274|b\315\275%j\267\273=\014S\275\233\250\375=~\267\025\275\226h\301=`\035\231\275\353\207\347\275\r`j\275[s\014\275\017\302\201\275\2361\210=S\217?\275o\301\013\275\222\021M<w\324\272\275>~N\275p\r\001=\221\033\241\275l3\003\275\347\333\316\275,\332e\275\371[\300=ibP<\275\232\274\273jx\220<\3218\007\275:6l\275<\'\335\274\317\334\310;\352\341\010<3P\230=\236s\336<z\342X=8\335\326=O\245-\275\346+\332<\216\317\330\274\276q\035=\343B\020\275T5r\275o\221\314<\001\244G=\227\220\251\274Y^\334\275\330R\003\275\ni\252=N\3101\276\202\361\311\274\367\375\213\274\204\262\252<\266\031\273<\323~\211\275\345\353\357\273\341F\245;\356\000i\275\340A\256\275\353\247\024\274\365\216\330<\3125!\274\322\323\002<\333\340\244<sd_=/%W=\355tT=\264\200\331<\034]\334=\005&\022=\247\212\000;\004\023\323\275\336B\340\273N\007&\275V\334\214\274\010mV=\350\240\272\274\303d\335\275\270w\024=v\210\t\276\272`\024\275\350\020\257=\256/\317\275x\332\005\273\3556\225=\\/\206\274=>\375\275\\7)<l\032\221=\237zM\2742>\036=\267o\337\272\262:)=\264\346\270<\300\334\307\274\222+;=Q\213\235\275,\351\224\272\266\245O=\2302}\275\312\027\213\274\246\'\006=\242\001\350\273\240_t\275\304\313\221\274\266(+=h\037l==B\\\274\\\224G=\341\002O\274M\216V\275\272\303\310=\321M\033>SK\257\275fJ?>\245S}\275pr\211\274\021io=\212\256\250=\224\327\231\275\365G\306\274\210\3002=\305\333\216=\2745.\275\255\341\236=\027\340\271\274g\001\201\275u\300\t\271;\327\225<\246r\313\274\r\256.;nVi<v\322\034\275\251\217\027=\243\225\010=7\327\244<\252\205\220<:\212\202\275$\315c\275eD\232=\257\034\022<\326\372a\274\217*\020< \345\341=\332\360\366=\251{\316\275\t\350\250:\2310\202\271&d\306=mW\252\272\373\006\204\274wF\303<\260\320\022\275\346a\217=\376-\200\274\346\230\231<g3\240\275\302Sm=\007\333G\275\315\216\004=\337\251\025\275\316\215\330<\324q\357\275\370t\026>C\"\237=\tK\334=\310\033m=\324~\r=\356\230\252<\325\245\333:\0045R=\027\347\'=\035%\037\275\227\266\262\275\302\276\366<\242\212$<\245/\276\274\253\245\345<\007\240@\273\267a\275\2759t.>\226\270\301\275y\327\203=$/U=\371)N<\342+\003<\362q\277\275\306s\240=\200n\251=\2152J\276^%\241\275\333\232\221;H\004\010\275\372oW<\353@\306<\"h\2429\313|\232\274\367\373\207=\254\310\203=\277\316\027\275\203\202\271\275\242Y\264\275\255\032\323\275n\306`<\313\363a=\202\021\332<\327`\334\275\232ZX=\274\247\301\275\271\230\213= \361\231\274\003\240\t\274\036\326\271=X\0161\275\236~\250;\354.\265<\3742n<\253\342\361<\206\377\320\274\003\231\225=\2759w\275\333\024>\275\250.\006<(K\003\275\353\267Q=\3256\335\275\206\210\035>O\215\020\2765\2309\275\262\343\005>\225\003\246\275*\2441<\031B\245\274;\300\355<\2706\215\275\333\202\304<B\026\204\275\214M\024=?\001~\275\003\362\220\275\355\016\277=\334\2614\274\244\306\r\275\304l\374\275\270\"\245\275\021\003-\273)jt=\220\247\327\274\243\276M\273O\245K=M\310t=\252\232\274\275\243/\177=\341\301\036\275\350\030\223=S$o=\257\001z\274\220\326u\275|\371\203\275\323\310+<\374,l=\005\306\344; \232\320\275\373V\234;\032\274\273=:6\016<\352\023\302\274\t\230\305\275\"\017\244\274\250#\244;De\241<^\237\001=\207\204\235\275\337\013\022\275\330oA\2751U\325\274Cj\"=\336\241\346\275|\357\262\273:\310\312\275\207\253\307;\345N\337\275b\250\321<\232q3\275\023I\017\275\353;\006=\2316\234<\363\242A\2747kO\274an\274<0\352\351\275\307\224\274=\031;\231\272\314\230\214\275\336%\027=(\016\003> I\330=b|\320<l\265L\275C\333\203\275\377\033\356\274\333w\314\275=E\275=\373j%\275:\000\027\275mH$=z\333\340<\035\031\016<\253g\357=\335\224\207\274\024z\014=\232\\@=aO\233\274\252\336n\275\307\2008=\346l*<\376\304\246\275\"\304\346\273\367^Y<\354\250\243\275O@\254:\364v\373\274\"e\327\275\304@,\275\241!A=C*\361<\030`\014\276@\227\204=\250\025\275=\314\265\\=^/\213\2745\324r\275\'\277\275=\014S\270\275\361Kc\273d\355\224\275p\201\340=Z\372\004<\330\260\366<\327\215\333<p\316/\275\250\316\244=\254k =\347\362\355<\002\234\014=\207\371\013>\333\363\320<\247\215\277\275\035\200m\272-D\373\274v\273C\275op\002\275+\235\001\2755\277L\275S+\232=\267\"\213<\030m\036\272n\210y\275\316E\021\276\365}\350=\\\260\202\274f\371\252=\306\237\277<\010{\033\275\265\325p\275D\r\025\2757S\321;\222\261G\275D\253P=Y\214\265=\344\365v=\332Kw\273\203\3245\275i\355`=\226\253H<\236\203@<\237R5=\274\216\'\274\245\256\324\274\312F\203\275|\364\374\272\274e\357\274\350w\333\274\300p-=\224=.<\245\213A<\225\356\022=y\262\312\275v\371|\271\373@\200=4\270\031=\010\336\334\274\001\355\220=y6A\275\374$\213\275\253\225\253\275\204\"z=\354\232?\274w\244N\275b\357\334\275\272>\002\275\241\366Q\274U1\t\274\224\271\217<\307Z\310\275\236\r\205\273\275\331x;p\353s=j1\316=\n\303b\275\312\3630\276\037ao=A\313l\275\273\014\270<$u\204\275`\005\333\274\206\0261<\306\346\324\275R5p=p\362\034\275}\332?\275\0172q=\030\221D<\3302\211<\236\343\031\275\361j\371\274\0350\236=\024\223&=\240px=\313\322z\275\364\3101\275\266}\312\273\227\003\345<j\"?\275\317Y\332:\341^\005:=&x\275\032\313\r\275\361\300\027>\036e\307=\342/\021=\244\314}\275\205\307\344<\247\234\254<9l\341=\242\004\204\275%x\275=@\354\201\274\311\371\020:\323v\262=,E9=\031\251\002\275\262\3042<}\nZ\275\025\037\215=\'\305\217=i/7\274\306\016\315<\265\217\214<\217^\315\275@\245A<\004X\244;\301\322\344=7HA\275\032\034`=Y^*\274\313\243}<l\271\217:\'B\251;\3670\340=\241\226\250\270\263\232v\274\203\303\020>\254\016\224\274*S8\272+fq=\367\231\'\275\340\013\217=\375.\034\275\256\n\365=\251\tm=\360\245\344<\206\254=9V:\340<=C,<\324bg=\253\373\322\274\300\334\262=\322\016\323\274\260\332\202=\355\273\320=l\320\017=82\306\275\303\006\333<2E\276\275\301\215%>s%_\275\255\333\227=\267\224\002=C\351\2409V\302\007<@\353P\272\267a\212\275\354>\261<\217\325\200\275g\357\215\275\007\\\313\275~T\020\276\0065\260\275\025\352\r\275S3S<\206\251\233\275\237[\272=\364\211\236\275\317\330\233<\302\004\027\275D\346\200=P\024\313\274X\261\001=kS\215\275a@\303\2745G\213\275+\200\334<\304@\243=\243\244\374=?\2569=\"\013/<\334\223;=\030\270g=\315\274R\275Ws\322<\232\204\037=\033\375\303\275>\020\217\274so\217<\r\301c=\340\234\030>\0006l\275\276\307\017\273l\021\301\275\302v\303\275Nf\205=\"*&\275f\325\037\275\215\274\372\275\0219\263\274\210T\376<\345\306\363\275\215G\210<\257\226\322\2741\t\376\273=\247y\274h>#=\035\255\300=$\347L;\\P\277=\222\247H\275CM4=M\205\026>m\264i\275%\235\r>\260\244;=\226\224p\272Y\333\351\275\036\234\313\273\272s\007\276\232\014\231=\'\245\003>\325\254H\275{\004\223\274_\001s\275x\314~;\264\231\314\275Ud\013=\236z\261<x\356\232\275x\334\373=\037\325\343\272\324%\345\270\032\273\017=\3659\323=B\031V=@\016\373<\336\342\r\275\032\001\206\275\240\363\235\2751{\302<@+\023\275\334\200\340;\337\244\303<\310\247\324\275\362p%\273\361\3501\275d\337k\274\352\256\033<hR\002\2750\251R=\257\213W\275+\031\365<\376J\317=\350\034\250<F\341\244\275T\365\315=]@+=\267\204\253<m\325\005\276\340\004~<iD\346\274eW\211=\001\2353\2750\312\222<\312\013\225\273\236\010W\274[p*\275\357\221O=![\002;\353\211b=\244Y*<\036\331Q\272\354\341 =\316S\016\275}\203\267\274\177u\274\274\025\217Y\275\0229\211\274\374\256M\275X\037\252<\322\252\301\274\335\'\222=X\035\310\275\t\004\264\274Ix9\275\255\211\253=^T\243\274\244\2265\276\017\017\353=\271\374\t=o\216\215=Wl\212=a\324\256=\263\356\007\274\020R\017\275\355+\247=\250A\374;cQ\237\275\253V\246=\237\374\010=\021\300\337\2757\224\036=&)\351\274#\226\027\275%\273O;T\272\266\275\317\263\214\273\365\200O\274\346^\345:`7\257=\237I\204<~\227\013\275Y\201\246\275W;H=X\321\246<9wH;\304\2320\274\306\"\032=\267S\213<\3442\250\275k\320\323<\366\371A\275\306\304\370<\241\233\345\275n\315\364\275\034\376\306=\357\312\236\275<L~=\372\261\345<\253\247\264\274%\333R\2753\215D\275,\375y=\374\254\354;\001\247\t=\237\332\r\275\226A\347<\373\276P\274*\327\247=\340?\204\2751w\243\275\355\324\017\275M\217\236\274\340\334R:\275\253\177;T\206\006\275T\313\021\275{\251\367=J\013\247=l7\207\275\3542e\275\301`\253\275$Z\035\276\351\314@\275\321\265\270\275<R\260=\206\337y<:.\260=A\177\346\275J\232\002\274\352\037#\275\227?\020=\'B\267=\244\272\007\275\222w\277\275\205\321#\275\037\000\264\275\264\3507=KX\251<\0073`<\332\334\237\274\377\037\346\274e}\367\274-\370\217<\207\247d=m\331\001=%a\230\273\257A\002=\325\t$\276\261\377r\274}P\211=\2040s\274\317\242K=>\352R=H\247\256;,\371{<\240\3032=N\243\237\275<\251\266;\237\311\302;\3552\317<\377\261\013<\024d\335\274\320\216\t>\231\020\346=\022aK\275B\313\005\275\251=\311=\'`\006\275\373]5=\r\310\315\275\2224\227=q\362\226=\354,\314\272\240\331%=r\205\250\273u\'\036\274\351\315\270\275\326w/\275\206\275\016>[\032\366<\317]\374<\201U\215\275\335D\216=\310\277\253\274\230G\331\274\024\211\365<\235\360/\274\320\331\354;\343ZW;Nm\230\275\025\370}=\312\261\224\2759\226\022<\014-\351\274\013\234@=\375]\326;+\204c\275\233\026\353\273\350\231\206\275N\347,=j\367\317\274c\2453\274\230%\001\274\346\315\271=#\354\321=\301\001\306\275SE\223\275-\376\333\274h(\207\275\n\376\261\274?Bk;\304\nm=xm\036\275\234\027)\275\372\243\323\274\010d3=\257>\227=\241\274\367;w\277\227\275@\266\037=\016S\204\275\212\204A=]\355Z=\207bZ\274\260\315\250:\202#\245\274z\203\366<\277j\265=\314\266\r\275\341\036\004>\033gm=A\307\234\274\005\275\245=\205\360b\275\207?\001=t;\024<\300\"\201\275p\334\266<]K\267<\227\301\353<\343\360\201=\014\370\236\274.\031\333:\342I@=p\206w=Hv;\274\375V\317\274]\022\251\275\245\177\263\275\001\333\327\274Te\376\274l\270\263\275\201Z\211\275 \252\300\274\035\013<\275+\331\312\275\201\022;\274F\327Z>\2649\201\275\342\030\351\274\032\227=<\310\234=;jg\030\275\244\'\342\274\256\305\357=\034\240n=?\002c\275\377\325g=\336\006n<\211,\245\274\311\372\253<) \230;\367\240\334<\351\347\320\275\220\245\363\275\217\301\276<:X\306<\005j\010\273Nh7=7\261w\275^\205\234=\233\227\223<3)\222\275\3023\n\276\274\271\201<7E?\275rS3=\234\345Z\275\327\232B\275\002\330\n\276\200M\237=\3630\224=\270\177\025<\021\314\030=\201\313T\275\364\333\r\275\025v\357\274\367\205\354=3\367\373\274\256\222\220<>\343.\275\323>\275\275\357\267\264\271\020\340\260<Q\tN=\342\367`\275\3404]\275\252\264\003<\276\227c=g\027\021=6\226\200=\025\226\006\276\313\017\375=\221\032\237<7\201\332=X2e\275\300\274n=t \'=\324\307\361\275D\026\364:\346M\"\276\224\231\253=T\004\035>9\276E:\031\374U<\262:\246\275{\301\211\275\355d\215<\312z\322;\215\350\337<:\300\350\275\314Q/\275\331\325(\274N*\225=\327\026\222<\030k\007\275\224N\210\275\253\022\014\275\2334\261<{9~=]N\337\274m\r\304=\266w4=\\[\353\274\261\235\034;\004\324|\275\203\2347\275\335\354\342\273\034\363\253\275\205 \001>\376iE\275\250n\036\275\311\242\375<p0\265=\177\362\231\275.\357\222\271y\024\346<\261\251\331\275%\332\203=\003*\305\275\023\376!=U\322\220=\231\255-\275\3132\226\275\3328\227<\362\277\010\275\200\352n<Pl,\275\201\2727\275\031\231\022<<\236\276\275\335>\254\275\326\347\255=\220\244\t>\201q\265\274\252\372\236\2722\3349\274\326Wk\275p=\345\274.\006\334\274\023\'D\275\001\021}=\370\250\205=\300\251K\275\353\270\337=\033\n\"=$\211\001=\371J\233=6\375\216\275\354{\202=\313Hq\275E\307#<\274\350\235\275\326\\\251\274l\215#=C\257\325=#\004-\275<\351\241\274\'\302.=\027T\201=\372\007\274\275\376\n(=\\\220B<]\205e\275\323U2=\235\035%=\020\362\233<\330\017\333\275c\264\322\274\272h \275\330]\233=\305<3\275\263\256n=\"\302\032=a\016\017=w\022\363\274\225#\253=\312\212\272\275W\262\376;\220=\324\274\2238\n=v:\033\275\314\265\314=\227\2362=\031\331\375\274\224.\346\274\321\005\227=\220\264\006\275Je\206=9e\222\275\0073\026=\036?\271=3\355\\\275H\n\352=\364\200\267\274\377\273J=\226\210k=I\305\224=\271I\235\274 7!\275\212\007\266\274\334\324\303<E\204^\274\332\003\237=%;\262\274\235\332\004>\273\261 =\230\240\303\275De2=\304\346\005\276l\304\331\275\254|\341\274`\031c=\332j\226<\250\255\235=\304\024\305\275y\3239\275i\207\277\274\021/\235=\356\267\027=\226D\325\275\031\rJ<z\022%\272\027\350Q<\315\372\177\275r\200^\274o\254\'\275b\331\006=\306\217\325=\014\003\252\275\324\207\252=%\017\355\275\371\035\325\275\336\317\n=\000\352v=7\315\371\275\3431\354<\274W\243\275\227\267p\274\345\017\261\275!G&\275~fn\274\027\2402\274\031d\260\275\232\351\376=p\246\332\274P\023\233=V\311\226\274\266\264\227<\321\035\225\274\353\360~\275\361\277\202<=\330q\275Z\216\234=U\"\n=x\366\253\275\336\243\256=\2334(\274d\341\364=\037\377\243<\3267\212\274\312\025\330;\t\204\000=\246\207\002=\276\260\222:\255\222\024\275\022\317I\275\001h\212\274\314V\000\275-\276;>5\'\355\275\366Oh=z\371s\275I7\306<\271\016\235\274\221h\005\274q\004\004>pU\244\273PJ\204\275\037m\245\275\362\325>\275\003t\004\275\270\263\300\274\321\010\203\275\026\016\223\274\202\211^\275!\340\327\274\310\306\317\273\335\304s\275(yn=\314\301\023=<2\247=\n\331\201<\223\030\217=i\334W\275\370\374\334\274|q$=\313\333\030=\232\333\344\275\3578\241\275\307\3227\275\216\346\237\274=9\302\274|\301t\275i\031\235\274\353\237\001\275\001\257\021=RG\376<\215\232\201\275\303\353\265\274\246\367\241\274\216\375\340<\3508\305\275\030J\316\275t[\302\275\244\252\271\273\275K`\275\"S\233<\225\366\245\275\302\263\023\276o\033\235\275\004\035\260<\237\300\201=PS\213=\232Ba\275\354[\301\275I\346^\275\256g\007\275\033\347\243\275Yxq\274\237\204|\274\365\344\235=\346\367@=C\017!\274zy\036=l\363\316\272\327\361R=\374\256 =\232\300\177\275\212\373\343=o[)=\233\303\306\275G\025\213\275\336\367\006=\355\351\003<8\207i=\035\373\235\275Gp\034\275\354\376\375\274w\214S\275\007\007E\274\367\213\007>\226\230\230=m\032==gD\267\275\307oV=\013\310\230\2753\374U=u|\n\276\2223\304\275\004\2632:\033\026H\275Y\266!\272+\322A\275\035\372\306<\n\253\353=+6\030\276\266n\306=3j#\275\341>\356;\351s\213<V3\303\275\360\236\257\274\257\221\217\273u\215)\275(Pj=\331!\336\274\336\235\377<3\000\211=W\310\210=\256\017\\=\227r\201\275P9\207<*\013\361:/\315\276\274\376\026q=\266B{\275\205\263P=-\r\302<\244C\r=`\027\240\274\346\021$<\275Uq\275_\360;\275J\030q\275\376)\265\275f\0321=\346\211[=\345\347\261\275\227a><\311\263u\274\"\322\207\273\354s\020=\177\350\213\2741\000,\2752\376\321\274s<\361\274\267\351\212\275\364\323\007\274J\344\014\275\333\337\330\275\313\205\322\2744d\001=q\366\233=\243+l\275G\000=\275\273\357\357\274r\033\003=!\377\257\274@\272\025=\305\031G:H\340x\275\007\377\t\275\253\004{=\027\364\304;\342<\031=\361\270@=\005q\373\274 \314\305\275&$\007\276\213\242~=/\374\020<@\230\220=\2259\260=\024<]=_W\353<\376\037_<<K\321=\035AC=\204u*\275H\322\334<\337%\213=\346\225\342\275\3441r\275W\313\212\275q\272~<4Y\343=\024\276\025<o\365\317<\340\216\"\275\222\321\250=\252\207\'=\333\020\305<\271\257m=\002\315\354\275!\260\014\275\0048\257:\334\355\201\275J\037\033\275\354^\205<h\331\352\275\306h\340\274:D\216=/\341I=\232;L\275j\266\263\275\366;\026\273J\271\214\274\037\244O\275$n\010=s\264\022=h\324\361<G\216\027<\277C\320\274\372o\241;\345b\206=\265A\231=Y\212\315\275\215\331\334\274\222\343\247= &\260\274\005\261\274\275\311\035\010;\325b\302\275\0220\251\274\351-)<~\244\272<\345s%=\345y\023\276Xi$=i|\005=*\202)\275=\000,\273\312\325\001\2751n\301\275\204:\017\276\330:\227=T\357w\275\244I_\275\350\316>=k\373b\275\322r\031=\240_\331<7\t\031\276\214 \246=\276\275-=\263\"\364\275\251\002\372\274\221\n\221<\016]n\275\346uG\275\263\025\262\274\265q\367;q\345\300=w\315\236\275\345\255\315=\3011^=\250\306\325=6<2\275\332\323\350=\211\272U<X\323a=\226\260\005=Qi\'\276\217\346R=\010FB\275\267O\237\273\234\330\017>#\036\252\275\235^U<\033\265 =\375[\r\275v$7\275\027\323s\275=s@\275#\002\224\275/\360\203\275\275\373\307<\230\311\004=~=\342\275\354q\237=\201\026\366=\353\253\000\273=\033t\275\337#u:\262\255r\275\276@\340<\321\255\203;\304\373\203\271\267\251\036\276n\231\026=RkG\275\202\217\347;\177\257\262<c\370,<d3\255\275\270r\220=\220\211\263<\360\321(<?Lq\2750\256P=\375b\216=7\373#=To\326<G\003\325\275\3550\344;\204\235\000>\tN\024\275\334G\216\274{\2116\274I\356\322=\314\305\030>B^G\271\235\025\253\275\262!h\275A\347\223\275\305\320\201<\324\177m\275|M\030\274\236r>\275\227\262\353<\374\356\n\275d\261n<\313f\376\274rCq\274\232\2541\276\370\364\210\2755]\330\275\372\366\306\274\230\3441\275\316\240\024=lF\210\272\214\205:\275\3057e<\351#\235\275t|\244<\'Q\347\274\016\341\331=X\212,>\366\260\036\273\353\255\367<\206G\006\274\\,r=\233\333\257\274}.\325<B\007\026\275\344\007\340<\312s\024=}\263\202;\313\353\217\274E\337\320\275\034|\353\275\353U\357\274\243D\326\274\252\341\240\275C\340\242\274_\345\201\275\240\321\327\271l\232\207\275\244|\310<\3329\217\274\226\361.\274k$\207<\207\244\225=\022\353w\275G\300\221\274~\215\323=\362G\334\275@i\266=\322\321l=>m6=\326\202\347\275\276\351\004\2751\017\353=(\226\257\275`\242\354\275%\3375\275\311\353\014\275\024T?=H\003\001\275c\217\311\275x\270\037=\231\\-<\264\375\267\2742\247\374<)\272\351=\365\025\303=\377P;\275$\214\272<\312/\212\275\220\035\202=\277#\342\272\242\330\353\274Lh\230<w\230\355\275\357I\035\275-\035V\2757\371|\275\211v\231\274|\234\214\274\325|\217\274dxZ=Z\314\200=\235I6={\324\351;\2241\204\274\305G\205=\022\037y\274\0322\333<\007\342\036\275\371\033\023\276\270\025\032\273\023\205&\275\206\271\276=\342\010\023=\334\351O\275\021\2753\274\027%\353<\202\332\211\275\002P^=\260\251\256\2747A]\273\204v\301\275\\4\276= \337\n<O\327{\275\n[g=x\\^=\\\023\r\276+\246h\275\204\222;\275)\317\226\275\003#\021>]\253f=kB\010\274\336\245\\\274\262\202\205=\363d/<wY\r=\2015\346\275\276\342\266\274\313,:\275\251\272K=LU/=\217l\334\274a\335\030<QY\275<\3706p\275un\332\275\324\246\375\275\030M\234<Us\236<\034\244\210\273\274Z\265=\254\276#>Z\350\335\274\245{2\275\035\240Y\274>\263\355;\201s\225\275\244J\211<`\262\013\276\330Y\022=\314\241\006\274l5\037<\313-9>\243s\016=\315\367\247\274z\205E\274XW;=\22531\275\205_\312\274\371\217\211\274=\215\221\273\3708v\275\003\312\375;\005Z\311=\036`\323\275\377\363\026\275\214\241\202\273A\324\325\275H\273\222\275\343\271v;\2518\223=\267\352\311<\225\266\245=c\003\225\275\230\2563\275\036\351\230\275\350%(\275{\360\334\275\202\267t=\377I\025\273\361\303\317=\236\277\301;f\355\243\271\202\317s\275U\243\r=\014 \204=\365\334\376<A{\245=\\\202\021\273{u\245<\367~\334=.v(=m{\310<\260\365\205=\371S:\275\004\317\037\275~.O=\027 \352\2754\215V;\230\376\260\275i\3604=2\211\264;~\016\007=%\332\310=zh\t=)\007\352\274\036\032\200\275\303\017P<\360\326\320\275\327]\330=\332\302\233=\311\t2\273>\227\237=\311\373\276\275\rq\036>\334\253\313<oI\323=\313\277\356;\232\377\200\274\227T\301<\354\315\376\274<\211\205\275g\244\032\275\'\331\241\275\r4\t\275\17723\275\034\251\221\275\365\273\343<>]\274<\203\307\226\275Of@\275\211\353\274<\255Ko\275\265\373\036=\372w\300\275\305\302u\275:W\022\275\263#-=Z\217\331\275\0066\226<S>\312<\201\262\207\275\360\374Q<\022\265J\274\342\223\327\275\241+\327<N\321\035=\027\373\211\274\202\036(=m\361\275\274]\330v=\005\351)\275L\",\275\313\267\233\275N\013$;\337\337\204=\251\337\035:\205\354\254\274\032N\274\275\343\375`\275\373\"\013=\177\256\355<l\307\310=!\306\227<\250\206\327;>/\003\274\007U&>\372\231D\275T\303\227=\342C$=M\311\203\275\243\016\307=\332\371V=\003\214\333<\363J\250<fx\242<\251`\335\275\311\013I<\325l\340\273,\205\006\276\243x]\274\022_\317\274:\2147:\230\313\"\275\342j#\275f\317\006=+\3717=\377qm=\032|Y<g\302_\275t\2375=W[&\274\310L\245\273=\213f=`h\244\275\312\373\231=`\316\005=G\331\352<\017o\240<\233\271\030\275\375\026\342\275y\267\313<w\017\346=h+\200=\265\271\003:\256\205#\276\010\037\345\275\336\261\026\276\360\265\033\275Z\214\265\273\237\214\275=&\276\035<(\2730=\305\005\321\274\272\226U\275\233\201\277<\277\nm\275[5\303=q8(\274\231\204Q\275!#\036\276\223\302\301=\321\253\215\275>\321\262=\007e\207=b\371\362<\315\353\307<\3563\036=5\311\r=\371\333\247=\303\341\361\274\030\007\177<\240\371E=a\234K<N\267\017>\252\312\207\275\333\n\354\274\253\315\256=Y\260\346<(\253\275<\305h\r<\303{x\275\233f\022>\201I\177\275\362\376L=\\\006\034=\255a\212<y\322G\275\263}$\275rE\322\275\253\233%\274\275\207\260<\241C\267<\366\037\224<\313z\007=\314\314\227\275%{[=\216e\004\276\215\036\256\274 \377\000\276\025\310\027\274\224E\324<h\353\370\273\001\252\031\276\361`\362=Y&\001>\205B\217\275?\277\2339\253P\243\274ZJ\200<N\007\241\275\212\222\206\275\247\266\250\273<\301\232<=\324\361=\031\020%\276\226\305\215\275\001mp=\207v\200\273^@d=\363\204\001\2759\353\r\275\271\026\007\275\223\003\214\274\246C\037>\276R\262<a\214\211=g\276\010>\220[3=\233\032\227=v\310\022\275d\233\n<\034\014$\275\305\275\211\275\254\273}=\334\334)>\212\372\221=\357?4=\014!V\275$I\031=\354\252\262<\343!\262\275\374\307\235\275\343?E=1\257H<\211\357\204=\352\2118=e\277\221<\023\326\251\275I\211o\275=\244\254\274%R\014=&f`<@\214w;\005F\315\271\333\217J\275\304\037\220<\271\277C=\217\0176;\330G\276\275\337D\321=\337i\255\274\370q\\\275\241\203\"\273l\236U\273\2005\324\273\350\221\200\275\002i\342;\'\r\267=`Aq\275\246\323\002>\317\330\000=1f\016=\2528U=\206p\020;f_\004=\2238\307<\213\342\322=\3025\\\275\230\341\200=x\022j=!\026\326\274Cg\350\275\240\303\350<A\024\r=yjz\275)O\215=G\017\365\274\336\317]=t\204@;\265Y9\275\331~\000\274\034\304\273=l\270\232\274m\2132\275\215Z\205\273Yx\207\275\354\245\375<\032-\211;\200]B\275\240qE<k\252\236=l\351h\275F\267\025\275\243T\016=G<\317\274@|\232=#\236\265\275\351\020\037\2744|J<\025\217\347=+\324I<\005]\334=\026\357\306;sB\017=\216\017\200\274\221\361\034>\302\336\227;\263\306 =lz\007\274@\026\376\274\217J\025\275/6)\275\233\201D\274\366\021\252\274 \004 <\035\213O=s\337\222=|Z\374\275\345\230\203\274R)\270<\020R\203\275\205%\001\276\364|\034>Fs\255\274$\"G\275\332\n\370\273\000\321\300\275\"\006\374\274Q\372\200=\255\264\300<hcG\275\335x\002<R~\2269\016\221\275=\246\022l\274\017\276n=N$\203<\332\332o=\311\016\205<\325\236\004=\\&\266\274m\035\t>\273\224^=GCE\275\354n\202\275\317\000\312=\325\272\003\274y\315\004\276\217\352\355\274\266\014\261\274\341\327.=SH\244\274\303\000\262\274\227\331\205=R2*\2756\362\014=\001\026\255\275-KN=\\\253=\273\326_t=K61\275\376\312\321<0\014\260<t]\201=\272\016|\275\270\315\205\274\207l\261=\273@\302\275\325mI<\207\231P\274\204\325j<\334\344\n\275\212c\255\275[c1\274\001\244\010>\003\217=\273%\214\221<!\367\006\275y$\302<t\005F\275\267\304\317\275A\206\264\273|%Q=F\217\000\276\341F\323=\256\002\';X\322Y=z$H<\242\003\262\275\002\262\023=\353\267_\275\245\\\254\2753\335c\275,\305C=r\243d\275\2334%\273\016\010\007<\370tU=\340\001)<\332\264:\275a\r\225<\347\263\300\275\213\303W\275D\002D=\370P\341<\235\221 =\214\267\r\275\3713\233\274\245\272u=\002\203\232=\2208t\275A!0\274\205O\316\275?\023G=\277.|\275I\343\277\2759h\224\2757\377\247<\311^\213=V=\337\275\232\2475=q\003\257=\231\305\325\272\037mX=\223\256\361\274\036G\034\275\'\265\n>?\000\332\274\2372\275\275\343\351\001=\340EB\2750\274d\275\253\006\034\273\377\342\026\274s\211\254\275v\337N\275\\,\271\274\2460M\275cW\271\275\265\314\325=\245\005\373\274j\254N<\351O0\275\332.\t<\207\321\224\275\000\316\243\274[\321:\275\332\375\r\275\370 .\275\375@d=\253\374\321<I\255&=\2049\262=\301\244\372\273\032\003L\274?7&<#\261\276<\003:\273\275\232\211\255\275Qp5;S3\032\276;\364\221=\350\234\000>\362/\265;ors\275\265\222O:\264rJ\275\354\360\364<yu\227=\204\336{<\333\037\225;\307\232\377=\021\027\332\275o/<=\032N\337=\331\375\032=\017\277\240\275\005\004{\275\203\316\010=\224\243;\275\361B\347<1 \250\275f\001\346<\261N\013\274\255\254\005>j\212\231=\035\267\220\273e\222\254\275?\304\356=.\373S\274@\3068\275\035&\304\274\244\261\200\274\"M\366\274\'\271\352=\207\313\214\275\325lz=; *\275\201|\224;\003\000\237\275\363\'\377\275hM7\275LD\216\274\360\367\n<\263\346\330;\225\002\005=\264~#=?\316\"=X\277$=8{z\275;,\274=p=U=\ty3\275\017\264\363\275M\016\332;\022\231\345=\336N\227\275\245\330\\=\'ah=K4w=\2105\211\273\210\010\022\275\231\362\320\275*5\356;\324XP\275?\3718\274\253\223\001\275\366\033\340\274\023\334M=t\323\005\276\210,\301\274\317\"G\274\310|Z\274\246&\211<\342\2065<\2215\320\275\330\234\251\275ZC}\275\254\362\302\273\312\345\202\275\377y\214;O}\276\274\337\267\377\274U\337\200;v\226\\\274\366g\263=4\246\003>\374\351\334=\260\273\206=E\247\235\275\301dX\275\251\211\035\274\375X\244=O\334\n<\255gL\274\211\300\037>\3219\236\275\212\376\211\275i\335\250\274\256\321\017\275B\334\026\275\220\330\031=z\212g\275\316\344\036\274o\300\334\275\243\\v\274\305\244>=Vp\276\274\027m\272=RNe=\321\003r\275\263\016\235\275\020\221\306\274O\3476\276\202\357\240=\235\333==\301%d=\250\203\327<\204\335\272\274C\332\265\274\211\002h\274h3I\275y{\307=\337\327\340<\371o\244\274\264\305\3718\317\037\316\274\021=\"=z+,=\313\376\362\275\324\210\023\274^\275\261\275m\246\237=\232-m\274\014g\034= \002\033\275\273L\352\274\006`\276:\354\032E=\265\330x=\201\366\271\275\274:\320;\231\260\202\274lm\246=\364r \275\032\201\246;\225u\224\274\376>\027>r\031\200\275\245\323\000\275\362\336\303\274\261\303\377<\327\014\275<\245\260\270\274\210(\343\275\217am=L\272\270\275\374\362\344\275\027\r\001\274A\347\255\275\231R\277=5\320\262=\247\270\004=OZ\213<\005\353\031\275eF?=\n\272\372\275\224\246\235;\324K\370<FQe\275\273\215\356<9f1=\364\225\314\275sz\036\274\311\305]=q\302R\267\306\n\257\275\\\244;<BS#\274\337\201\035\275k_u\274e\031\265=/0\'=\257\003b\275_3\335=\210\254\027=\310\031\200=\'\263*=NJ\020=N\026\330\274m<\354=\226+\302;\266\235\313=\351\312?<5G\365=\251I\320<h\3124\275b?0\275\277\306F=\325\242\323\274\222\316\267\274d~2\276\323\3374<\272\223$\275\'O\232\274\274{\221=\326A\"\275\201\260\004\275+O\325<\305\334\324<g;\246\275\315\263\237\275\364\211\277\274\022\220\335\274I\006\273=\002\277\253<i\003\337;i|\244\275\344\205\362<\021\'\375\274\337\025\356\275mG\335\273\240\352K=\244\227\350<\2123Q<PW\205\275\034`\320:\320\330\036=\245R\005>vB_\275\025V\344\275\013;\215<\217\356\003\276ty1=t\374\265\275\021\274\302\2747\244L\275M\261\262\275j\030\323\275\277\\\013\274b \207<v\005\344=\266\260\273<\315B=\275^\221\007=\377\221A=F\306Q\275\366\375\232\274B/\036\275>F\335\275;\313c=\214g\177\275\003\350\320=<MR=\243u\013=4M\347\275\331\n\363\275o\365\036\275]\177:=\300\256\222=,_k<\314L\330\2752\003&\275~\313\371;\303\315O\273\003ob;*F\322<\213\354a<8\027\335:\177A\361<\326;\252\275:\265\241<\322\204\320\274\201\336U\274q\247\346<g\361\240\274\tb\223\275\231\316\205=\323\265\242<,g8=\034+\033\275\004nh;\364E\327\274\002Nf=\250\240\267\275k8(\276f^\221=\356 \215\275\336\247!;<*\200=\240\362\004=\224\302w\275!\226*\274\001\270\346=~\336\177\275\'N|\274\207\245\212\274\350\350\366<\322\332\221=\335|\362\275\321#\233=\201\254\345\275Z\226\272<\266\327[=`Y\240=\237\271\200\274be\262\273D\273\017=3\375;=\"7\246=\266\016\337\275\0207\036<XB\347\274C\030\332\274\341\036\262<\347h\031<\340\005\372\274=\322\264\275I\227\035=>\271\214=\030M\023\275N\354\343;\210%\303\275\\\262$=\004\265\024\276\320<\'=\030\\6=\344\202\225\274\321\276C\275\273\361\237\275\225\262`=\311=^<\356>\307<n\243\300\2748C\223\275\327\340\274\275\215\313D\275@\377\020\276/\007\003<\271\260\263\273C\346\235=\350b\036\275\354I\222<\314w\213=\311\t\314;X\204\212;\302N\r\275\033?\206=\250\332\350\274\210M\251\274\326 \025\275\245.\301<cS\024\274\3115U\275\345\271\006\275\014T\332<\243~\321\274\034\322\221<\304M\033\275\\\013\307\274|\307\026\275\\b\200\275\3061\003=\007\224\206\275\223\241N\275\300\352\t\2742\033L<+[\326<#\216\232\275\310\262\244\275,\020\004\2747\016\240\274\201\355\311=\342\364i;\274 A\275\257R\036\275\351\272\242=d\370\254\275\027v\301\273\363\306\207=V\212\n=\202\260\010>\301\037\327\275\247^V=\370\210[<A:l\275\375\220\341=&R<=\022>\306<\244.\245\274\361\\\227=\2266\363\275\225\364\245=\370\026\330\274\246\034n=\022\342U=\034\314\354\274\232\370\223=-e\001\274(\311\273:i?\216\274\004\227y=1\326\214<\023\253\034\275\024X\321=\311\306\364\275\311\241\177=\330\377\212:\000\247S=\200\264A\2748m\023=?w\363<\377(\305=\242\232\276<81\324\275,\261\205=T\366\320\275\363\365=\275\211\264N<5\200\301\275\023\215\254=\324p>\272\227\217\356<*\231g\274\367\314\027<\005\322\226\2759n6\276\312\245\"={\204\374\275B\271\\\274\276P\341\274\237\203I=\300N\007=\327\200\377<\016\023\\=z\324\232\275\021\211\276=\014FU=b\206\201\273\332Pt\275\326B5\276\207\035\203\273\007\207l<)\313X<4\002W=\\u\222\275\205\2461=\334\335\003<\031\244\004\276xd\230\275H\215\361\275\021\311\346<D\330\003=\377\320\350=\264\216.\272R\021\332\275\266\017\241:\275\361i=\270\n\204=\375\270\217=\304\334\217\275\025m\240\275%%x<\333\336\240<j\320\033\2749\234(<\320r\005\275\244xQ=\307\203K\275\007K\254==\301\007=i\321\234=\003\330\313\274\336/\321\275\314\266\221\274\213\205\351\274\373\021\300\275\361\r\244\275\002Eg=1/\352\274\302\002\213=C5\213=\205\220\346=\263\337\232<\nB\246\275\350\"\271<\n{$\276\200\372\223\274\251\204\250\275\2371\211=\036\330\026\274\362`\200<\361\254\001\274\234\231\250=\310\200\253=@\016\'\275\253\n5=\317t\"\275H\237,\272\320\333\005=\331\262\234=\317\327\310=\312o\r=\335yW=\377m\350=\274\343\251\273P\375\346=}\300\023=Ls\262=\314\334\371<(\215G\275\036{\307<\353\307\266\274\326\377\245;=b\347\274\343\240m=\375|\036\275tj\020\276\223RU\273\337\333\013\276\307\215\354\274\240\346\217\275\305\3448\272\370\360%>\325\337)=S\002\363<\222\002\260\275\326\205\240\275\212\233\'==\023\367\274\306\353\327\2749\376\303\275o\216\020=\246\357\320\274\213N\301\274\306\232\256\275`\253&>\363E\001>;\215\211<\263\3030<\217V\024\275\255\335\026\275\253\314\256\274\206\252\267\274\325!\355=\310\252T<\216\272\207\274\021\323\213:$\251\333\274\257\314\373\274\256\324]=a-\020>c\253\357==\343B\275\251\247 =\262!\004=\347\221\337=\\\027R=\355R-\275\224\307\243=\217\303\003;\322\322c<\210\305\251=\242\250\262<\356%X\275\257\200\246\274\032\207\222<\352\265\256\273\323&\001=\244H\253;\205\026)>\343\350\224=x\226\246<\267\'\264= h{=z\361\265\275\244{\201=\301X\207\274zd\311\275\347\216o\275\305\025>\274S\217\212<\201\337\277<8\274\315\275\315\265\212<r\014\016<\335\343D\275x\n8>)\023\312=\227\272G<\302\334\364:\003\312\242;\220%\354;\217h\370\273\372\233\272<\274f\216<\310;\263<\303?\316<Mg\016\274`\022\r\275$\223\325\274UE\263\275\027*\313=\002\005\250=\352D\337\274\024\2718;\276\221\026\274H\303\347=\324YT\274\326\215\302;,\017*\273\347\236\313\274\352\373n=\032bm\274\315\254\250<\366\357.\274\2339\343<\'xl\275\016\021\332\275KK\206\275\3673\253<Tk\253\274\253\247\261;\362\332\331\274f\342|<#\007\211\275C\377:\275+j\325<\003Nj<\271,\364;1\273\253\273a\336\211=N\360\001=\233\366\264\275i\\?>g\332\004;I\324\204\275\203N\322\275>\302)\273\233?\211=\371\340\212\274f\224\013\275\234\265\257<\342WE\275\261{?\273\032\300\213=V\017\243\274\335\'d\274\006\2245\275?}\255<\231\335d\275\010\340\354\274M\201\200=\225:\377<\364M\n\275\371\310a\275b\356\255=\265\013\004\275\305\263\277<\024F\022\275\310\276\315;\244\245]:\"\314\315:\003\306@\275\363\357\274\272\027\n\244\275\022\'\323\274\225d\236\273`\005d;)*5=*!\210=BH\325<\213\217\202\275YF\204=;\322\331\275\010\250\212=\215\354\373=\314!\225=@\373y\275\204\227\261:\034\340N=n\037\347<\025\224\327=\241\264\032\275B\323\216=\247\324\216\275\t\376\037\275\337{\203\275\256\227%=\325\303b=\236o\320\274\034\364P=_V\007\274\304\262$\2751j\025\276t\235l\276\266D\216=\314d#\275\376\032\232\275?\344\255\275p\261/=\234\205\257\272\230\336\274<\206\277\324\273b\317\030\275\224\002$<t\276\005\274\220\275\001\275\n\327\024;\363\022g=\251\024W\275\252\207\235=\240H\215;\365\317W\275\272I\330\275\231sG;@KV=\214;\000\275f\2650\275\300\033\363\275\375\024\372<\370\255a<\225\036\215\274\357\255*:\3163 \275\364\344}=\213,U\275\347\236\025=\244\314\206\275\260\233\r\275\351\346\305=\373\214\037=\323\177\307\274\023|\016\275\221\226\213=N\357\251\275\314U1\275\263\330\262<\253T\370=\266o:=3\220}=\007I\333\275\355\357\014\274\270\254\027=\204\372/=\235\017|=m+\272=k\001)\274\377\314\270=1\331\377<\241\362\273=\240<\234<,\017\302=\361g\247\274Dg\244\273\032&\204=\270\0251\275\372J\232<\221Z\237\275#\004\233\275lq\242\275N[`=\262\2247\276\337^6\275Qc\014\276\000\323\032\274C\2704=\0317\253=o\311\261<\016\007g=h\257\246=sO\270=\'\254\276=\264\355\245\275ga\222\275\352\274U<\352\370\266\274\374HP;[EJ=\021`,=\205%\006>&\377\205=y\036\205\275\377\213\266\271OLA\275Z\031Z<\262\244\364<\254\344Q\274\321\350_< \340,<\021\373\242=\351>\373\274E\376l\2741x\323<J:I\275\273\367V\275h\301\177\274\326\372\024<*\240\006=o87\275\302>\"\274|\256\217\274\345\023\372=b\'?\274\327\035\250\275\327\323Z;\216I\303\275r\232\036\275\201\254/<\224f\277=\270\274E\275\2240\'=\271`\242\275\240\365S\275C\001\367<o\345\240\274\2041\353\274\030w\337\274V\273\310=\377\005\201\274\261\203%=8\322w<D%\336< \032\237=\335\364\332\275l\024\364=\213\205\336\274\245I\224;\267\240\245=U \233\275*\371\260=\326k\361\273\331e\177\275\013T\262\275\327\027\254=]\031\266=#!\237\273\246\360{=e\202\307\275\230\362\340\274\261\264w;\273[\207=7L\217=\354\323\247=\\\220q<\253Q\206=\260\006\224=\343\031\274\274\017\243=\275\177\010x=\336\004\323\274\216\031\000\276\364DO<\277/\332<\316\204\223=\232mD=\312\276\205=\247R\033\276k\272@\275\021\325\316<\336\357Q\275\231Q\240\275Z\352\312\275\036<\372<yz \275\313\211W=\023ph;i\262\304=\344\2107=\322!\376\274\036\333\346\274\304\307_\275\371\327\226\275p\334s=\t\341|\2744\220\321<\217\266\265<\350\215\2539\250\364<<\274aY=\006\364\r\276:y\322=^\237@\275\245\262\244=\205\"\215;B\020\327\274\207\304\031\276\225`\240=\260I\366<\366N\n<V\300\355\275\210{\n\276\323C\257\275|\301O=0=\327<[\313X\275E\361;=\354\337\264=\237\343Q=\004\201\n=Y\n4=\265\253\005\275\374)\004=ijd=\363~\212\273\346\255\275=\237\010\250\275s\327K;-:\265\273\302)U\275v\210\014<\034\220\017<4\245\023=@_4\275\002\252\312<\231\336#\274\320\261\212=]\275\205=YB\265\2759\267\265\275\316A9\274\264\212\317\2755\365\354\274M\350?=\211E:\275*\304\203\274[@\017<\236\372\025\276\"3\324\274R\373\210\274DF5\275\346\345 \275k<\211\275;f.=\'\202x\275\352\227\333\275\225r\216<\231\217\353\275\266d \275\206\231\273<[\215.\274\341\375H;\366\272\345\274\203&\325<\325B\235<y\372\006=t\2413\275\r\301\211=\305\364\251\274b\324\256\2756$#\275\321\016\362\275+}\014;\240\031\213=\206%\021\275\034\333!=\237D\320\275B\242\250=\217\321\035>\210\224\010\275\335\202\367\274e\307\250\274\367F\343\274\206C\231\275q\260{\275Z,\246=\307+\233\274\321\311\266\274^\262C<\340\2027<\255\324\236=\322\353\023>KY\314\275\025\0345==X\341\274\217\272\375=[\004d\273\375O\240\275\335\271\234=\314\253\201=J\273*\275\\\204x\275\227\256\n\276t\023\223<D\234\335\274\200\210\335\275a\340\221\274i5\257=\301\036P<2C\203\274\026\322\203<\226+\247=\023\352u\275{n\033\275R\222\214\274\327\262\313<\365,F\275\342\254\r\275)\203\031=\022v\"\275\020\245\332\273_\220z\275\203 l\275\2016q\274\270\226\374<\271/b=\331\017\267</\021\005\2757\\\272\2753-\326=#\355\325\275w\340\365<\312\220\274<\006Vt=\267pl\275\003L\300\275\217\264\224\273HC\331=F\302\2019\301\017\022=\327\006w=\301\3167\275\250<N\274q_\322\273\"@\317=<\317\037\276Lr\210<\354\314\230\275_\210\243\275\177\212\313\274\\\rz<\272rH<\034\177\016=O\232#>\002\243g=\242\224\226=\354\274#\275\230\236\350\275\244\217\247\275\210\237\210\275\213\016V=u\301W\275\326e\313\273\377\010\253\275\327\210\244\275`\260\r\274L\274\207\274&Q\023\275\177\2757=\332;\324\2745\342G\275\266x\310<\276u\273=\352:[=\341\275\003=\304\2469=j\241\205\2759]\205\275O\324\342=\r\347z=9\2145=\365\244c<\003\335G\275\262 \"<\225\2303\274\231eH\274\204\243\243<m\351\245=\020\231\346\274\237\031\030\272?\025S;\205\262\">}\002\323<\020\236\220<\253U\232\275\254\201\213<\274\232\000\273\030\220\333\274\215D\211<\322\320\306:\367e\340<\326\214\373:\033*\233\274\337\353\r=\312\327l<\322v$\275g\265-=\037\321\236\275v\tV<\227\277<\276@\274\322\274\255pU=hT\200;\233\260\242;\371\013\336<\003}\317=o>\023>\217\034\'\275\354\220X=\rr\274\275\206\314\256\275\206a\325=\327!D<x<\364;\022\370W=\272\203\031\274\335\303\001=\244\351\030=\273D\271\275\271\313\376;\010\325\352<`\311\204\274\346\3721\275\243P\267\275\310O\267\274=\336\014>\370\374R\275i\325k\275\375\271L\275\032\273B>js=;\232\314\205\274s\036v\275\244\236\035\275\300:\211\274\300\"|\275\226\314\t<R\203\345<\330>\267<\262b\377\274\207Y\265=>V\201;\344\335\337\275\245x\347\275)\271\026\275\236\202\230;R\033\271\275M\247\203\275\237\316t=\253\023\007;\227D\000\274:\363i=T\307\226=\277\222\320<|\242X\275\346j\004>v2\345\274\014\275\203\275U\n\204=h\277\223=/\353\335=4s\302\275\363\253\242<U\036\2479L{]=\272J\373=l\017t\275\034\246\323<\3406\246<_Ja\275\371Q\204\275\326\234>\2764\217\332\274\347\211z\275\220up\2758\346 \275\022\025\254\275\016\331\356<\341\010\206\2754\333\237<\362\364\201\275\354\243n\275$\216\267<J0\376<\337\034\230<\340\303X=\276D\341\275\\\254\213=BVt\275Y\223\333<\\\311\004=\201-\206=\034L\305\275{9\246=\367\0214=\347\002\213\275A\264\307\275g\245\243\274\350)\026\275\003{\261\274|(A\275\005\237l<\220\257\203=JwQ=~\222C\275\231\177c\275+s\254\274\331F\035=ze1;lU]\274\316\277\"\274\374*\t=\310\261U<\313\330\241;y\333\265\275\027\3032\2757\270,<\300\313F\275\214\335\200\274Tm\256==A7=h\033\216\274\375\235\204=\214\352T<%\216\003>\276\376<=M\216\022\274gd\201\275^s\n\275\207G\204\274\'\306\272;;\326\331=\356\323=<S?j\275\321\275m=\\G\022\2745\251\213\274\355\214\252<\032z\006>\331z$\275\362>\020\276\322\211\003\275\204\324\216\275\347B\345=\003\341\344\275\351$W=\335\346\217\274\006m\206<\023\033t<\245*\347=ZZ\312\271\016\352\264\275\363b+=1\365s\275\034K\210;\231Y\203\275\322_\273\275\205j\206=J0\r>^C\256\274\307\321\242\2753\272\212=\216\035\262\275\036\200\371<Z\3316\2731\037\313<\376\255P<z\241\301=)\335^=\3460\342=\356\265\265=\216!\024\275.\347\251\275Q\223\014\276\201L\241<9\311\264<\225=T=\353z9=\037}\206\274\343D@\275+\265\n=}\206\357;\007P\365<7v\016\275\210\366\320\275v\024\245=\352(\304\2756\022.=u\372*\274\034\220\302\274BqA\275\000\353\035\274\001\235%\275\376\006;=Z&\240\275\232\003>=&w\207\275\217f\"=\201\025\216\274\230\236\316<\225\245\350\275W\363\002\275*x\000\276\317Q\214=\276\315\325;*\004\341\275\261\336\352\274\372\305\033\275:\033$=\351I\373\275\334*2=\002:\372<\257\n\177\274\376_f=5h\027\275Pm\214\275v\373\367=\350\243i=\370\373^=\241\244\230\275\032[\274=\023?\213=F\375\256<\203D\017=TFG\273~\227\\;8^7\274\251`\240\273\255 D\274Q\330\225<.\347\377\274M\213\005\276k\001\036\274\212\030-=\352\365\327<\3110\256\2748\2611>\355\013\363\272+\'\242=\031\204\225\275\005\253\306=\374n\237=\300\342\334<\226\300\004=\250\254\274\275U\373Q<\001\221\314=\254\004t=\223Y\016;})\025=8\317M=4\340-\275;\255D\275_\304\374\275\324\376D<\232!2=\351\275M\275`\202N=)\252(= \344\031=j\016\200\274\375\234_\275vG\311<V\353\034\275n9U\275D\246\261\275\016c\264<7==\2747kM=n\027\365\274\352\232!>\341\232i=\315\332\265=k{\221=`\267\326<#\224\217;\030\213\034\2743,\"\275\032I\250=\357\"<\275Bm\004>\213\265v=j&\022<\242\247\326\274\244\372 =n\177\210:\256\245\272<\331\243A=\306&\255\273J\351\235=\210E\007\275\371\032\306=\304\007\376\275\253\326.<\250A\t:[\205Z\275x\254\000\274\361\346\335=\375?m\275\214\370P\275\n5\022=D\226i\274K\215\211:P\177\267=\306\364\347\274V_};\203\341I\274U\332z\275lx\021\275\350/\r\275_\364\\\275\246/\215<)\220i\274\000\246\241=u\250d\275\304\220\233=\206\265\217=\212\204\207<\211\352\277=\204\267\311=\322(\206\275\0248\n\274z{\302;\255Q\343\275?\034Z\275\340\361\246\273\307Y;\275\221\370\203\275\360\013\342=QRY=h\366\321\275I\317\177\273\301\252^=\004#\202=\0012\334=\234\301\315<\237\327\367\273\016\206~<\177\006R\273\031\321\001\275\344\364\216;\360\274\316=\000]\347\275\256\004I=@S==\2616\240\274X\236\201=\342\212\202=1\374\336;h\224\254\274\245O.=\240\262\261=\344\314K<\246\004R=*\024\264\274\306P\267<\354\317\233<\207\275\237\274p\037\252=\324\242\343\275Mtd\274\346\347\221=\222.\326<\302\213\370\274\2652\353\275c{\352\275\222\013\312=\257\234\207=(\262\001\275In\177\273\255vu\274\246\264\311\274\326\360\312=\365\001\267<\370\003\017\275ou\315\274r\242\035=\311\372\264\275\370\020(\2754\355*=\336kk\272\347@\225\274p\026\004>\247\261\341\274>\335\375<\332\234\247\275\301\267\004=\314\035\331=B\317\245\273s\246+=\322\316\317=2\215E\275\312\325\004\274k[\201\275\263\207:=\227\344\253=\360E\027\2753\275I;%\344%=c\307\216\274\030\327\237=\216\252w<\\\323\201\275\034\255\013\275>j\037<\220\363@\275KE\222\274\362\264\242\275\377\360\031=\022<I\274E\265\233\275\262\372\003=\267\253\335\275\214\014\251<\256\177B\274f/p=\3425\207=\364\234\301;\320\266\204\275`\207\332=t#\232<\247?\211;XJX\266\3275\215\275\342\237\221=\021\306\372\274E~_\273\355\214>=-`\035\274x9^\275\240\222\233\275\266\\i=<\014A\27594\354\274\332\014\244\275\014\356%=\377\377\214\275Q\216\300=\"8\016\275\354\365\356\274\340f\257\275\2605\021\276\336Q \274\247\334\202<Q\305\260=\361v\223\274\234\301@=\006\005\262=\316\355\344;\262\2241\274\237\324\004:?\310\246=U\365\221\275`[\357\272<%\005\274\345\3618\274z]\313\273IDX=g\372Q=!\352\255\275\346-\223=\233\037Q\274qv\327\274N\326%=N4\034=\370m\320\274\205\003\272\275\201\025\025=\013\253\001\275\217)B\274\244`\203<\306b\220=2U\255=\212\035f=\301\336\030=\n\350!\276R\324\204\274G\367\234= \335\233=^\007\272\275\001\310/=\'6\314\273\241w\240<\353\241=\275\271j\006>\r \271\275N d=6\356\017\275w\014\260=\273f\252=\327T\021;l\370\374\274\004I\217\275\224\177\222\274v\323^\275<M\270\275\230A\017=\333\243\331<\220a\226\274\2204\304=\317D\326\274 \336\332\274\215*==b\215\265\275{\207A=D\211%<u\337\260\275V\253\270=\007\367\273;\205p\003\2757\016\013\275\371\322T\275\tL5\275\207\212\201=\217\206u\275\361\223w\275n-D\275\244\262#\276H\211\331\275\017\002\330\2759\333\235<\265\235\013\274Q\334\360\275\200\031\243<kD\323<\372\320\"\275\271\024\213=\371\017\274\274\242\024\251<L[\310=\021 \036=Vq\245<\'\360\321\274\353|\r\274\014)\271=\210\367\210\275\r\214]=\252\236\017\276\3430w\271Ma\n\275\321?\261=\272\262q\275\002\273r<U\017\305\275\327vY\274\277;\003<R\346\377<\314\231\204=\215lm\275\367`\035\274\304\035\357\274\365\374d<\257\215\335;-ry=\354!\226\270?\013q=\020\r\213<\301;\275<\266\236M=\343\313\000\275J\256\270=Y\322\206\275\337\333\370\274\016\262\347<\261b\332\272\251T\321=\246\266\202\275\246*\251:\361R\372<\010\002\220<\376\374#\2756\223\027>4\010\032\275\273\323\245\274\226\354K\275\373\265\014>j\306\005>\341\265,=p\370\377<\027V\346\275\217R\231\275\030\270\036\274!\033j=;\303\t=\376\336\235\275\000J1<\372S\025>\032\301{\275\2535\\\275m\313\312;\016r-\275\272P\221=\200\262\335<\016\335\206\275O\344\023<\362A!=\0240\221<\276x_\275\231\210\206=\301\224\203<5\271S\275Up\261=\353\211\245;.\372\316<1\317\234\275\262\241\353\274\244\310\233=\311U$=`\263\312\273\226{h\275/g\223=hS\376=\036\273\334\275\223\215\000\274\202m\251<\022<}=Um\227=w\017\250\275\274\017 =\350\013\276=\014\024\221=6J\272<\346\247M\275\305\277\206;\302PA>s\334\026=\037\177)=k\250\304\275fj\375\274\016|a=\230&\005>\270\035K>-\033\000\275c\267\222\275\330\031\307\274<L\000\274\243\200m\274ne\227\275E\023n\275\210n\301:?kI\275\272\250\204=\\\232\323=|\036\255\273\323k\375<\326j3=\214U]<\363K\277\275\302\216\237;\321t\255\273\036\034 \274\345\326$\276\270v\310<\362\020\232\275\272K\035\274\021\215r\275\331A>\273\272\266w\275\325\177\267\274\004\306\325\2744\302s<a\030\226<q\331n=\034>\353=\255\374\337\275\216\376\"<\354T\\>\202\221\037<\024pm\274kt\310\274\237F\000<\225\235\366<\211\242\321<\211U\367\275X\267\213\275\240@o\274\355\337E\2729\342\r<G\326K\2757\305\366\275U\243\037<\003\266\211\273\240\252\203=t\331\206=\036y\313\275\321\264\031\276\316Cu\275v\373\252;\324l?\275\220Ps\275\335;c<\354\025\005=\232\027\010<\237\177u<\316\210\010=\257\376\311\275\002\206V=.\024\"\275q\304\247\274\201\227\t\275>\236\203\275\001]:=\226\034\205\273\241(\234<2u\265=x.\031\276=\365\233\274\026\021==\377Zx\274\321\200F=\035\246q=\302\266y=rZ\231=z\006~<\314\302\272=3\315\357=\021\310T9\014\344\032=+T\001>*H\022\275\210\226#>\231L)=\376\253\302\275\265tE\275\006\214f\275\370bA<\276\354\320\2747d\361\273W\0270\275B\356\230=\222\210\253=\331f5\275\240sQ=k\273@\275\376\213Q<\277\256N\275\322\267+\275\242\307Y<\312\365\323;3\031\361<\251\020\313\274\034F\374<|3\213\274\320\035\205=\346\366[=\257\000#>\324\220\247\274dn\253<~\275\354<j\364#>7+\225\275\374\241=\274u?\220=e\023\251\274^:N=g\200Q=\347N\213<\0345\224\275\262\314\025\275\201\374\034=\363p\207=O\264b=\024\013n<Q\363#>\217\314\010\275l _<3\331a\275\254\230\031=\033M\326<K\332\024=\236\352,\273\337T\270=\365\013A\275\002r\336\274\010\032\334=\356\311\245=\277\311d\275|\030\006\276\311\334*<3VH<\224\262$\275\nt+\275\372\231\003\275]K\344\274\300\376\245\274\277\225\271=v\361\245=\372]\301\273\376\261E=\335\300*=+\345\267<\256vE\2756\037\257=\334\007\343\275<!X\275\335\212\000\275\301l\0079\265\270O\275Cg\032:\347\210\372<\312\353\213=M\242\303\274\264\377q=\336\234n\275\366\252n\2732]!\275\242\004>\275nL\n=wo\216=\306\312\206=W\033\204\275\270$\202\275\242n\321=\036\014\254=\345C\021\274Qs\222=\017\333\010\273y\230\337\275c\242\225<{\275C<\t\253\250<\364aC\275HQ\254<\232\223\255\273@\376k<\220\346\276\275\314\313\005\276k\322\007\2750\312\322\274T\247\217=XY\264=\335R\233\274q\262\235<\035\271o9\236I\242=P\300\304=\025\314,\274\370\310q\274x*B;\020\312\005<J&\264=\276\340X<j\323\367\274\347\203k<$\314\251=B\013\267\273\370\332A<\356[Q\275g#\326;\025\334\253<G\307\033\274\336\361\250<\035\330\365\273\007\'\300\274V\020\340\274\023\244\'=\2644\034>W\216i\275b\356\311<U\236\315;\267\330\257\275t\333\036=\036$\307\275\220]\356\274{\224\304=.\362`\275\0337\353<\350>2=[\221\255=2\353\217\271U\027\344<\016r\033<\310<\016\275p\256\216\275\364\300\010\275\263\371\214\275i\323\020\275\266\240f<p:\300=\232Y\267<\250\006\230<\226\325e\275\206\216\031<\354=+=\346\361R\276\270=\007\276\301Q\336=\317Z\276<[<\020>\2377\207=\343\036\220\2743\375\270\272\034\025\311\274\305\"\365\272\335\334\227<I\014\271\275\337\211\037\275\342\377e\275\321\247\215\275\363\355\207\275\3441\347;\273\351N=_\366\273\275\317\266I\274d\326\247<s/\017=0\336m\274Q\306\224\275\360B|=\346\256\256=\354\345U=[~\205=\020H3\2751O8\276\014\367\250\273@\210\374\275\321\355\022\275\245(\351=;5\373<\353\362H\270i6P\274\r\372\201\273\321\032Y\275\005\026\242\275I\337\t\276\253_\031=\344\304\230=\222B\036=H\337Y<\025\354\000\276\207k:=\200W\230\274\356G\211=\004At\275}A\331\273\334\325\247\275\201^\223;\356\255\350:\254\354\024\275\207\310\030\275B.\330\274.\037b\274\372\000\245<_\310\010<.\350\006\275\n#:=\2474\200\275\2311g<J\215\241\274Vp\233\275\264*\002\275\"\013\262\274\216\223\210=\233\334J\2753\322\"=:\355\353=\256K=>\350(?=p\344_9\204h\232=\260lF<\305\315\222\275\\\243\024<\336\276H\275f\360\210=\253\355\226\275\365\334]\274\303\325j\274\357B\321=w\270\027\274^7\250=\020r\020\274\327\211\234=\304OX<o\245\225\275\316\t\020\275\300\303\n\275!\363O\275~\302\202=40-\275\313\340G\274\321\210u=:a\324=\"\0172=\261\357i;\235\336F\274u\247\200\275+v\344=\3422W\275\n\275\351<p\023)<O\240*>\331\376\215\275e\226\202\275\216\n\247\275\274\310\235\273\225\026%\275\371b\026=\002k\326\274\302>)>\372&\223<\322\020\020\273h\225\001=Xw\316\273=|\246\275\205\001\177=\363Br=\25574\275T\002\353\274\245\274\007>\246\202n=yr\264=\247\216?<\327\340\004;\216\216\254<1e\023\276\212\t\207\273~\372\217=\262\027u=\263Z\026\275`W\354\274!\0377<\3077\343=\000af\275&#\257\275h\010\255\274a\350,=\024F\n\275\304\2061<\330\2103=\257\177\t\275=W\274\274|a\263\274J\313b\275\324\254\224<\346\r\254\274\326\375\2249_\327\221<\346\031/>@\265\n>\323\302\271\274\266\211\304\275\252\300\211;PV\212=\251m.\275\312bc<T\340\243\274|\000\304\274\211\262u=\224\211\214<\235\257M\275\362\023\310\275\n\353h\274j:\002\276L\004/=bO\222\275\2431`=#W\276=\016P\366\273\267\351\002\274@\326\204=OX\001>\231A\364\275\212\226\005\276\235\007D;P\362J\274\363\022\200=J\374\370;\200\244\212\275#\255!=\200\245\221<$i\312\274Me\241\272\242\217&>\247\'@:\356\242\265=\nk\311\274\347_\232=\323s]\275\226\000\274\274\177\004\350<yk\221;\003&%\273\224\217\307<\211\220\\\274\253t\336\274\270\375\304=\n8\326=m>\263\274\376w\212<\013\215\315\274M\262\210<\3144\265=B\315*\275;]\307\273\024I\210\2740\"\207\274xQ-=\323u\200<\3038\352\275\350OK<\037\265\276=4\375\257\275\025\333\277\275\331}\301<\021\312\265=\362\233\362\275\033Z)\275(\002\355<\301\217\310;\310\007\024\275\205\204W\275tJC\275\345p\257\275p}\230\274\230P\035=M\264\006\275\022\210\231<<|\354\2745\347\\\273\240\244\r\274d$\343\275\347-\226=H\243K:\2011\005\275\237a\275\275W\310Y=U\306A\275\022\311\260\274p=\340=d4\261=\352t\031\275]I\010\275\372I5\275\2402\231\275\327\220\r<]\307\200\275\021\016\265\273\303?:\275\345\270D=\322\216\272\274\307\364\r=\332=\244=z\r\014= e\362=;9\213<\n~\251\275\0065\023\275\307\324\257\274\213\276\030=\316\010\235=\205tU\275\332\325`\275\006\024D=\372I\037\2758\240\245\273\244\374\225=X\333 \274\252\326\327=(\3119=\005\330\360\273\263\255\316=\342\367\245\274M\366L=\024\276\333=\022\345\217=\023*\035=\351<$>\215\346c\275E\377I;\202\002&>#G\220=+\375\232\275\226\357\003=\304\242A=M\347Q\2751\215,\275\0249S=\307\031\367<;A\372\275#5M=\250\267\'\274\022t\"\276\314-\315\275\275\010\214\275\354\271\235=0\2641=\242\307\254<\301j1=\221;\032=\2528z\274\367Q\234=:\360\363;\314s=\274\251\021\361<[b\314\273\207 \241\274\267>\204\275\261\251m\275 V\305=\346Ml=Z\307\346=\222\311\264=\017\303\212\274\314\377\246=\322\031?==De\274\n8\255<VWE\274\236g>=L\336T\275\000\010y;FM\242;\213\024A>\324sN\275\274\277]\275\353\215\225=z\003\324\2746OO\275R\"\277\273t\373\327\275\027&\366\2733S-\275\002\022n\275\352\010\251\275\274\242e<\332\304\343=L=W=\236<d=3\254\331\273\017\034\004\275V\3352\275\266\244v\274\215D\002>\212\200S\274V`\205\275\2201e<S\347\003>E\004\010<\243\027\335=H\301\366\273\365\207\247=\307\010\030<\036v\006=\035\034\217=BD\0259=cm=F\005\222=\324H\364\273\331\350D\273\031\344\337<-\255\354<\030\201\231<5X\273=Re\222\275Og\300\275\017\351\036\274R\342\005\275\nX\006=\n+\200<\300\356H=\027\267\177\274\003I\247=\034\340S=\377+\272<\\\010\262=\346n\\=\034\211x=\277I\230=\233\377\200\275\243\376\363\274\225D\244<R\221\222=\245\334W=\201\2545\275\343\323\253\2756mo\275Y\255\177\275\025\225\220=#T\006\276\203}\203<\300:\243<\317\345K<\371\312:\273\306\255\221=\037y/\274\320uZ=\325\030\272\275+,\216=\256(j\275\tz\363\275\213`a<\030(F\274\271\207q=n\355\200<3\372\354<\341\013\017=V\t\307<\340\021\314<\266\205\006\275(1\000\276\370\320\242=\215?\217=\260\365\310=\224x7\275Tr!=\322Y\237\274TnF=X\375\271<\213\262}<~x\363\270~\331u<\357\354\262=\347\332\273\275\326\226\n=\222\312\246\274\250Y\034=\003\315\231\275r\365)\275i\263\217\274H\311\370=+\250H=n\367r=\016\344\032\275\215\305\233\274R\226\377\274\362sf\274\374\004\"\275\323\223~\275Dr2\275\001\377\'\274\244\231\214\272\35267<>\025\214\274\303f\014>d\243\335\272\201\005\272\274N\254z\275C\360\214\275;\212k\275\357\354\353\275M=c=\326\341}\275m\337\372<\254\344\340\274\347\372\276=Zm\304=g\325\374\2744`\030\2755\367\202=\177\316\346\274\271\'#=V\"\266\275\320i\275=\372U\220\275\237\344\247\275\201]\216\273\271r\215<T\\3=\256+%=\243\024\205:Q\036\033\275\234\307+=\300\344\300\273\370O\233\274\374:\021=\003\323\251=\355\013\006=5\251\205<eG\245\275\230\361\235\275\316x&\274\311\357L\275\203\014r\275\242\247\327=\035Q^\275\0144L\274\002\006\031\276\306\357*=\310[\337<:$_=Z.\020=WN\036\274\356\023\323\274\"\336\377:\rR\327\2758\240\234=\203l\330\274\\\311d=\367\005\355\273\225W\010\276\265s+\2751g\275=D\212\360=\236\253L=\272\004`<uf\254\2754\254\002<\357H0\275\267\341(\275\230F\347\275\341\256\267\273\365\210\245\274\035i\346\275\267|$\275@\310J\275 \r\270\271\234\233\206=\351\330\232\275\375\034T\275e\303\343\275\225\372)\274\203\370e=\305\270\325\273\017$\233\275\303T\207:K\331\310=\3015\274\275M\341\204\275.\343\034<.\210\207=\014\275 \275:(V\274\305\315-=\2524\211=\367\235\024\276x\024\356=\017\325\r=Mr|=\376\241\033=\037^A=Xi\242=?|\315=\260\026\026=\316\255~\272\t\365\312\275V\023\257\275\"^@\275\275\266?=B?i\2759*;=\314\311\314<\351\275~\274=\200\263<\360\023e=\370\235e=\273\231\221\275K\216\016<\020\032\302=\310\340\376<\271r\276<\262\331\027\2740\220\271\274Q\212\354=GK\023=/;(\274\3654\332=e7\304=\344\345t\275\177L\001\276\202\207\377<\311\244{\274\323\031\266=\240\351\217\275\316\202\301\274%D)>\367\353\327\274~\222\332;\326\271\372\271\341\333\300\2755\364\311=[\373O<>s\350=\022\374-=N\265\004\275\024\336\257\2751\376M\275Q\321\310<@\235\023<\234\301\304\274\215Jz<\n\005\266=pHh\274\010#\006\275\030\323$=\351L\033=r$u=&\275z=\312^\221\275\026s\305\274\272\335%\274o\347\314\274S\220>\274\271\334\007=\333\253\320\273\221\024\363<\353OX\275k\244\332\275\213\355\261\274\255\206\357<$]\202<\321#Q\275|X\220\275\024\212\306<>Wn\275`\323\237=T\243\201\275\240\240\365=\330\023=\272pX\205;6\013\005\2752\232\005=\374=n=]F\207<\304\216\222\275\373\317\002\274!f\205\274\376z\025\276\314;\236\275R?\217\275\350\0238=g\004\177<lI\365\275\177\243\237\275F\002\241=\307\023\211<.O\302\275\200\207w=\275jN=\232Zf\274\261\3239\275\367\002\340<F\341\262<\004\264\353=\370/\237<\"\356e\275\274\263\003\273\006\026[\274O\216\236\275S\216\177\273`X1<\263\374\375<\202\022\210\275\327\306\322=V\327\2666\260\301b\275N\023\020\275\022M\300\275\334\344K;\357\304\370=a\337n=e\301\307\274^\231\227<\241\257\364=E\332\265\275\024\243\004=\336\251\004>FhA=\363\306\334=\247\374\273;l0\005=\262\265\265\273\273v\242\275\321qN\275S\305\034\274\006\376\013=\364hQ\275\020\002\026=c\022\352:\035\262\026=\207/\341\273\007\016\034\275\311\323\261<\311\033U\275\334m\273\275\234\206\223<\255\340\251= \346d\273\375U\305\2749\"[:\306\211T\275&d\373\274\355I\242\274\261\212\204\275\010\247\352=Q\350W<~\035\256=\245\207\212\275\266Rb\275\t\261\214<\220\337\204=|\357\305<\267\315\313=\016\340-=\260i\360;/W\301<}h\322=\307H\025=\3346\324\274\240\233\311=]\246\312\272\240\233@=\3460\230\274\216\033\276\272\237\247R\275&\267\367=@f\300\275Z\377\220\275\204\337+=hg\177=\304x\036\275\374\272\227\275\315\351\036\276\000\300\330\275\003\331\007\275\376\336\357;\034\351\036\275\351/z\275\256\223\034\275\335\351\233\273\254\325\027>\230\240i=Z\2767\275P\313\374=\322\337n=\310\327\276\27347\032\274%F\223=\211\333z\274\032\353\030\275g\025/\2749\361\272=\326K\232\27549\036>\376N\027<\240\036\216<1\324\265=\207\217\211\273>\276}=\346EC<\360\316h\275\013\275\201\275LIb=\366\317`=\224p0\273\307\317\003\275\217\201i=+\273I=\214`\t=\276\246\225\275\357\330\260<\035\277\347=\203\"\240\275\310I\207<k4u;H\021\"=\033\277\020\273\322\036\220\275\306\352\356\274\2333\216=\332\367\204\273\024\206S\274?\363\376\275$t\302\274\004\027\t\276\302\200\025=9\177\251=\206i\007\275&:\277\274\376\370)\274\\\320Q\275\333\031O=\311\007\255\274\2632\024\276\262y\276\275RRw<\3153\241<\365\246\324\275\336\311\000\275e\317\001=\230\371\025=\033Q\321=,\366\214\275\325\tA\275\236\004L;\331[\202=\'\001\317\274\363I\217;i\031\326\274\031\216\270\275*\314\242\275\316G\333;4\317\021\275\231\016:=\366\266)\275\356tS\274:\234t\274y1E=\030r\320;\323\006x=\245\nM=-\257\350\273>z\260\275\242\003j=q\307\031\276\325\355&<\276\321\033=\033\265\371\273\277<\312\274\320,\314\275c-$\275^\203\211=y\327\035=\245>0\274\240\304l=\276\0306\275o\347U=\277\337]<L{n\275\253\037\377;\313]\224=\266&\225\274\262\\\014>\001\254\233==Q8=\022\\\253\275\352e3\275d\356\365<\215d)=\302\036\254;|\357l=Qc\260=\312\206\274\275_\232\003\275\017\244\231:\212\231{=!\315\205\275nsG\274\343Y}=0\2032<\373M?=HQM<\337\220u=l\016\224\275\037\234\304\275\257\367\320\273\005\006\037=\246&\027=$\022G=\274\264,\275[e\267=\341\316\214\275\004\376\245=\005o+\274w*\026=\345\353\275=)F\211<\233o\021\274\230\014D\274\007\251\203<\310\347\372:\r\334\301\275hq;=\350\360\370=\375\004\231\275*\r\312\2759a\277=%\242\254\275\326\302,\275\002\254\222\274~\352`=Cp\267\275)Q\302<\375\030\016=\000L\257\274\233\344\323\274]U^=s\235\n<8\214\267\274\314\234\n\275\276\211\223=!\330[\275\222GM=\241\343\311\275\352*\326\275\324\246\034=\232\315\353:<g\203\275\344D\364<\264\344\342\275\233\250\013<!@\346=#\357\214<\354\224\000<\212G^\2741\304\003\2754\001\001\276\r\331\305=\367`\332=\242\321\314\274a\242G=\230Z\026\275\307Sc\275H\263\313=\242\0034=\001f\375=1\301\256<7\263-<\026)q\275P\252Z\275C\334\344=\331\300B=\016\025\200=lG\035;t\337\002\275^\267\304=\2712\237\274z$\256\275\232\335[<\016rk\275\031\202\016=G(\321;C\210\206\275\253\3753<\311vv\274\351z\231</\357w\2748\265\373;\201\031\201:\221\351\252\274;\023\344\274\343v|=.\377\220\273\323d\177=\331\366S=\242\305\217\274\317\347\241<\005\355t\275\274.\200;J7K\275Y\244r\273\351\030\272\275\017\266\210\275\340\260p\275\356\261\021\275g\033\314<\274\274/=\234\254\231\274\340\371\256\275-\235\256=B\024\257<l\275\034\275_\001\210=7\032\n\275\"\303\260<\020\232\001=n?\007\276\350qQ<\177\365\252=A\365\306<i\005?=x!\271\275\261\254\006\275Hp\234=\250\277[\275\035\242\272\274\217FK=\202)\026\275pj\007=\334\252w\275\365\022\217=\363\023[\275+&\372<D%\276=\2543\257\275\\-\312=\262\\f\275\004\3216=\245\267\325;\303P\207<6h@\275\220j\224\275\362\341X\275\3258\016=\327-\231<AB0\275\337t\240=k\373\020=\001\374\260\275|\343\372=\352\243}\274\345I\017=?b\324\274\271\254\255<u\177V\275\361\275\020\275\230@ =\017`2\276\221\340?\275\337\034\037\275\350\313\010\276\246\241\227=\246\363<<\237\222\251\275{\344\020\275\353\203\324<\204\374&=u-\253;1[\373\275\230\250\367\275\033#\324\275*{\324=\267\265\347=\017i\276=\253C@\275\254Jl=2\333\244==x5=\357\301^\275\r\367@\274\242 \034\276]wI>)&\177=+!u\274y\2603\275#f\247=\340\365\241<y\257\232<\223\311_<\307\231\241<\247\210\241\273o\276\371\274a\243\274\274\317z\371<\273>#\275\361\354\232=w\316-\275V\325\014>\220Uj;\255\374\004\274\225\270\025\275<[\002\275\266KM\275\233e\254\274\303\364 \274\036\200\024=\340f\303\274~R\370\275\223\261\332\274\315xq\275Z|I\275\256s\261=\340h\234=\367\001\374;U\250a=\345\364\345=\322;\223=\231\366S<iM/\275X\322\206\272\373l\n\275\3740\263\274\035\001\371=\026\253\010>\352\211\216\275+f\225;\2231e\273@\345\274\274\230!\205<\306\310\'<Rc\352\275[a^<6\217\014=s\272\223=y/\204<A\356\342\273H\326\224=\242\332\037\275\"n\240<\206G\257=w1\204\275\372f\320\274\255\230\024\275\327\316E\273/o\026\275\026W\037>\215\252\206\274\373kc\274\347\2764\275\370y\370\274\006F\376=\337\027\313=\032\251/\275\307\250\250<\264\203\305\275C\314\272\274!\032\017\274\371\216\355\274/\335\214\275\320\315\004\271\t\034$\2752C?\275\025\263%=\312\004\350\2752\241z=\325\345P=\227\211x<\214v\016\275\375)8=8\270\034;\204\370.\275\256\244\222=s\256\"\275\365\033\277\2732\315\000=\030\036U;)\2561=Y\243a=\353\r#\276\373\212S\274e\371\213\275\244\252^<>\000V<\320nE\273\224=,>e\304\'=\274\315\216\273\367\366\251<\344\241\270=\274!\010\275\200gD=\275\331\233=\240\325\345;G,\235\275\330\321\'\275\207\034\035=x\221\206\275\202\216\206\275hU;\275&\236\301<\305\005\302:\334\001\355<>\036\023\273l\305\354\275N\231\024\275\311H\005>\252~\"\276\342\034\265\273\213\355\250\273?\356\357\275\036\tK=\366\2219<\343]\226\274\236\220\317<F!\276;\252\031\274=i\255\222\275\305>\220\274J\301\261\275\017\330\\\274s\231\277=m]\273<\"\245\026\275($\355\274\312\376\377\272\225\023\237\274\375\303\003<\300\r&>\223\260*\276\306\254\214\275\335\241\337\275&\303\\<OB`=\264\313\310\274~\246\234\275mW\001;\217\233\021=\226\242\225\275\265r\273<\264Ed\275\357\316\253\273\275\202*\274h\265\265=`\266\313\2743-\n=`\352-\275~\222 \275\027\006\\\274\217<\000>\001\023g=\235M\016<\262\353r=h\277\373<%5\270\275\207r\364;RY\201\273\255x\017\275CUP=\307\275\036\274T6\024\275\233HQ\275J\331\301\274x?4=\332\332\323\275UA\354\275\025\2438\276\2078\365\272\024\006K\276T\033\272=j\370\277\275\035U\324;$9H\275\350\241\032>\272\260z\275L\226G=\273\264\303\274r\334\215;\346\n\200\275\324\002\235<\243Ds=\300\305Y\274\310eH\275X=?:>\217\230=\242\235\364<\275*\t\275\364\3057\275\\a:<W\231\251=\252\025<<\212>?=\014s\207\272+\006^\272\222\307\340=\001\323~\275\216\274\t<1<\206<E\034\264<S\302\250=\324\215\\=\226:\347\274\370\354\023<\273\307!\275\035\312)=$!r<\3212\250\275\036\345\231=\207SP=\220VP=\036\326\017=-:B\274\003\\\241=\304Q\232\274Uw\350\273\211\357\'\274\315\265\202=\270\241\305=\'\275\034<R\373\037\274\232\335\374=\032\252\037=\335t\254\275\033+\227\274\360\366t=a\221\203=\257\362\333<f\\t<\276\002\236=\350\032\032\275{\211\217=\207\305\004\273\001\226\364<\272\016\216\275\007\004/>\331\325@<Rc\220\274\305\254\224\272]\320H<i\340\362=\270\206\252=\024\207]=\367\253f=\371o\222=\002\227C=\025\325M\275\362\241\307\274!zb\275\2370\310=\310\227P=\350\303\304=\352\327h\274\023 3\275\014S\"\275\302~\256\275\245\357\213=\"^;=\244#K=\301}\034=\317\3230\275V\241\336\274\222P\233;U\367\207=\255Xr\274\212S=\275v{\036=\004j\241\275\221]\261\274\r\310V<Y\216\227=\241[\345\275\211:\233\275\354M\023=\324\275\214=A\302y\275^\304i\275=\231\221\274\207zo\275\3748\225\274L\024;<S\022\004>\025\342\346\273\357z+\275\213\361&\275\037\301X\275fT\262<\307 v=\214\010\313=\260\341\210;\243\\!\275(\034\250<\003\253\267\275\332p\271=\021))=\315e\256\275\270\2730=\307c\247\274\245\210\215\275\001Q\217=\003\331\036\273U\001.\275azs\274>E4=\253%A\275N\371\250\275P\221J\275\215\264J=V\267\231=\331f\026\275\257%S<m\223\266\275\350\265\322\275z\037\214=\323s\r>\367\337\311\275p?\336\275V|\211={o\002><\332\255=\364zM\275\355,\345<\177Fg=\034\031\253\275\tI\232;st\352\275-AW\275\375\300\242\274\0163\207<\365\304\350\275{\342V=c:\200=\346\264o\275\331\272\r=\343\315\005>\307-6=\306L\316\2759\301*\275\317F\203=n\033\003\276\354\315\230\275\241o\253\2758\321\027\275\213\366\037\274\332`\330\275K:\320\275l\3540\275\225\"\316<\275\351\033\275\336A\271\274\265P\365<\001/!=O\312\000\275\334\352G<\362y\305\274*\255\235=%;\205\274\017\331\243\274^\037z=s\274\004\276\237\3456\275\334\243=\275\376G\270=\361\0248\275\231\300\020>\304\214\202<{}\232\273\331!\322<\275\257\375\273}\023\205=\261s\243=\362l\277\274&\242\r\276\200\213\300=\215\344\306\274\271\200\324=\030\026\016=\230$4=\316\r\027\275\037$ \274\255\263\004=\325\306\346<\270M;\275\257\202H<\265\266\214=`\217\353<:\330\211\274P\271\211=O\223n\275\305\324r<G/\200=\332\245\004>Q\r\030\274\202s\347=\272\251x\273\340-\016\275\305\274\240=\221c(= \"\254=\364\366\302=dZ$<\271\2340<5z\234=\346\313\212\275\354\334\374\274\022\303\212=\273P0\275\217\221\241=\031d\367\273a}\307\275O\266\024=\272\316\303<3\256\236=\230{P=\3507\233\273\274\342\321\274\351H~\274l_t\274{\261s\275\267i9=\312\021\005<\372\307\370\274\316\360\236<nL\004=6\032s=0vq=\237\377l=\326\361\036\276\340\341\361;\351]\221\275-\326\200\275b\206&<\250\250G\275\002\r\005=%C\305<\202\347\362\274`E&\275I%\"=\335\315\n=\346\014\233;v\236\335;m\313\016\27613\247=R\207\256\275\333\245\273\275\370G(\275f\302\316\275\335\257\004<\034lb\275\243\342\264\275\217\010(=\300\t\230<\332u\000=\022\014s=\026\375\203=v\027\034\272\301\244!\275\352\264\211=k\237\276\275\306g\202;\014\357\311=\223,5\274\265\373\001\275\257\220\353\274G\263\276=\241\207\360=%%O=\273K7;\215\366*=\260\231n=ls\001=\335l7=P\017\353\275O\034\027\276\005\253X<j\361p\274\205<n=\252\260\205\275\314|\251\2754\365_\275:1\030\275\024\017\036\275G\257\205;\302\223z\275\274\375Y\275\367\255\242;hB\345<\313\320\250\2743p\000<\314M\336\274N\211\270;\321\351q=\331\332\034=Nz\327=\261\364\024\275\034j9<II\202=\270\213\324\275\204\234\252\275\210\320\341\274+\242\035\2750o\203\275\346\264\003\275\337+;\275\004\252\324\274\246\004\335;oy\243\274KB\203\274\033z\317\275+W\275=]\370U\275\034f&=g\373$=n\003k\274\353H\2129\226\370/<\027N\323<\021\271\303<\031^\007\275\312\310{<\001\334v\275\3666\217=#\325\213\275\374\237\330=\234z\'\2751\320\004>\357bS\274\036\275\215=\273H\270\274X\331\231\274\314\353\t\2753\274\264\274\256A\265\275_Q\226\2751,7\275\004\202\300\275\313\231\237\273\354\360\237=\365\247\256=\334J\257=\330\300\360\273\n\342\206\273\3226]\275_d\327<\332\222\363=jC\000\275c\370\n<\265\200\004\275\351\363\244=\243\020\206=\001\177A\275\243\267\256;\036X\305<h3\335\275G\006I=\317\022\030\276\371\206\013==d/<\333G\023>g?\241\275\366\007\263\275\200\017\n=\202>\004\276m\3469=\"\213,=\006\271\032\274\226\2356\274\r\225$\275f\237\221<\265\006\323\275P\201\203=\263R\210\275!*\010\275(\375]<\237\207\016<*+P\275\213|\327=\340J\351\274Z\341X=E\353\024\274R\254 =\235\010a;\022%\361=\315\262L<M\201\240\274\372\253\215=\316\264\340=\274\262\250\275\233\005\231\275\313\205\222\275t\006H;LB\304\274L\312\225\275!\315Y=\227\352\211;\273\345U\274b\233\264\274:\344\014;\312\243|=\205x\341;\273\304k\274\005\020\324<\363\302\247=\n\257\305=\337z\021\274\202\026\366<\262f\001\275\350\251p\275\275\002\234<\204+\t>E\315\'\274C\221\270=\325\351\242\275\357\002\332\275\265\034\007\274\215\031\375\274\010\237\001\275:\357\261;\002\260%\275.rV=\205\013W\2754\374a\275\003\3658\275\'\217\252\275=\327\370\275\374\340==\373\255\376<2y\226=5\002\226\273T\243\220=\276\331X=\277\354\235=G\003\222<\036\213\222\2750\013\375\274\332\025\267\275\270\266\000<\230\334~=\331h\322<\206\343\301\273.L(=|\030\310\274\250,O\275:0\341<\353\363\223=\236\270\007>\016\377\333<\242\361\256<\230,\007\276F\261\254=\301\274\311=\356a\325<\001\033\177\275\037\220B=\212%+=\310)g=u\212 \276_\312\262\274\225\260\356=vcQ<k\342E\274f\001\017<\207\014\275\273,\356\312:\333\227\262<s\340\305\272f;\270\275\240\006\211\274\336\010g\275\301\325\323=\006\362\230\275\243~\271\273\254\303\252\275\r\216p=F\315\022>\346a\256\275\356\357\301=\315&\343=\360\221\251=\251o\203:\244\236\221\275b\262C\2754\245\376\274\340xn\275h\234\315\274\235Y*;\222\224\024=\033\003\022>\244\2345<I\312\227\275\003\332:\274\207\201y=m\227\275<\331\347\310\273-x\004=\344\276\362=BK\n>\320\222\312<\351AH=\250(\237<\365\321\221<\032&\211<\027*\272;`A&\274\2333\277<\347\302E\275\025\236<=T\252\226\274w\226y=\023}B<\010Kd=<\026\007>o\221\205=r\206F=\264u\355=\251\236\313\274x\263\251\275\231\005\020=\360I]\275L\244\233<\255\343G<\242z\347\274\272\325^\275\275OQ\275\030\004\201\274\300\036\310;\300\025\231=;h\226<\037\312\300<\254\255R\275l\326\240\275y\243\320=,@\316\272\207\206\322=k`\225<\023nu=\322\201\031\275\251\202\031\274L\320\220=\324\r\237\275m`\001<\216\343\231=\031\215U=\360u\206=|R\224\275\306U\032\273\370\006K\274\320\243\344\275\272\366\334=r\002\326\274\212k\035>U;\026\274\346\020\223\275\234\345k\275\315\345\215\275\314Y\024\275\362\304\210\275\364qK\275#2\252\274\222\276\273\274\023\t\273\275\310*\023\275V\214\206\273\206A\032<KT\241;\262\376\024\275D\206\037\276RM\237=\301\275\r\274\313T\220\275\356)\220\274[\303\216;\333A?;\0051\207=D\'\263\275\341\324\201<\346\243E=O\3643\275\254y\302<\261\312\234=m\325\337<\206\265(=3\217\007\275\005\351\014\275\032F\311\274\216\251\014=\236\337f\274\315\340\320<N~\273=\244\320\340=3\247\276=\234\312\255<\215\271/\274e_/<\010\374\007=t\346\234\275\317\272\177\275\031v2\275\030\262\201=\010\331\233=\246z\243<>>\024\276\014]\266:h\1775<\270\\k=\225\227\377=M\217\344<u\267\004\276?\203\245\273h\r\367=\314T\325<1\227\032\275\3741\344<\362\031\324<\014\274\326=\336\377\263<H\314\023\276\3452\220<\255\350\227\274\014b\201\274`1Z=\002\261\307\275e*\241\275\370?\262=\207,\254\275\031\252\013\276\255\027h\275\031u\362=\251\256\204=\275\267\253<;\305\267<\260\367\201=x\266\343<\232\230\215=G\354\213\274CpS\275\352\203\370\275R\315\210\275\241Q4\275\227\n\232=\231\nb=\272\331(\274\302[\260\275}\3133=\252\257\230<\311\264\034<\203\206)=L\225r\275\255\371\035=\247t\253\275\200\327\022=\234+6\275\024\376U\275M\025\226=\014\355#=\330h\031\275\367I/\275\222\221\'\275\202H\273\275\363\304\207=\017\337\204;\312S\035=\032\267\223\275\016\325\221=\323#b=\314{\220\275\030T\224\275h`\350;\321@\013\275\257V\020\274\260\336\000\275.\264X\275\305\340\364\274A\305\326\274\256v\\;\366\324\301\275\2234\344\275\262\247\001=p\233z<\"\242\205=c\005\270<K\273\344<ma\262\274UF\320\275\261z\005<\034\035X=\333\216\341\275\341\010Y\275\001\321\236\274\275<d<f\336\006=K\364\313;\301(\211\274\321C\340\273\027=\254=\362\231\005\276TM\311=@\304?\274-Xu=\027y,\275P\243\260:\367\305q=\306d|=\036\230\247=\331\327\340:\370k\222\275&\246\000<\037V\266\274\005\017]=9G\257\2749\025\242=\007\266\006\275\177#\345<\006\010\256\274f#i\275CnI=[\017\006\276%r\342\274\352\025\267\275<%s\275\230\t\227=\274\277\370\273\030L\353;n\034\216\274`\345\224\275\031\007c\274\315\212\032:\206V\213<\301C&\275\007`==k6N=:\006\224\274\227\354\320=\021H\263\275J\324\257=\220\315\266;\352B\377=\3371X=\3279f=\307vr\274\367\200\272\274\240\"\005;1~\242\274\030*\310=\310\225\315=\005j\306;\014\001~=e\006\313<*\311J\275\374>,\275Q<:\275\236i\314=9?\301\275\270o->\203<\377\275\2259\364\275\331\216\346=\000\247\220\274\307\377\320<\263\034i\275\351\206\303\275\336S\310=\256\302\256\274\001\237\364\275\245\370\224=\252\243\316<\340\252\035\275\357\213\266\274c\253 <\246\250\257<@)\036=]ZS=;\270$=r\235\205<\332\251\021\273%\027\255\275N\242\342\274\250Z\224=\340\337\031>\303/\257\273\\\367\252=\277.\217<\366\350r=\022\007\320=\246hp\274\271\274\370\273im\244=c\333\260;\300\030~\275\213\031O=\202\000\312=>\307\324\272\021\304v\275\001\360u=\032\211\213\274\003\211\276<\372\260*\275yo\037<*\345\324\274*\206X\271Y\001\313\275\363\247\330=\271\230\320={\362\271<V\301\334\275\201\201\032\275\3114\245=\343d\024\275a(\254\274\336TN\275\344\323\226\273\025\275\305\274D\177\004=\002n\256\274\2569D=\210\244\207\273\007\034V=\245z >FH\007>j\3060\275\331\253\036\275\230<\263\273\231\341\303=p\356\236;\006R`<\003b\223<`\\\210=\220\315\306<vX\253=\367\242`\275\014\3319\275\256\255\r\275\340\257\030=\'\325\003>~^\256<I\353\367\274\356^\333\273U\356Q=8\370\332\273W\343\316<\312\350\253<\007\r\365=!k\217=p{s:d\273\250\274I\352\202\275I\216\321=\t\252\223=H\027B\274b\210\004\274 \224\325\275D\316%\275\254\273!\275\2761\245=\347\253\350\273\307\000\006>\226\312e<\374-9=wr\276=\215\023\242\273\221E\254\274\034\243\220<\200\341L\275\257;\373=\243\240E\275\031l/\275\3767\242=*\221\340<oS\214\274w\223u\273E~L=\320\353\250=#Y\206\275$\353\014=!6\207=C2\365\275|$\001>^s.=|\334B\274<\376\207;d\025\036<\241uB\275K5\340\273\373\242K=o\224O=\213\342\006\273\324\215\207=\240U\002\275P\247\337\275-%\213\273\3445*=\301b\223\274\027\366\000\276\257 \301\274\345^\007>\303\t\200\275\010G\277\275\276\034\320=\203 \236=\234\333>\275\004\217B\2755~\234\272\333T\212\275\222\315\303\274\250\034?=\256\031\030\275)\314\004\276pm\343<\226u\032=_\233\377=\300\204\206=\371\373\205\275\034\331\222=oe\033\275L\302\036\276j!j\273\267w\014=\304\306v=\353\364\305=_\213\316\274\3779\240:1\010\324=\250\251\250\275\3071\275<\020B\342\274\206oy\275Q\341R\275#\351\226\275\217\352T\274\244\304\006\274\247\274\223<\n\2175<d \265<\017ff=\234\205l=\361v\202=\003\352E=\201\214T<y\3177<\027\252\253\275\371&\030=-\342\266=\036\370\336<L\3121=\377\332 =\\\177)\274\227\210\021\275\245\363\204=\352\274\363=G\307\320\275+\273Q\275\362\315\370=\267-1>\347P5\275p\252\027\275_\266\244<\002\352\010\275O\004\264<\353\364\032\276\272\"+=w\372d=PU\002<v\327*=\340*\236\275\202[\226\275{Uo=nF\205\274\316\230Z\275\265\037\263=t\005\361=\352\361J=\346\315Q<\302\034\010\275\321\313\220\275\007\037\200=\2237q\275\007\"\305<)V\t\276rA\314<\257\205\265<oy\253\275\373\345\310\274\3450\205\275p\351A=\r\'\205;\037\256\234\274P\301b=\203z\352=&\335\'\275|V\030\275\233\207X=\334\020 =\271)/\275\023\'7\275\363\030?=\034\375\355\275\213/B\275\311\346\252<I\035\322;\233\301\275\275\021VQ=\027\013\237\275\325\340\021\275\005\306<\274\001\220\351\275F\354P\274)\260\266<\257\325\036\275*\036d<f\t\313<\323D\210\275\265\311\213=Ua\201=\006\262K\275\247\276\246\275\251k\035\274G\344`\273\340[};f\200\017\275\037\303\217\275\316Iy\275\367x\327\273`\274X=\005L\326<\361\363\251=\331>\023\276\"\272\237\275\210\317\202\275\372\250\207\275\307\022\331\273\t\035_\275\275j!\275\261\372\313\274\214nX=Z\223\231\275\220w\212\273T^q;\330\216\013<b$C=\315\2346<e\000z\275\t\257\223=W\024j=\337\013\216<C\303\247\274\371h\323;\277\334\324\275\3640\2248\177&\225\2745d\200=\210\'\014\275\004H\223\274\2233\030=>Tf\275y\020\346\274\356\357\253\275\237\362\247=>.\346;r\355\025>d)\317<T\032\373=\276\313\002=L$G=.Ew<\274\233\226:\330\334\322<\007\037{\275\350\277\330<_u\255\275\336v\255==\301\245<\007u+\275]\232\267\275s&\013<\370\374\221=\234\005\224=\224>\t\275\322e\372\274\214[\204\275\023Z\236\274-\264e\275\002\260\327\274^r\317<@\252\343<Lq\334=\346\355\304\273\2130\027\275\320\007\200=\003\342,\275Wy\021\275Y\"\311<$\210\233<\334\306(\275/<\314<\363\262\314<H\251O\275\177\210\212;R\346\2329\304\301\250\273\036f\260<8$I\275\377f\232<\230\226\201\274\271\210\257\275\222`I=\275\212\213\273\250\230\301<f\022\221\275\010r\364;X\006\251\275\017\000\010\276\007\220n\275T\247=\275\300\231\334=d_\024>^\'\004\274\310zs<FO\007\275\342\367\374\275\373\256\344<[0\001\27696\334=\305\035\002;\034\353\341\274\315@\361=t\321\262<\224S\261\275\377e-\275\230\024\004={l\213<\017\243\370\275\270\332\022=\304;\314\275\377\031\376<E \n\2758\363\001>Q\312j=\335V4\275C$\322\274\316\337\332\274\346\237+;\261\242\321\274\274\253=\274^\034\343=&\330$=\031\271\357\271\217>\027\275\270\2748=\276Js=\246\346\177\274`\206\213\274\241\206\020\276\024\035\364\273\276\377\324<`\265 ;n\266S\273\204\336\034\275\251s\231<\312\350\010>p\371\"<t\345\257=\006wi\275\271J\373=\215\0105\275\327\255\307<=\004\203\275\314V\316\275\2046M=P\265\255=k\025\014\275\"\307t<\207\260|=\365\346\014=\246`\307;{\314\203<\203h\217\275C\177\233=2\267\372\275\\\334\031\275\301F\304\275\027i\033\276\030w\315\275/u\033\276\230*\n=_\007`\273\3147\232\275\233\376\023=[\230\013\275\215\230\223=\261[\201<\302\013\250<\rlX\274\303\204\275\274<\345\325=\254\352=\275\327\\\341=%z\365\274q\"}=Eb\n\276\370\222\373<h\250\016=\362!9;\036\247\263\274\334\236!=\240\345\217<\"\213\234\275\237s\035=\367\017s<\237:\014\2755~\351\275\274\343\354\275Uj\036\275\364\367\021\275!\\\264=zd\333\274\266n\"\275\220\036\"\275\266W\245=l\304\215\275\203\220\220\275\330\317\231\275l\301s\273\315\334\'>-\351\263=\020s\322\275N{l=}\216B\275D2\'\275\374#/=\223\227\250\275\363\020[;\234\270\331<\237\214W<\013|\254;0\224\225=\211\312\227\275\366\233}\275\365\3375=\233\\\314=7e\264<\2133\300=\205\332\237\273\301 \030\273J;c=O\345Q\274\365W]\275\007m\024=\360\215\021<K\213\304;]\027\021>\304$\366\275\302Z7=b\346H\275b\213\372\273\300\364\032\274\016\320\356\275\'W3\275\361\355\321=4\371\237\275\306\366\010\275X\356\270\274?\201\003<\230\331|=?m\354<\324\002=\275P\014\245\274?\261\216\275L\346\324=F,r=4^\275\275Q\341\206=h\301U\274YB\263=\231G\232=\306n^\274{>;=\307\200n=\017+\343=z\264\337\274\007]\264=qx.>!J9\274\3556g\275y\021\004;\374wy\272\000\267\333<\344Pp<\326\330\3308ln\256=]+\366</\235\207\274\307\223\204\275\002qC\274\347\036\333\274\024\205/\274%U\216\275\306\215p\274\241\036\222<T\025\204=\277N\022=\312\321\001\275C\265\267\273\000\327\200\275S\003\267\275\246?f\274\030\351\020=M;j=\321oF\274\324\234:=\242.\310\273^\021H\275\314\r\327\272%\323\223\274\254,\262=\030\257\371;\031\021\212\275\277\253*=q\017\241\274]\304l\275\251*\324\275\323\343v<\356A4=:9\376<\357\344I\275Z\311\013>%\211?<\243\244\252<\372n\347\27594\316\275\260e\241=/\016\310\274\371p\226\275p\224\275=W\002\357\275\362=\002\275\231\310\243\274\360\300\362\274@\224\306<\253\322\220;\372/2\276\305Q\214\275y!\237<\323\370\342<|\233\207\275@d\021=!\026x<\327\336\352\275\254\314\202<\rY\230\274\322\036\241\275\335\225\031\275\305\301\r\275!\350\250\275\347\240X<\363\214\256;>,\230\275\214\211\261=\022>d\275\346\311^\275\220ru\275\023wn=N\262\216\272\022(9\275\266\216I=;0r\274\344\212@\275\02677=\263\257\377=\356\226\337\274\025\343p=\\l3\275\256$\205=\004,\\\273\210F\231\273\245*%<\221+\035>e)[\275\020\325m=\327}\217<Gg\004\276\254\337\303\273\201\017@=\226\246\306\275\276\252\245\275\024\216\257\273O\270\320<t\002\313\275@.M<\331ga=\372\\\336\274g\356s\275\2241`=\331\262\003>L\350n<xm\250:\204\332\034\275\330\004U=F\351\270=|\343\316\274~\261\350<(\310\373<Q\013\232\275\177\225i<\263\243\216\275B\347\301\274\265P\243\274\255H\032\275\211\302\022<6\343 =_\262\306\275&\315\265\273\035\246\370\275H\253\333<\010\303\346;\370X\347\275\013\350\276<\026<P\273\t=X=\036\270\006=\301)\253=\200%\005\275\300\013\344\274h!\326=\312\326\010\276\223\231\263\275\230c\230\275\225\006g\275\214\331\311<\266\033\002\274g\001~\275{vQ=\026p\224\275\t}\204=V\377\244\274Rd\256\275\'v\244=\267]\264=\032F3=\351P\366<\224\222b=\324\300[<`%\213\272\217\"h<\013d\251\275q\010\211\274L\243c\275\377\362\200\273\257\002\310=\230o\200=\343AO\275\336)w<\213\320p=\315\214\264\275Mu.\275!H\217\274\357\275\305\273\317([\275,\363\335<+a\230==\365\367\273I\234\334\275\225\250\304\275\320f\312\275\252\223\017<xcb=\227(k\272,$,\275EFx\275\334\002s\274\257\257z=X\337\211\275\004\"\307<\347@\377\275~i~<\360\317k\275\331\224\221\273uO\234=]\221q<\001\n\021>\307a\211=+\030\236\273\010@\010\275p\252b\275\037j\364=@\177,\275\322!N<V\304\204\275\237gi=\243\227\323<\340w\345:\020(\234\273\262\352`\275\033\001>\274I|\267\275\362Wk\275T\215\350=\224\307\352\275\"B?=.a=\275\241X\274<\373\317\030=@+N;e\204)=\364-\247\275\360\254-\275DSk\275\212\274\247=\305\034\027<\035s-=\0317\303=8\022\355:\025\304\202\275J0o<\004\205\201=6En<\215\361Y<\315\205\272=\312\001\313\275!C\245=\200\333?\275\274\225\216\275y\273\177\274G\352\033\275w\001\224=\r\252\335\274\374\260\252\274\212\371\211\275o\370\245:\331\033\333=\367\374\272\275n\t\266\274M\217\037=\252,\240\274\000{$\275\0374\212\275{\022Q:\322\326\207=0#\333\275\235\374\304<\020\002s=\347z\274=G_\324\273\351\314\221\275\373\344\020\275\334\227\001=\010`\002\276\332\307*=\265\231\351<X\342T=[0\026\276b\275\331=\030\270\223\274/\n\013<\362\204\307\275Z1\004<5\264\035=\000\207\301<q\245\022=\332\271\221\275\363\307\377<\354\313\263<\337\335\032=[!_\274 \nH<\240T\331<\223\313\n>?n0=i\"X=\023K\215=p\376\306;\277X\206\275\365b\256\273\032\004\025\275.\310\317=\222\261O;\356\246U\2748d\376\275T\017\215=k\345\030\275\247d6\274;\306\026<\250\211\t=\316D\020<\202\2663\275\222{\302<\013<\374<\243O\215;\323\345j\275.\025\314\274Qa\253=\270^v=\221?\221=\235\245\224=\240\0031\275\202\266\342<\200RP;3z\227=\370\246a=O\256\t\275\204\217Y=\321\251s\275\274\335\341=_\277\025\275mc\216\275\"\264\237\275\2140\236\272\213~\277;*\235\220\273R\231\376;\017P\315\273s\214J=e\320\206\275\223/\313\273\321)\256\275?\241$=e\216g:\326.\243\275L\235\375<\177Z\255<\267\346(\2754\006\264\275D/\200\275\264\304\037=\215\202\r\274ru\344\274\237\210P=\032\354\246<\001\"p\275\223h2\275\035\240\006<L\237~\275\373\337^=\204Xf<\310\232==Y-\320\275\365\204\330=\216\303\271\275\'P0\274\325h\255\275{\254\375\274\315\\!\276\277\245\202<\241K\372\275x\036\372=\3116\206=\327\025z\275\2722R\274\200\335=\276\0028\210=\274\327\257=j>\340\275\247\361\327=*N\243\274\225\036\313=\275\237$\275\020v\367<\002\250\240;]b\301=\'\002o=K\016\033=cQ==\303\200\311\273v\257\212\275SZ\001\275d\307\256\275{\013\262=@\363\215<\303:\261=\344\234[=!\233\322=\276{9\275\020\270|\275\333\204\211<Fc2\275\307\247h<W\363\320\275\255\311\222\274])\232=\0028\316\275\361\025\231\275f\202\017=\321\361\003=\306\307\264\275\266<\310\274\303K\321\275\000X\304=\023\237\227\275\302ky\273x_<=W\232\263\275\"\330W:]\037n\275A\202/<\315/^=YG\234;\324\201s=T\306k\274\276\2020\275k\3360=\355h\237<\272\344\201\275\3719\"\275l\020\031\275g-\013\276q\347k=\230\027\337\2746@!\275\247\327\311<,\361\217\275\001\206\301\275M\227\225<\255\242\232<$^\345<\330S\326\274\351\347\332=%\226\201\274c\r\261:\025Ff=:\007\002>\252\301\257=\026\360\031\2758^\004=D\025\225\275\233H\205<\234\355\213=\010\350\213\275\003\031\334<\257W&<\230xu\275\026d4=\366#\024<\"\327m\274\336\026 \274\275\343\006>\371@\n\275T\236.\276\004x\255\274\317:\345<B\250/\2764\213\271;F\007\2228>~0\272\350|\376\2751\333\307<\210\215\324\275u\\\233\275\221\014]\275\361\335\275\272\266\370\241=\307\313\225\274\374c\300\274\322\210\255\275\205\367\254=\354\266@=~\016:\273\364wo\275\325\222\025=\375\034;<\337\247k=\272\202\014\275\247u.=/\210\036;+\364\350<\343.R\275\241\245#=.\321S=:\377\260=\362\335\245=2-\305\273.r\224\275\217\342\361\274\2140M\275\276\224\377=\224H\001\276g\223\232=\006\260\235<\272+*\272O\376\005=\265\014\336\274\303\2632;\006\031\270=kO\223\275S\241\357\273\216M<\272\340\324\'\275\361O\220<\\z\352:t\036\313\275\"R\014<\256\243\002\275\345\333\237\275\236\345\233=h\3568\275\\O\304=\032\236%=\364\326A\275\266\031q\275`C\225=\rF\243\275Ti\200\275\315\231\316<\334\243\301<$\215\213\273\345\'\256<\315?\205\275\334\024\332\274\347`\003\275u\236!\273A\213X=\273\270_\275v\241\204\274\000\036\335;\004\263W=\210\226y=`{\323\275l\177\024\276\r\034\035=\335\266N\274F\373\202\275\217\016\327\275\304\317>=\252\311\242=*\006\237=\027\003\364;\005\332\270=^\303C\274`\317\221=\303A:=\022\354m<\003\316,=\246\033\236\275\326:\256;U\227\306<\260\315G=\327\362\014>\262\334\255<\344\231\367;^\211\202<\033\365\264:\266/\367<\337\214\241\275+L\236\273\334!f=<\261\255\274h\340\307\275B\334\246<\244\360\300\275\344\351Y=\321\"\365\275-\327\212=\177\327\026={\324\266;\003Y\343=\361\202\021\273\3469\217\275\t\333W\275\006\366@;\020\222\312\275\275\253\260=4fs\273,~\006<\361d\000\275\326\021\213\275<l\003\275\032iV<\004\234q<\210\230\333\275\212\355F<O\242\010\275\375\361y\275W\354\357<\'o\024\274\025\354\350\273\305\253\250\275\023\300\357<\374]\205=1\033\200\275\203\235\351\275n\203\250=$\204\200\275\205\252\201<\n\227q\275\217\204\257=:\037\242\275\270\353\233\274q\312S\275\212\355\263=\2041\225\275\030\377e\275H\0131\275\302\003\211=\247K\004<\024\254M=\237|I\275\001\341\242\275i[L=\0311\266\275Qf\313=\204\372\260=\310\335\002\274\324\316\347=\304\366\323=\3407\230=\322\307\242=\013pk<T\252\227<\221\251e\275\027\026\203\275jX\343\274\376\371\203=\215\334\342\274\300V4>\032\351\204=\346/W=\034\245\201\275\017%\345\274\037\243\226=\334\274\211\275@\367\270\274\220\342}\275N\347\273\275|\217,\275\316Vj<H9\023\275\027\007S:\036h\321\275~\022\254=\300\344\263\275)\350\256=\205\034\313<H\201\272\273\354*\336<\014\031\244\275\001\234^=\023\322\222\274p\324\226\274\252\233\270<Q\2255\275\257^D=\205\331D;O\210\033<\362e\354\275b\312\242\274\350K\205=\270\t\352<\250!\'>\273\355\264<\013\246A\274\r\221\304=Lh\250\274\3265\t\275\261\317\017<\230\022\177\275\024\306\337;fX\266\274[\030\342\273\2271\302\275\177\310[\275\344a\364=x\017\354;\356\037\205=\261\2259;]M\177\275f\352\216=\025O\271:\262+\207\275\310I4=hYj=\336\270\340\275k\314W=\202\010\334\2749\177,\273\356\231\313=\374,6\275\325\206\346;v<+<\006\275\003;}\022C\275l\022&;k\010\262=\003\'\361=\2515W\275\013nw=\n\021\225\275)Y\231\275F\211\301;\005|\301=4\267w\273\234S\314=%o\n<r\001\007=\021\224\321\274\277n\034=\270|\306=\231;\217=\231\355?\275\202\211\212<\223\3230=\360\010\315\275\277+\010\276\002U\">\312 \252\275\367\030\313=\347N\005\274\267\205\310<\277\024\000=fg<\275\345\275\243;4\037\004>S\2604\275\204\261\217\275\033\030\016=}[\333=\261I>\273\207\332S\275F\035\264\275Q\364X=&l\347<\350\344\t=6+4=\315A\305=\275\306\314\274\374\375}\274\207\207b<G7\010\275\201\271\272\275)\345\276=\343\035\307;T\213!=\342\377{=7g\203=!\373\310\275\016s\352;\350\311\'\2756\013\032\274\235U\233\275P\302\010\275\274\271d\274\336\0247\275j8\335\275\353\321{=\274|\235\271\336\201\262=\350ca=\033>\230\275\237v\343:\016\0346<`\216\016=\340\037\227\275\025{\t\275\374\313\242=\310E)\275\377\330\020\275\344\262h\275]U\004\276Wd\365=\225?\222<$\251\205\275u.\233<\177\301z=B\033\320=;\027\216:\004\364\311\275\222#\346;u\266\214=\320&4\275\226\237\227=\207\363\231;sE\230\274-\336\033<\306s]<O\221>\273I*\235\275T%L\275U\361\271\274b\305\027=\351@\201=!\363I=\230\3265\274\033\233\257\275\316\375\001=\203L7=\205,\250\275\362%\371\27307\351=\210\214\230\274\365o!=O&\364=4\216\300\274\345!5=^\3428=\006MP=\255%\264\272N\266Q<#\341B=\303\271\216\275\257\322X=i\021\000<|\036\223<\312e\262\275&1\307\274\264\203\237\275\345{\207\274\3656\010=p\234^\275\005\230\317\274\177\027\006=\3076\374<\377\371\002=|M\304<\327\222\204=n?F\275\243$<\275\006\223\234;\304\'<\275b\273\035\275\004\030\260\275\233\202\031\274\3279\000=,S>>\007\313,\275\356\274\005=^5\222\275\037\247\025\275L\326\216=m\336\n\276\360\362\273\275\300ti\275K\327\272\273w\265+=c\"\021=\247\322\024\275o`\321<\314P\214=`\317\014<\033K`<\017\200\316<\032\313\032<u;(=\307q\035>\340\353 \274mIj<\326\254\243<ijy\273\353\372\334=\220\245\331\275\330E\202<.\347q=\026/\310\275\374R\260\275\263\311\214=r\346J\275\002\314\245\275\311\375\017>\227\207\330\275\252h\322\275\036\217\262<\010\255\231<T\246\253\274\304\340\317<\264\334><\3664\215\2756)\031=\010\254[<\365\025(\276\210\256E\275$\030\225\274\033\265\203<\245(\232\274\rM2=\226\335\235\275\374\024\257=-6|\275\21294=\203%\312\275\2325\323=\307~\017=\251\331\275<\367\312\233<\366\'\025\275\370\375\234\275\311@\326\274\367\236\355\272\023\007C\273`\370`<\371z\023=\247[\003\275\246\3642=y\353\234\274\271\204C\275\246\260o=\231\316\214=\034\201O\275k\336\365\274b\2626\274\027\031\212\274\360\354\357\271\330:\311\272\341\240\220\274G\215\327=\034\036\023\276[\224\031\276\326\225\014\275\341\227\215\274F\3053=\3061~<\005x\204\2737\315\027\275n\277\r>B\n\327=\264\332\200=\204\321\202=\372\210 =5\006\210=a~\241=\265\023\276<\020\366\177=c\010\347<\327\024\322<I\206\336<Wz\200\275u=\231\274\321\301\013\276\313\231\331<\257\231\221\274#\363c\275\226\246\210\273hd\270=\333\213\337;tWx=\004\013\034=EV\217\275\326,\354<\332V\033\275\227\232b\274f\002\313<T\234\254;8T\344\275t\215\206=\031b\307\274q\304\n\275=\317\315\274\217\206\007\276\345P\200\275\225\270\023\275bQ,\273\330\202\202<\253\021\241\274\322\210\335\275\007\362\362=\375Rp=\325\322\210=\204\016\205\275\\-4\275\240N\265;\272\236\220\275\347\002\207\275oE\275=~\306A=\220\265\023>\370\200\022\275\367\372\203=\314\0257\275\030\223\237<\314]\'>\321\352y=\031=\360\274w\343G>wD\224\273\337:\311\274\300\261\204\275\246Kl\275\224d2;o.J\275\0023z\275\272\277\004>\007\257\033<\221\003\037=\327\270\360;\313\240\020=\244/\2579\200\315\003=8e\231<Pw}\273\306fh=&\241:\275m\022>=\337\307\'<x\004\367\275xH\271<\253\326\244=07\246\275\210bG\275(c\312\274kB\237=N\303\237\273\027\345\231\275\031\032M<X\3119=\331n\255\275\262\014\003=\230]\274=,D\t=\026\013\235\274\2643\017=\322\365\213\273\320\233r\275$\003\221\274\260\256r=.\276\214\275\367\300\006\276\013oC=\240Kb=\266W\206\275\'t\310;[\272m;!\306\253\275\277\321\275<N*\031<t\363\230;\330\327\254=\241!\000=\036\346\214\274G\t\247=6\305\025=\253\366\004>\272\321\206\275\027\227\370=\345\340q\275\345\373\266\274\224$\321=\007\204\243<\357\357\222\275\364dC\275\316\030\023\275;\007\301<T^\213<\251\210o\275,g\213=\\m\330<\331\236\237<.\247\273=w\262\231<\270\032\005\275c\226\215=K*\021<.\010V\273O\304\355\273Q\2416=\034\365\246=D\302O=>u\325\273\336\227w=\371\205*=z\331\030\275\302\351W=|\251\246<\230\022\345\275\254\262\316\274NwV;\225\322f>V\035\000\274#}b\273o\226@\275/\216\005\275\2157\304=\007I[=\236\355\270\274\317\250M\275\013\037\234\274\367-\233=\005BK=f\336\262\275\371#\004=m\313\265<\344\235\342;\261\303\225\275;,\026=\005>\255\275p7\202\275\017w\303<\"\320y=\014\351\320\274\263h\213=\322n\026<5\276\014\276\216\201\004\275Fh\250\274c7-=\343\303\n\275t\245\267\273W\346\231:\221\r$\275\225<\022\275\360!<=~\263\235\274\032\000\026\276\273\016O=Y\334r\275\341\237\264=\236\365\030\274\303\022\273=\306M\200=(\326B\275N\222\213\275\275h\361=\356>\261=\353Bx\275O\014\362\273vi\252\273A\006K<\177&0\275\235\351\250=A\002\307=\rU\270\274\233\364[=\224sU\275Y\323\306\275\233sU\274&\235\347=\346\020\236\274B%|\274\315z\3139e\227\356\274\337\227n<\202\205\214=,3\273\274W\273\256\274L\304\203=8\tD\275\021Mc=\241\264\357\275\241\205\315\274b\241\317\275\362h\374=,\230\316=|\202\237\274[\230U=\021\362\031\275\311\t\200;\357\007J=\353*z;\231\306;=Y\'\035:\016\014\354\275\212FS=\300v\254<V\030\021<\374\230V=\310\212\324<Md\256=\212\333\351=\352B}\275\337\363h\273\265\0058=4<\204\275_s\000=y/\016=\207\316\346=\037\207\031\273n\310\022=\213V\344=\013\r|\275\2209\024>\310\tU;,\307\216=5\2725=\r\032\260=\275\277T\275\225\337O<\306#m\275t\304\266\275\001\213\210=K\243\334\274\352@d\274\t\371\212=\205\346\263=\023\327%\274\177\224\202\275\332\255\213=\326\351\324;\215\221\034\275\026d\353;\r\311\301<\340\260\267\273\304~\220<`*\205=\237\217\310\274?\224\321=\214\337t\2753`\r\275\036S`;FT\206=z\240\240\275\375\021\256=\016\002\234\275\2435\231<\007K\265=:\0035=\227X\204=4\340\251=\010\265\317\275\332\217\372\274\326\234\t>4\244\324<\007\033\246\274\202\275\033=\252\303\217\2745\312\242\274\202\2325=\007Cr\274,\305\237=P\034\261\272\361\365\364\274\256\301\235<\341\026|=\325\3011=\232\341\r\275F/\257\275\'1\250=G/\303<Q\202\346\275\356\316b\275\222\343\007\275\022_x\275\203m\200=mHJ=\273\n\203\275\255\204d>{\242\252\275\253\260\234\275\235\000\202\275\341\247\371\275Y\347\337\273\2575*<*\\\265\272\025}\\;\010\325\256=]\374\277\275i\'.\274\356>!=\327C\236=\333\267\235\275\253O\312=\211HO<g\341\253\275\277\322\213<\330V\025=\255\357\205=+X\261\274\320\226\225\275\nG\343\275i\3210\2733\004,<\342P\200\275e\177\335<%A\001\273(\016\223\274\2274\\=\312\013k\275\204\233\314\270\035e\342\274\t\254\267\275E\232}=S\021n\275\337\014\250\275\264\272S\275\363\347:\275\352\016\252;z\212\000\275\337\311\236=\226w\214\274\001\021E=\265\265\304<\201\271\306<\362\213\221=\303\330\215\274\025\344\366=\351e\351\275\220}k=\250\2754=1\373A\274\352ij\275f\203%=\316F\364\274)\262\020\275#\224\255:\237\220|\273{\314(=\023\353\253<f+\252\274C\262\204<\340\347\351<\014\211\017\276\315\231\201=?\372\220\275\342w\265\275\275l\211\275T\212><\311\371N<#1\225=\344\344-\275;f\270<\020i\244=L\313J\275G\301,\275\201\213T=\003\212\205=7\325\237=\346\276[\275\255\357\t\275{\316\234\275\271\253\212=\252[t\273\036D^<\214F\275<|\032\274\275\240\254\002\273\010\230)=\207tP=\243\233-\275\230\374\026=\001z\304\274\235\377\221=$\337-\275\251\002)\275N{\024>\253\220\3178=\301X\274\241\234\235<\306\026\204<\240\335x\275$\261\273\274z\002\311=i\264\247<\005\252\345=\246\222\201=c\271\204\274\303\311\226=\354/C\274!\251\226<1g\355\275\3042x=\264\0325\275\021\344k\275A\r\323\275@\257\330\275Im\302\275\022ON\275t\220\221;NT\370\274So\'=\277\032\216\275\320\362\216\275\253)\347\275N\201\337=\232U\264=mV\021>I9r\274k\245\371=\305\270\"=ZeE\275\006\335\335<DE\020=8\245F\275\020\211\373=.\206\337;.tN<<\366I\275\306\303\335=96\030\275=B\277\274G\0310=\000\230\220=%/\341\275\232B*\275Wm\016\275\t.\273\274\223: \275\204yz;\016\375<=\215\266\257\274\'\361\037\275\211\224\377\275]xK;\375*$\274n\217o\275`6V:\370\334\221\275\315\330\321\275~\273\342;p\330i\275&`\332\275\302?\002\275N9\350\275\203\324\'\276y\241\013\276\273\372%;\000\375\016\276~C\036=!h\211=\000\351\343<\021\253\245=\3208\014\274\2416#<\027\017\000;\364\311\263=f\275\"=\366\021\'\275\003F{\275\002m\025\275}\007\032=\006\005%\276\250(W=6JF\274u\355c\275=f6<\266w\254\275\240\002\024<Y\020.\275\354{J\275p\340U=3lV=8\032\335\274\334/#\275ZF==\343D\010\275\305\002\247;#i\022>>\223v\275\225\376\242=r\266J\272\311\226\021=\325\007\377\275\036]+\275F\"\354<\2229\352;Z\231\342<\351\005k=y\022\374\273x\002 \275\275\354\300\275D-\021=\360C\344\274\007#7\275u\275\257=\303\343\301=\343,\271\273\204\276M\274r~W=\204\326\240\275w\\b;\227\\I=\214\022\306=\234\314u=\236\245E\275\315\353=\275\260\257\031\275\324bq<\021\225\234<Z\301\244<1\222\025\276\254\374\247=\373_\031\274\256\354j\275v\222\276\274\033c[\275\377\271\227=H\305\245=\036\257L<z\016\314\274KP\373<\026\233\302\275h1W\275\251R\231\274\251\261\255\274HK\r\274\316\372\352<M\223\007=\352\022\306\274\364%D\275j\023\201=nE_=\373~\253=\025>\371\2742\253\322\274Q6N=\3073\210\275\340\243\215\272]1g\273\215\301\032=zO\264=f\277>\275<|-\275\274\220\273\275\344\374\271=\262\204=<\347\t\227\274\244\300j=V\020|\274\311\326\222\275\221=\204\274V,\274\274\336\010\265=\177\272\306\275\2454\001<\021\020)\2759\325\024=uS\331\274\373\340A=\201|\002>\371m\252=\240\244\225=\274Nm=\201\001\220\275\217p\226=]\374\313<\352\276q=\224\257\275\274\304\331B\275?\223\"\2737\022\344<\001\273\331\275\320\202\212\275\265\026o<\303\030$>?\034n=\241\272|<d\333\315\274v\246\246\275\2179\020=Jp\204\275\225\274\321\274z \336\275\252\267\326\274.\264K=\037C\252<\325g\301\275\306\036w<mB\225\274fZm\275\333\346`=\332\263\216=LZ\231\274\315\275&\275\200O\354\275\351k\226\2751W\275<\235\200W\275\024\205\206\275z\313\n\274\214\315X\275O&*\275(\3713=\'\3158<h\347\256\275T2\331\274`\226\217\275\211\245\242\273U\256\013>\266\002u\275\234\017\002>\007;\207\274Z\3153\275\245Xd<\321 \203\274\227\306\321=\253\225z\275g\036\212=\247E.<\305\2123>\234\037\r\275\017\030\260\274U.\212\275\323@\t>3\0001=yo0=f\277\000=!\254\310=\000\007\303=\343\223\231\275\313\005%\275\355\362\306\275\300\033\363=z\353(<\023\342\367\274V\323P\275F\343\216\274\246|M\274#>\027<\3138r<\302\245\312<6\332\240\275\351*\251\274\312\304\355\273,\325R=\007\372\314=\301G\037\275\305\320>\274\217|\023\275\342\2449=\\q\272\275\017\377\021<|\305p\274\247\027\215=\367=\031<\223\370T=^6\370=\036\037a\2749L\231=\375\3226\275\3546\340;P\243\360\273\236R\254<\305\234$\275c\246\216<\321\363U\275\233\216\276<\354f\340\273!g\300=&Q)=x\210\350\274j\204\377\275\231\276B\275E\317\032<\236\341[\275r\353\303\274\344\007\010\275\3459\235:\216\261\362=\233\001?\275;\273\212;\"\302\310=V/\300\273\313=J=S\322\367\275\256\027\302<\372!\021=49!\2763\231\003\275heb<T\"I=&o\232\274\013\002\034<\327\'\010>\324\212\302<\006#\007<\"\377\360\273q\217\232\275\2359\037\275\237:\204<\200\230\221=\025]{\273\003\344\234\275\367D3\271s\310\025=[{\366\275\231\363\006\27510/=7I\014\274\356\262\256=h~\345\273x\271Z\275\022M1=\244\217\000\276\222\245\327\273\211\203\330\275\303W\303\274W\316\314\2750\031\227=\016O\031<\266=\305\272\227\271&\275\300D:\275 \367W\275,Wo\274\222\376\215=N-1=w\022S<#\315\257<\214\261$=\230\022\252\275\363_\375<B\231\303<p\032\356;\023e]<\360\r\346\275\2274\215;\224\317\241\274c\222\304\275\366@\260=<p,<;\255\235\274K\322h=\3219,\275\305\323^=\311\361\331\274\250\235\001>\304\261\r\275\364\254U:\211\026\312=6&\020=Zf!;\365\210\340\275\363\302\340\275\234d\202<\326\245D\276\260\037Q<\025\033\342\274B\336\211<\\\020\273=\307&\266=\202\357\">W\300)=\203}\210;\334\274\245\274\220Dp\275\254W\001\275\342\362\033=S\307\323;\373\004\024;\233\032F\275\321\317!\275\326H\233=a\t\243;\354\nG\275\235\356H==\013\230\274\000d\235<v1\227=y-\034\274>\337\000\274\2545\351\274f]\237\273rbT\275\323BD=a\215\320=\035K\000\276\362\251\014\274^\020\005\274\017\345\304:\263\264\027=\337\253O<\352\010\315=\316\326\354=\031\2749\275\227>\374=$\226\221=\206\002\260<-\014\340<~\230\312\275\033i\202<\010\017\263<\344\\\007<c\013\310;\367e/><\003\206;\324W\247<\326\352H=\032(L<#9]=e\356\010=i1\222\275q\022;\273\217\357\230\274\024h\276\275~T\014<\264*\211\275\236\343\240\275\216i\324\274S\352\330\275\'\370\322; \316\302\274Y\322\235\274@@\227<q\374G=\273\231\333\275\3057\026\275X\376\263=\222\017\341=\234(\332<$\207\027\275\352\302k=\231\211d=\177\223\t=\324\030q\273\204\023\242\2750\233p=9D\016\275\312\201\303=bf\260=\316cI\275 8\233\275\217\341\327\275\2325\266=\013\362\350<\370\035\235\275\250\377\031\273\017\327\347=+\003 \275\0078\337\273r\310V<+r\"\275SN \275\261\322\340<\213F\222\274\303\317\331;{f\273=\267<\030=\253 \274\275\343w\365<\261*\277<x\305\212\275\031\177|<\271\213\237\274M\366\241=\263w\216=\244P\225\275\223\233/=\235\340R=\216\007\007<\376xQ\275.\340\342\275\205\310\363\275\360ym\275\324\314\305\275\016%\371;\315o\216\274\235\240\254\274\322\327\254<\203oo=\245\306\010\275e\313\246=7\351\014\276\214\020\315<T\001q=\231>\222\275\242o\331\274\013,\323\275)\201O\275E\346\354\272\256\321\300=\005j-\272E\222\205=G6\331;\266\222\220=\235\014d\275\340\273l=ve\001\275\244s\037>\025\317 \275\272\352\266\274u\216G\275GfI\275\010\203\033<a\343\n=\276\321S\274y:\222\275<\214\232\2738n\266=\327\nk<\245\257\013\276\255\3740\276\272\256\273\275]\325\334=\225\364\004\275f\221\235=\262\3479=\000\017^\273\317c\346\274?o\323:\305Q\341=R\030.\274\021I\024=\363\360\255=\224~c<\267&\357\274V\344\223={/\035\275p\250t<\247\307\201\275(\353\215\275\2054\332\274\3228z\275 \344\267\274\034\241\260\272\341\377\251<.\275\312\274\005(\206=\013\253\024<w\346\022:\311G\274<3s\376=\322\257\206=,\230\007\275\206\206\203<\224g\275\275\007\220\220<B\260\271\275\261\340\217\274\265\276*=*\211\275\275\025A\320\274s\214\214<\261\013\205\274\350K\006=\341d\372\275Z\203\226\275\357\002\367<\032\233\006\275\203\367\024\274 +\320\275\"\350\024=\007\356.\274*U\204\274]\353\244=\270[\031\276jp\265\275,\002\025\276$W\030=\325\023S=^\231\352=\276\177\026\274\247\304\314\275\252g\202=\320V\256<\201;\340<\245eG\275\324Q\204\275\316\025\342\275\2647a;J\307\225=\247\340\006>\366l\032\275\354\206\334:g0B=\010E\030\274\230u\265\275i\323\370<\257\347\276\273\217\325\017<\240t\350\274!\0206=P\346\220=,+\332=\241\343r=\273%\004\275\360\272\337\274\000\017!\275;\365\274:\236h?\275mU\202<\367\203\200=\335\351\322\274\312\261\000\276$\307\234:\231Im={/\230\274&\177\200\275\332\245\224=\204\005\206=p\356\027\275\251\2773\274\217\"^\275\230l\370\274x\304\001=\311\372\245=%:\263=O\3013\275\311\330\333<\211+T\275\255\177v=\277\261\312\274\352\267 \274\341\350^\275\002\231\203=\322\017J=WGR<S\227\234<\355\007\007=\213\317\034\275\263:\261=\355OO<\\\000(=\377=\337=\212Y\321:\005\241\201;o\252.=\233\017\202=^\000\307\274\302\253\230\275\270n\003<4\344\226=X\307]=}h6=s\353l=KC\231\274Y0\205<\315\004\243=\274T0\274\312\301\305\274\305\253;\275\215R\350<@\365\016\273\357\211\345<w\216\016=\252\244\331\274P\350\261\275}\363\367:\332\005[\275>{=;0.\372\2752\025\307\275\307\373\t\275\026\224\024\273@V\235< \000,=\262z\255<\177>\266=.\274H\275\347E\270\273\275\355\232\275\027g\211;Y\376\321<\223\361\331:\335\337\031=\000\317\240<\231#Z< \0172=7\302<\274b\317\"=\240\372\206\275\325\035\333\274^#\005\276\324\353\313\273\036\236M\275\274\225@<\252M;=-\235\024<(MM\275hN\320;\367[*=j\350\257=6\330\213\275\217)\277\275j{K\275>Mx\275yj\261\275\213I\201\276\272\377\303\275\316=\324\275k\205\257<a\000\320\273L\230)\275H{\221<F\273r\275m5\222=D\344-\275]\030\261\275H\0309\274\316\207\206=\303\213\003=\331\002\343\275tU\313=\017{\214<(c\367\275\374\223\027=\363\243g<\237=\266=\351|\257\274\377ZU=\305\035\004\273%rY\275\210M\207\275\n\014@\274 \'\316\274\367\220\354\275\326\3135<\001\350\\\275V\374\014\275?\377B\275:\020M<x\000\205<9\212\000<\222$5=M9b\275QI\300\272}\240#\275p\255\t=\301J\266<\3218f\274\205\355\032=\271\023\364\275\030\037\367\275\304W\345\274\021\3337=ze\\=\"\034\255\274,$\324\275\325\013\350\275\356\364P\275\025\334}\275U\236c\274H\307\205=^\241\001=\2333+\275e\323\212\275M\356h=\'\225\232\273x:}\272\257\222r=\312\300\\=?(\260=m\250:=2l\224\275A\003\256=\233-\352<H\250\277=w\241\270=\341\n\263;\241i\203=P\261\315\273\363\342\300\273<xy<m\006\224=_-\013=|\023\031<P\3532\275-\343\273\272(\026%>\375V\351=2g\325\274{j#\274\017\363L> \245\310=\306sk=q\320\212=\206\261\"<\034+\241=\216fE\274\267\362w\275\2109\315;\237\373\236\275\023\323\355\274\351\"\210\272q\262K=~\313\267\275+\330\020\275\200\331\217\275\212\034\201=\247\277&>2\343J<\364]\025=S\374\036=my\222\275\325 \363<\336\222\033\274\242\300\361\274\267}\344\274j\232\300\275b\264\260\275\305\364\300\275[i\321<\212\263\002>\035\"\022=B\302Q=R\226)\275\276\276\246\274\311\201\245\275h\226\330</\207\031=\031\317+=\311t(>\033x\216=\322\034\312\273\210\307\266\275\245\252h\275eI\364=\3616\030;(\307\224\274\261B4\275\033\312\243=\327oP\275\317\257\231=\006[)=r\325^\274m\240!=\341=\014>H\362\313<\236z\227\275I\367\t<\267\017\344\275e!\264<\277j\025\2756?\264<\233\010\370=}\227\320\275\244\226\254\274\341Wx\275\313\326N\275N\315\346\275\235&\345\274\035\205\351<\224\353\373\275\337\274\224<{\221\010<\256v%=\363u\305=^\007\363;\354\305n<J\017\232=5\214\027\275\265\002\206\274Y2x\273\r\316\270\275s\374(=p\177R=t\300\026\275\n\302\222=N\311\216\274\255T\235\275\177T\254<4\323\376\274\337a\225\275\355\366`\274\311\351m=W\241V;\010\032A=\350\311\303=\\\372\267<o\2572\275\203l|\274\224\370\255=\3213\371=(t\245\275}\370\025\273V5\225\273\2530\021\275^\220\224\275\3332\251\275\221\321\256<\330ek=\350\024A\275\216\345\267\274\2651\203\275\035\240\312\274p\200\245=\002W\313=\356P\315\275\317\364\210\274\024[W<\360(\253\274z\227\265\274\316S\032\275\302\226\224\275\"\016\271<y\350]<\205\275\316\274\2368\311<f\017\251\275:\325G=\263f+</1\327\275\367\341\355=\226\177@=(\265\342=\237\362G:+[g\275P\247\223\275\353\344\220;\206\005#<\373.\307<}\313\027\275\005\",\274\374\2542=\207\211\233\275\200G\242=Udn\274\260\225\215<hR\244\275\346\305\263\274\317\244;=\217`8\275!\"\216\273\036Cx\2758M\216=je\272:\t\3632=\340H\355=g\266\273\275M\330\311<\221.0\275\336W\313\275\252s3>\311\361\260\273\210\346\274:\222\261\203\274\351=\350=\246\344\010\275\245~\244<\333oN\275\332Gu\275\325\221D\2750O\212;\214z\260\275\270\254\224<\232\331\370\275I\021/\275Cb\264;\034\323\'=)\360\027=Xc\313\273Ue2\275\325\366+\276\007p<<G.\342\274\356\275\\<\337}\314\274\250\026\323;1\200\232=\367O\025\275\375\324\365\274=\220L\275\212Bu\274\266\362\336\274\006\"\n\274\242\005D\275\260Q\027\274\032]\204<8\3328\275\335\204|\274\206\340\215\271\321\t\034=\351%\214\275\204\016Y=\014\310\212\274\230\002\361\274\026\314\004\275*\333v=\334\302\031\275\225\273\\\275\037\230\005\276\331\311\363\275\376\353\362=\024U_=A\023\035\275\231\t\'\272\351\217}\274\370\223d\275\3060\301<\376\304\344<P\350\r\275z\311%=\367\027\255<Q#7;\235\352\224\275\366\372\226\275 \001\341<\336<\230\275\337H\240;\376\263\347=a\344\005=\211O\021<\331\272R;V\207\210<\234\221\007=\233\004\'>\353\020\325=\214\230\311\275\240\235\030\275C\270\245\274\370\2217=\275\227\255\274\324K\323\273\374\303\256\273;< \275^\322\274\275\353\261\276\274\233\'7\273F \314;=\001\325\274v~\237\275\340\350\336\275a\r\234\274n\037|=\tr\361<\233TM=9\267\311=\323\020\005=\255\254C=\233\245\266\274\326,\220=6;~=f\223\313\275\232\222\266\275{\337`=+c\333:\205\253\342\273\304\201\313=\254d\266\273q\337\245\275\'\326\321;\276\230\255=4\234o\273,\010V=\020\263\002\275=$\351=\332\'\270;\r\"\312\274V\333S=\346G\244\275\022\211\260\273\375\'Z\2752\337\356\273n5\243\275OC\257\274\016\274_=\334\216\204<)\346\261=\231)\027=\225uL\275\221>\253=\227\034L=\230\204$\275\255H\204\2758:\006\275;\316F=t\241\r\276\235\004\265\275P\344n\275\313n\330\274\312`\373\274\237\020t<#A7\275Dr\317<\236V\007=_\354J8\365\3739=\202]\216=\037\351R\276\013`\036\274D\373\241=k\356\340\275\253M\255;*\342B\275\276Q\310=\343\217\255=g\033>\273\367<\375;a\337R=wAj\275\013B\353\275\022\006\205<\033\373\037\275\330\262\020\275\372\\\177:\303\371\200<4sR\275\237a\205=\325X\025\276\246\034+\275\030\227F<O\022Q=.h\222\275-\237\342=\201q\267\2743w\272\273;\214\227=a\026\203\274\225cj<\311\202\027=h\256%\275\233\222M\275\3114\246\274\033\020\227\275$\213B\275g\021\266=\314\232\212\274\264\366\271<\216s\354=\215\024\207<\355\351\342;\304Xv=\334$\t<\340\206\261=\343\271\232=*\214\211=\\\307\201\273\"\'%>\tV\024\274\264\364\264\275\347\314\217=\367bx\274\240\360\376\275\020\335\234\275r\367\217<\327\030\310<|\334l;B\254L\273\306\305\000>\276\014\n>\245\352\242<@\245\361=\350\237%\275\332\344\206=\361Dn\275&\0252<s\262w=g\320\010\276q\300]\275h\014\014\274\217\356\034\275&Sz\274x\221B\274\255\232\203\275\354\035W\275}%\371=,%\313=\225W\220=Y@\330=\203\261\304=\004\360\347<:\252|\275\213*\347=\247\177\237\275o# =\212\036c=\177\246\331\272\t\316\325\273%#0=s\253*;\314f\317\274|A%\274\255|\004\275\333\377\034\275\027\274 ;R\241\330<\277\034\003=\014Pm\274\2770\365\275\3134V>?\323\344<\272v\245\2751.\230=7\014\275\275\375X2;\323\374N\275\010\336+\275\364\346\246\274\367\247\317<\003\244\366\275\304\352\306;\200\252\310<\327\236]\273 \036\223\274x\320e<\tn\214=\024\276p=\334<\010\275$\277\330=\270?j\272j3\027\274\324\361\002<\347_9=\304\357k\275\227\267\002\275\014F\205\274)\317\223<\225\251\312\275\004\363\001\275\343\225\271=\255\276\212;([\234=\246V\230=`>L\275\240=\000;\245\222\276\273\370\005\243\273\\\002\226\274\316bJ<b\313\246<z>v=\'\251\037\275\245\363C=\305\'#\275m\303\234\275\254\016\223=\022\016M=\341\021\320\273\n\r\340=\201pX\275\266\013\243\274h\311o=\276\234\213<\217\325\233\274\027\224\311\274\215w\220\275\n\247\033>\207\216\374=V{X=\332\004\245<\\\264\200=\303\343\356\274%3\225\275%\0253=\346\355\334\273|\255C\273\031\026\204=\225\262\366=\276\332r=`\2700<+\035K=\374\333X\275\177\254&>\001\341\356=<\240\354\274?\252\321<q\327\005\272\327\264W<\376\177\367\275Uhu=\275\306\000\275\204)\252=\030g!=\317\0141=<\032Y\274\2417\344<\005\\s=\323\243\211<\\?\376\274@\\\365<\200d<={`\220=m\023V\272\246\013\007\275\260\321\201\275\341\017\376\2745]\271\275\304\312\223=#|\r=`Mg\275\005\367\275=\301x;\275\211\177\336<![!=\353\035\313\275\221r\202=\245\335R\275\223\204s=\336\270\342<\330\3664=YG.<\340\213\364\275\355\266\251\274\020\252j=\300\r5=d\266\365\274\246\240\234=\267\362\001\275\210\203@\275\215\240\270<\241\254\354\275Nl\266\266\271\206,\275\230\031\246\275\202\264\215\274\320\213\256\275\323\222y\274\303s\321\275\275~\372=\267\001-;\252^\207<Z\316\307<\350\014\024=\307\r\376\274v\353P<^3\215=\376\003\202\274B\212\023=d\247\317<\346\206\331\274_8\200\275\244h\305<\035\374\225\274\354<4\274}\230i\275e\226\211\274\034gA=}%\252\275\321\373\334\275I\273\033\275.k\225=c\347\025\275L\177b\275\363\246\305<t\t\227<\251G\021\276\352K\324<\201q\212\275\360\021\022=+\016\302;\341*\'=\277\354\006\276\227|Q\275\271\027\005=\237\221\014\276\322C\206\275\014\n,\275\205\310\252=\233\3414</&\236\275G\"|=\2022\1779\'*\304\274\275\2665\275E[\034\275KS\353\274QB\346=\300$v\274\252\"\361<n\353\265=R\3734\276\357\304\001=\275\321o\274&\006M\275iU\200\275\271X\221\274\024\312\223\275\262;\177<\320\353\202\274\242~3=Z\357\275;\204\377\216=N-,<\300\200.=d\027\375\274\"\341\244\274\360<\227=\246Wj\275\227\\\217\275\214}\350<\313\251\360\274D\231\216\275y\r\016=r\037\036=0f\263=D\026\232=\366\306A\275\021\371(\275\006\026\362<\026\311\230= \317F\275\300\037N=\003\237\232=\334S$=\205\036\242\275.}\036<\r\177o\275G\255\010=\362T\314\274\247p=\276\300\353\234=_\211\"\274n\370\004=\256\325\304;8\016\377<Q\002\221\275gJ\177;a\371\255\274\366\007\014\275\254FU=`\256\237=\207p\223=O\363r=.\252\225\275u\\\200\2754\214\205<k\267\010>Y5@<S\333\267=\033\322+=\225Yq=\360\304i<\306\226\025\275l\013\330\275\332k\002\275\246Z(\276\242\220\204\271\"D\216=\321=\242\275\226\243;\2755w\366\273\337i!>4-k<\257\021\242\2749\342\272\275\225=I\274d\355\202=d\0350=\231\217\t<\336\001\\\274\316\352\377\2743o\263\274|4\262\275_Y\235;z.\230\275\355}<<\345\373\246\275agU\2748\273\002\276X\235-\275\317\020\n\275\016C\242<\223\336\034\276|\234\255\275A\274\337<6\001U\275\322U\213=F\016~={\242s<\025<\304\274\231\263\010\275\237\255\233<\335\261\377\275R\233v<%\311\256\274\271Q\027\275 \351\300=M\037\3168\347\330x<\260\302\222=wU\360=\016{\t\274\266\313o=\221W_\274\031,\345<\227A\302\274\237\317\354=WM+\274\225\3207\274\264\375\222\275 t==H_\236\275\227\003\253=\235\214\263\274D\267~\275)\352\013=\342x\264\274\253\227\204<\214\004\362=j\330r\274l\271\217\275\033;\235\275\3509\304<\007\037\210\275\264\007h\27559 \276\327\225M\274\207\342S\275\031\351\"=\333R\326;\265\304 \275|a\000\274\031\364\037\275`\307\210=Tt\212=\000Y\375\273\217N\202;s5\014\275\230\354\023=\366\341n=\031#K<g\036\251=?\204h\275\260\232\241\274=\247\022\275\212\343\366\275_\3067\275\\\350\250\273\251\206\274;D\034]\2743\030\210\275T#\351<\306\234Y\274&\3045\275\327|\232<\2644\362<zH\306\274\177\336\251=\221\225\240<\013L\364\274\262\366\362\275F\376\367=T,\023=\302\010\222<a\227\277\274\231e\271<u\256a\275O\247\271\274\376\345\344\275\227\240\032\275V0\356\274\\p\241<\365\271\216\275\006x\360\274[\366\220<\">\272\275K\232\331\272\0272\220\274|\352\253\274=0\021\275U\2117=\272\021\254=^F\003\274\267D\311\275m\331\017= \373\234\275`\2449=\247\315\257=\257\342c\274\240\246\262\275\350\032\004=t\334p\275\030\263\013=\350\216\267<Y\003H\275\344\200\002>\354L\212\275\271\236\254=$\201\330;\2226\255\275\037F\357\274\335A\202;\250\374\253\274V!\006\275\324=F<F\205\313<f\025H=\324\205\236==\266D>\333\305\004\2752E\214\275u$C\274C\252\236\275\003*U\273{D\020=K#\217=<F\365;o\245\342=\315$T=9S\242<\275\216\335\274\365\216\371\275!\214\211=\005NV;7X\307\273N;\332=We\037\273\034r\267=`\346_\274Z\311`=3g\322\274\271_~<\314iU\275\267\215\255;\335n\204=\301\227\004\2749qg<\343\272\231\275\311K\t:\366\264\001\275\260]\230\275S\265\355<c\033p\275\261?,=\312\215\201=\240CC<\3046\037\276\326\032\217\275Z\035p==\357\314\275 \203b=\251u\254\2742\3276<\020H\003\275\007\\<\274z\264\333\274\361u\010=&NK\275\254\234\035>\347\017\000>\341\\\307=K\347)=[@\266\274\323\020\220<\027\317\303<,\000\223\273bTD=J\265\277<%g\222<|B)\27506\215\273z44\275\252\330\276=\371nf<\016\003C\275J\002\366\273\356\t\326\275\316,\307\275\r\216\327;\037\364e\275UV%=\272\"\303=\232\212e<\367\206\276;\0070K=\261\301P=P\254\201<\363\013a=\002ej=k\365\003>\230\315\243\274>\t\246\275\340\325\351<\267w\025\276\235\217\204=\332\346]=\240_\222\275Rn\237<\325\312\026\275\006\376\014=B\367\254\274DK{=\022\0034\275e\2613<U\250\330<\207\251\351\274\324m\226\275\203\025f=\033\226\254=\364\256r=w\037B<\250\017\224\275\322;\326<\312H\223\275\211\246G=V\001\264\275\252\t\357:\373_}=2=\267\274a:%\275\223o\035\275\014\250\n\276\\\031\272<Z6\016\276\273b\002\276\'Kr=8)\276;Ad\354=\362\301\266=\361\021H\275F\303\220\275$\025\022\274\224?\235=\210\267s\2756\371\210\2725A[\275i\177o=-\300?\272\201\212\362\273\212\266|=\324\206k=`\247\027>\"\241U=\350J\213=\024\322\217=\251*f=xS\356\275\201\261\313=\013\366\314\275.\357\222\275\257V\255<\325\006\241<+pQ\275\343\261\204<\252}\207=\337\231\214\275}\353C=}\221\352=\320+\374\275-\353u< \372\004>|\363\022\274\033\251\277:I\001\277\275]\014\225\274\323\021\235\275\007\213\377\275\374Kw\274/\010\036\276\027\315.\275q\177\350<\177-8\274\376\234M\275!\022\270\275\333\326\013=H\264\030<\006\220\177\274K\010\220<D\305s=\231^\\\275\305\231><\216[0\275k\030\224<\027G\311\275aA\235=\232\270\272\275\212\334G\275\026~@=\377/\325\275\231\213\215<\252\353+\2750\r\362\275k\331\036=\202\032\266<{\252L=\235\345\013=!\264\304\275L\233\000>\"L\377\273T\363\025=\327Q\023>\310\360 \276m\024\313=\315\302R=\266\001o=\177\254\230=\022\240\262<\0217*=\263e\267\274\351]\346=\013\310\036\275=\332\320\273\321Av<w\274\022\275\247\225+\275\336\260\353\274wnu\275\006\243\037=\027b\243\275\236\346\242\274\325\300\356\274\317\327\274=\344~z\273\223v\306\275Qf\275\275{\356u=/\334-\2753\266\252=.\333(=\036\344\027<o\365\254=k\307\017\275AU\257<=\312\307<\345_\354\275.\215\203<\257+A\275f\024\231\274#\221{=n+\005>\177\365D\275\001\327F\275g\351@\275\223\270\357\274\222*\256=\250\007\304=[\213\244;\203\"\274\275\330\2059<{\224\271=\245\024g=/29=\257I\214=\332w\201\274\315\337\212<\026\214\320\275\000\243\016=S\342\217\274\251\216;=\232\273k\273f/+=\234\231\036>Rj\322<W\243\314\274\371\364 =-\206\032\275U\373\242\275!\255\003=1\372\357=\201\344\257\275\021w\204<\017$\377=z\205R\275\360~;\273\2346\276<e0$\275*W\311\275\363.U=z\316\330<\353\315\n\275\315\262.\275\260\202\233\275\264\367J<\321e\232\275{\246\221\274\262\260%\275\304]\206<\320\003\333\273\202\373\271;\374i\005=,P%\275\277\337\347<\262D6\274+\213\334\274\213Vq\275\212\323\211<\313z\005>v\362\030\275\323\213\007\275[\242\326\274\350|2=\222#*=\255\005\006\275\227\227\362<\251\263\024\276\rb\314:K\343+\275j\025\202\2742\271`\275\024\010\255=c\237\340\274e~4\275e\3146=\346@\t\276\205\263\214\275\273\316\006=S\320\"=\327\261\207\275u!\033\275\020\263\263\274\017\236\247\275\333\003\034;\3054\330<X\221E\275E#}<\245&\031>>\251\031=\346)\006<\316J\220<\265W]\274T\366\300\274\3650\326=)\367V\273=O\253\275%0\203\275\340\211\345\274a\324\334\274A\026\240=F-\'\2756\332\034\2749`\244<\204V\235=\2710\236\275V\247\230=\360z\244\274\010\334\317\274\212\020\017\273\020dL<\025\347\313\274\351\266\253=\013\226\021=\356\213\324\273\r\223\314=)\306}=\005\023N=x\370\240\275TNO<Ar\217\275\351\001\212=\3330`=\033\212\350=\220E\326\275r}\'\275\332:9;\007K\355=\004\212\216<\351\204\205\274\030=.\274{\324\356=\312\200\252\273\014\265L=t\370\204\275!\215\001<\357M\332\275\014\263\376\275\177\341\226=\222\027\250;2\007#\274h*\237=4\234\010\274\277\327\344<5@ =`\235F\275\312V\031=\005\257\030<Z`\221=w\370 =M\322\227<n\305\340\275\014\226I\2759\031\250\275q\334\212=\246\330\221=\335\361\021\274\310\327i=\355\227\273=/\"^\275\241]\207\275\270\206\234\275\353\236\333\2749\002\023\276UAY\275\241\210\016=\250\352\275=\262\316\336<\353e=\274\177\t\212=5\206\320\275\256\002\034=\307y-\274\224v\277\275=t\264\275\372\354\263<\362\033I\275\264\\\255<\254\216\230\272Qh\021=\227D]=\251\366B\275^fl\275k\354x\275f\253\247=\250[\016\276\345\277\\\275z\277\236\275ldi\275\350\335\215==\234X=Hc\366\275\177\232\022=\267\300\005>\324\251\200\274UCw=j\312,=L]\264\274\332\"\332\274\226\253i\274\227\374\326\275\017\";=\026]\234=\241e\035\274+y\361\275s3\242\273\362\207\320=b\342\003=\331\367\216=\244\367\314<\251,1=\233\235[;\363d\027\276\267\321G\275L.G=\274H0=W~@\275\205\322\316\275\231\222\211=\253\237\340<\271\265\310\275A/\270\275&m\020=\021\211\255\274-\232\254\275Z\\\303\2731D\010=\256\226\265=D\200\360<8\366\366\274J\025\311\275M<+\275\334\277\\<%\265\310\275\205\022\205\2750/\211=\036\351\234\275\237\317\034\274\274\024\216\275\230\257:\275\374^\230\274`\035#\275\312e\013\273ev\204=\035\203\311=1L\337\274\360\224\271<\355\245\212=\314\350[=\235\\&<\310\300M\274\265\263\272=\274\331!\275\233z\t\275\r\264\347;\317\\\"=0\215\351\275\024+2\275\033\341\320\275\240\227\276\275\024\322\303\275s\001\330\274\260\003\r\276\245\035*=T\013b\275\201\233\257\274\225\247\265\275c\206\342=i\354\027\276\337\324\3479\302;\320;10><\004q\243<\370~\\\274X\202\315<\354\336\231=\014\021\223<\322\000\'\275a\261\326<\201A\305=\312\231\273=\232K\035\273\302#\014\276\261\300\222=\303@\274<4\302\020\2751!\246<\200\216\016<\252\306\367<\346p\034<\231t\352\275V=\340\272D\351\221<\275\'\232<\017~B\275\351t\231\275\247|\223<\331\330\236\275\036H\270<!M\033;2)\373=s\363]\274\026\017\334=\0236k;\242D\315<\035\362\323\273\351\306\n=c@\263;\223\274\246\275\314gh=\214\261\206\275G\301\222\275t H\275\005.\326\274\234Tz\275I\222\233\275\237\0160\274\251\"\371\274\'\260v<\342\251\356\275\357\253\254\275\014\205\014=Ovl\275\201\257N=\325\0145=\316\250\245\273\355\036\307=V\272\005\275\366!\337<y\262\360<\213>\202=\275\311\337\275\247r\026=\213\246\264=;\377\207=\2149\023<U\377P\274I\241$\275\326\276\037=\301Nz;n\275F\275\201\210\207\275\317\337\006>\020\244h=\001|&<\373X\344<\267\376\342=W^\200=&s\253=\000\266\034\275t\005\361\274\355R5\27538\303=!;\374\274\351{=<\177!M\272Y\210*\275\370$\3559&\353=\275k\035;=O\377}\273\237\3427<\356#\363\274\241\317\010\276\202jt=u\357m=\224\030\273\275}6\270\275\255\215\237=\302=\206\275\025\306\366\274\213c]<\031\017\355<M\235\305=9\336\360<\006^\023\274T\216\217\275\242\267\214=\346\004K\2755\304\243\274=\227Q\275\365z\214=\353\254\262\275)\341\211<_M\251=\204\223\2549\251\357\255\275-\2000=+\207F\275C\327\240=\241\372\302=\207L\'={\035!\2753S\253=ukI\274\'\335\251=\213g\370\273 3\2229.\317;=a\260E=\004v\007=\320<\273=l\223\362\274\303\336\234\274\241;\213=m\257\314\275izR<\323\263f\275\377\3542\274\336\024\024\273\257a>=\023\205\321<D +=\017\200r=\237}v=\r\035T\275~=Y\275\372\037\234\274\315\341\371\275\256$\221<\234u9=\232\330\250\275\235&\276\275]\003H\275je\211\275\3512\010\275\016a\344<(\275\212=\326\017\203=\250\363\027\275\207]\307<\256v\312=+d\022>Y\030d\274C\257\335<\267~V:\013\375;\275\347\340\203\275\'n\320=\341\020\206=\036eI<\201\307H\275\200\354\214<\030\2174=-\032\206=]4\233<\343Gh\2747\216D<p\332\322=\247{\205\274\037\351\\\275\016\334\263=`\225\244=\345\2001<\323\224r\275\010)\013=\204>y\275\363i\272<\004\337\221\275\264\302\005=\322t\312\275\3304\205=\361q\255;\226\272\304=n/\"\275\213\022\311=]R\233\275\340=\236=\222\340\367\2759\365\375\274bz\330<\020 \277\274RN <\030|\024\274\014m[=d\360\232=\243\245\232\275\\`F=\242\353\253\274\274V\200=\024\030\"=\026`\235\275\371\344\271\275\001\325C\276\342\034\360=\242#\243\275CE\272=~7Y\275\231P4=_\r(=N\275E8\232\1772<\355rF\275\361\177P=\014\225.\275\020uQ<C\220\354\273\303\023\307=\366\201Y\274\360\225\t\275\253\035p=\243\361\233\274AwO<\27584<\250\356{\273\304\342!\274\251:}<\370v\372\274\264\025\222=-)q=}KN\274O\023)\274s\260\r\276\210I\020=\034P\006>\324(J<H\311j\274m\302\241\275&\216\301<O\206B\275\307SF=\033\0273\274\245\355\272=:\220Z=t\210\312\275\265>\312=\006\321/\275\237@~\274\2049\242;cH\265\273\255?5\275\246\373\230\275\337?\354\274\221B+<\237\312\277;\354&1\274\22312\276+.\357\274\316\222\202;t\016\202:\030v\227\275\014\310\254\274\363\336\265<3Hq\275\344^g\275\322\235d=\2176\013\274]h2=\226\016\245<\270\n\010>\3713\202<\242\"\253=\354\204\266\275\347\217\241\275\334\367\013=\201X?;=c\315\274\226\023\335\274c\224\240\275\215\275\356\274\374\275\264\275\371\201\025\273i\221(>\226\346h=\n\365\016=\213t\237=\251\221\260=\231]<\273#\257\227\275NKt=\021\262<\275R\252\027\275\375\364^\274P^\270=\210\270\332=0\304B=nGZ=\247\0213\275\000\014\030\273\217\275\200<\251\312\023\275|,\202<\274\203\236;\327\005\224\275D\001\032=c\020\n\274\0170I\274\267\223\270<\005\251m\275\344\341\355\275\022\035\242;\320\202\260<9a\254=\205\356\037\275/\004\272=\027\260O\275[\377x=\233\353\241=\201*{\274\221\256\034>+\234\005\275\374\270\376\274-/\234=\354\271\2259O\321\001\275\362\3402=\257F0\276j\252\006\275\335\005\332\274\307\205N\275y\237\276<\037\252\200<\214\346\253\274\330G\221\272\207\3079\275\025\364\265\274??\367<\260\375\t\275I\336\314\273\200\\\262<\312\351\263=\2129\244=\316IZ=\035\235\326=`\204\230\275-\256\366\272\372X\035\275\256\225\371\275\376\273&\275\354\360!>)2e\275\264q\r\275\033u\324<\037\272p\275\370\010\031<\246y\357\274\2728\353<\315r\331<\332\374\216=\314\267\321<\221\316\243\274\331t\215= \316\266=R@Q=\247\006\316\2742\233\264=\372E\372=\031\\\356\274 \202\273\271\025;\315<\3773P=\337\276\023=\003g3=\345o*\275\253\216D\275\214\320\273\273\007\307\302\272\221\360\020\2741\322\247\273\247\353->\342\252M\273\021mx<\020jS=\225\277v\275r\311\031\2755\037\205\275\275\274\236\275~\335\202\2752\346\255\2756\221B=K\324\333\274D){\275\355\337\241\274*Q\337\274\362iW=^\224r=VC\003\275\3443\341\275=9)\276*M\312\275\375\320Q\275ah\030\275\316\354\277;\353\322\006\275\034\363\013>/\345\322\275\367\311\271<\201\'\366\273\005\2500\275\347I\220=n0\245\272\275\005\256\274\345(\326=:]\254=\001\232\t\275\374\365\024\275\212a\027\275\217\014\262=xd\364\275\261o3=\22362\273F\033\336\274\266\343\255=\017\242O:A\3324\275\317\263\020\274\307\'\212\275\001\314\210\275x*9\274\361\2049<\267\004y\273\\\273\237\275-3\213\274=\307\227\272q\375^\275\337K6\275c\303K\275e\222\301=\253\016\354:am\237=\345\352\r\276\002K\265\273\310\373\304\275\226\241\013\274X\375#\275\027\035\220<M\235k\275%\261\026>\372({=_\035\364\275\336\225\203\275\027\007\037=\204L\014=R\353\274<\036\201\337\274\313\003>=\271J\272\275\332\372)\275\331\226\"\275|\266\274\275\272d\212\274V\360\r\274\251`\037<&\317\024\274K\264\275\275otB\275U\204k;\025k\267<\010d,=.\306\246=#Q\372\274\026 \364;\262\330-=f\366a\275|\303\006<\236k\346=\372\276\033=B\260\036\275HV*=\332ZS=C\216\r<\330\nU<\325\271\n=o\223!=k\232\010\275\254S\245\274b\254I=\210o\006=o)\354<\325\003\216=f\347\022=\'{\221\275\342\232\205\275h/\323;\000cZ\275\301\001\335\275\306\200I\273\314\244\356\275\371\273\316\275r*\232=\017\3232\2758\337\375\274\221\212\237\2753\214\005>ui9>/W\365<\333\220\317\274\232\346\267=\237\302\300\274\000c<\274\344#\016\274\307OC=\265\212\030\275\267QE<v\201\336\275\237W\006\276\021\010\242\275\335\335\377\274/|\037\274\025\312\273;\242\311\220=\332\243\250=\351\245\367=S\003\210=7\301\345\275<\253,\275q\227\215={\016\263<qm\017\276\035\267\330\275\355\353\206\275\334\273\333==\2512\274%\263\236\273\361\312\255\275z\034\234\274\335\344\266<p\310\335\274(+\364\274s8\220=*\036w\274\304\250\032>\303\314\240\274Xs\020=8O\311<_\362\207=\263\3619=Q\200\323<\372\r;=\230\361\013\275\2637\203\275\334z\221=F\217\n=m\210\235\275\\?~\275\203T\374=\r\231\314<\024\315;\275}\035\227<^\262\025<ns\206=ym\364\275\217@T\275\025\255\312<\275J\200\275\300\216\206\275Z=\346;\024/\010=J\006\321\275\257\304\337=\020\202\210\275n\351%>\324\r/\275\343\247)=\026\031\246=5\205\240=\002\222\364\274\316a\025\276\306\367\314\275\263}\267=`\\\354<\361\254\246=\024\014]\273\236\026&:v$e\275\241\331H=\271?\216\275o\223\034\276\033\301\373;\262\347\262=|u\n\274\341\367\313\274V\234\302\274\317p\364\274XY\354\274\320{\241\274\334K\306<\335\031#\275D`\333;\235\251E=JZ\032=\222\001\222=\235\003\266=Q\021;\275\'\257\276=\211j\202\275#\304\207\275R!\253<\302\024~\275\014\032\356<\334$\365\274\205\356 =\241\006,=\276\022\276\273\021\200\240\2758\311\366\274\321\317|\275\272g\377=D\206\010>_\036k<ZPo=/<\230\275\n\026\305\275\232\363@=T\264d\275\305L\331<\371<*\274\\=\304\274\026\356\300\275\341\242\026=0@\271=0\n\240=E\025\374;\317\371\332\273\347\363\225\275I\262\265\275]+K\275\341\250\267;Qc\232=g\367\214=\250\323r\275b\212~\274p\003\256=x0\260\274\205I\264=%\254|\274\247\327\346\274h8\225;\036\233o=\210\'\005=\220\220\322\274\366e>\275\2135\"=x+D\275$\354 <\234\370\005=\016L\354\273x\220O:\327\237H\274\263-\343\2739v\222\2750\273\234\275\3461\337;kB\'=\343\310\220<e\203\351\274.\223%=\037 \000<\352\340!=\360\373\314\274}\361\010=]\303\315=\266I\"\276E\243\335\275\263\375\244=\271\334\242\274<\2369=u\204\'\275\273\257Y\272\251!\254\274\337{\341<_]\314\274`\307\372\274\n\202\263<\352/\017\274\303\370\211=\341r\355\273\005b\224\274\35491<\324\323\'\275\215Hw=9\300\207\275\032\036f\275G\272\255\273G^1\275\352P\220=hk`={\021\317\275<\355\250=\246>\316=\247\234f\275\215\013\274\274\303\217?\274;\363\214\272\247\313\372\274}\'z\275hs4=\231\240:\274e(\010\274RE]=\306\033\335<;3\320<\000\354\274\275\370\332\'=\333X\253\275\343\227\312=\272C\217<\007\004\025\275\244\370\267=\025p\r\276q\325\325\274?[\035=\034\021\276<\242\237\263\274\334\233\213=\206\260_:\203\3650;\366H\013=\222\265\014=j\332\225\274\222rr\275f7\225\273\315\233\234<\262!\265=\260\365\300=z*\376<1Y{\275\356\353\231=\034h%=\211F\335=\312\321\333\274\317\316\313\273\217\325I=\363\270)=\343w\302=\007\236\006\275\362w\026<\360m\207<>\361\272\273zC\235\275\220\022!;\362\363\200\275\372\324\247\274\216\010\357\275\236\2157\274`\205\000<\255\370\317=^\"`\276\263\361\353:\232\376d\275Qqd=\341\220}=\354\tx<\224\232\245=hD\236=\356x\306\275j(\025>\340\177\213\274QO\007=W\"\344\274\354\324\034=&\\\005\276\023\234F\275\024\203\t>\235o}=iU\366\275\260\016\005\276W\361\021=\021\311\365\274\273F\030\275d\276\207<\016\005\004<:\034)=\241lI\275\341\375\3429v\302\361\272\257*\203=\221\200\225=~]\304\275\220Df\275]\251\340\274`v^=r\306\216\275y\2622=\362F\372\274\357\330z\275\2026\326=\202\361\223=u\366\024<\027\211\221<\275\010\372;\377\245\210=8\252-:\022\002\330<\346|M\275\304\347\306\275\253\327W\275\351\3348=\234\000\274<%\036\256=\243|]\275\016\2514\275\344\253\324\274\326Q2=\031\323\036=\244,\340=\343\220\347\275\267\256\006<6M_=4\217M\274|\203\177\274\303\321\014\274F\363\243\274\022\243\343;\217j\257\275\242\276\027=c\230\206=e\352\264\275\365g\215=|\177\007<\035]~;nh\325<\236\301\257=\002\310I<SN\232\2756\031\233=\302\214\217\275\233\322\010\276\327\373\276\275\333\307\233\274\221\250\312\275H|\037=\256\202\237\275\265\272\212<\2737\\\275\227\272x==\321\007\276\306\004\360=H\320\335<B\021\206\275\037\374j=\310\264\201\275/\271S<\245\206\303< \276y\275\265\317j;\243Gg\273\263ZW<,\036\000<p\236\"\274\241e\325\275P\004Q\276\270[i\275\326r\027\276f=\036=Q\000\3369\"!2\274\306\236\030=\214UG\274@\301*<\t\345e=ur9=e\022!<\306\341K<j\240T\275A\344\274=\206\331\351\274T\320a<\202F\236=\323\000\037=&N\272=\254d*\272\217\377\354=\223\272\"\275\004\301\252<{\010\005\275\254m\315\273O\224\205<\007\t#\275R\035\320=\001\307\337\273\363\007\001\275\253@\374\2740\255\204\275\355\227\006;\032\245\025=\246!\365\274R\215\003\275\360\3532\275\357\313\324\273!PW\275\345\212N=.:v\275\264-\201\275u\342\036\276LP{\275\3105\036\273e\036\357=my\204<\0245\312=\002\237\336<\326\371\205\275\357\206\246\27493\261<j+\206\274\222d\264<\317\206z\275\211\025\351<v\264\306=i\'\242<\366\205\320<\366\037\223=\302\216\322\274\204T\245<\024+b\275\251M\3109\331\372a=\253\321Z=\314)\330=\330\367+\275\377\254\231\275j\347`\273\311\341\000\275\233\217\\\275\024z\267\275gd==\237\275!\275\204:\023\275z\244\316=\024@\235\275\252\246\177\275#^t=^\204E\275\334\216M\275\355X\264=*4w\275|V4=?!\201\273\242C\207=\244\242\t=\226,\361=\231\010\351<\314*\026=)Oj=\332k;<\024\265\340\275\246\371\300\275\215\024\361\275Q\261`\275\243\263W\275 \370\n=<[\272=\263S\303<[\325\222\275\200ms\275\010\202\002>\017\230\246<\200\314\253\275R\240@=\031\275-=\3543e=\265R\203\275\316hY\274\177\316%=\321{\300\275\367\211\326\274\220\225\374<g*\266=b\'\343\275s\000\311=[Y\245<]\206\373\274\305z\277\274\267\006\323\273\262\306\210\2752\322\341=\031\n3\274\022\177\253=\021\226\271<\002\376\313<\006U\000=\356n\371\274\255\235\276\275\374\367><s\335\026\275\226\204\211\275M\2655\274\305\263\n\274\325\316\263=\002 \034<\022\351\037=\336\272h=2\311\246\272\220\373\r\275\226\201\255;\370\252\016\275X\037\317=\275\0371=\027\307\347=Jn\217\275a\016\311<\247sf=\321\346\277;}\013\272\274\226\270\240\274\014z3=\323\262\010<\304\233\357;\177\216d\274\010R\256<7l\335=\226\341\344\275\005\326\204\275A\342;=\375\330\230<\306\250q\273\240l\373\274g\251P<\253\275\366<FxG<\237\361\266<\363\326J\275T\363\255=\344\325j<\006\001$\275\247\373}=\253\016\232<j\001}\275Ii\031\274\032C\r<r\266\310\274J\334\010\276\330\336Y\274\355C\230=A\277\216\275\377\252\225\273P\275\362\274\'\271H>\002\004\351\272\244\007\204\275<\363W<\317\020\200:\217{\370\274\177\242\263=\356\356\024\275=\3272=eM\030\275\270\005\221=l\n\314\275\210\346\370\275\335&\204\275\325\2514=\372\230\311<t^\310=\217!\000\276\276\321\032\276\350(\337<\222\237\231\275\031-)=S\026\003\275\314\003\010\274\267Y\237;~Q\211\275c\323\255\274\237Mi=\000Gb=\363\205\374\274\300\351\334<\310R\337=\217m\372\274t\225u=\3105\337<o\"4\275s(\356\275,\302\220\275\304\033\274\274\270\344\252=\357\216\235\273\233\r>\274\213Kl\275\307k\013<\311p\240\275\266V\247=\017\037\251\274\251+\312=\232\222\341=\323\215\300<\035|\005\275\230:\000\273\312\215O=\363OQ;\363\205\250<iS7\272K\377[=n\002\345<\213\335\363\274\231a\252=\233\211\220=\317\021[=\260\235\304\275\346,\021\275\245\335=\275\r|\027>&\307\200=a\301\273\275\363\270\224=\031-\332\274\2746\212\275\210\306\343\275\307\207E>\305\232\371=\306&v\275\264\230\244<\314\374m=4\226\235<\021\350\254\274\240\235\317\273\252[\257\274\316\216b<N\002\224=\254+(\275\t\024\233=\354\257]=\320\364\321=$R\004\275\277Z\207=\347p<\275\267\022\246<\275\201c=\3172\035=\324\014Y\275h_]\275\334\017o\275\016\031\353\274m\206\311\275\232~\256\275\203\\I\275F\355\305=\024x\342=\025.\235=\226\2547<\370\227U<\314A\026\274g\261\344\274\333\024h=\257\222\201=\371\242\265\274\t\304\260;y\365\253\275%o~=\344\214\013\275S\'\227;\207F\346<\245Z0=\325\361\\=!\314u;4!\"\275\202\313\215=\350!\313\275\325\0306=\250\312\004=\t\014b\275u\371\202\274(\222;=\320t\312<\304\231a=KU\210<eU\017=\251\322\006\276K\245\224<\014V\006\275F\231\266=k9\256<\227\241A\275\265\262\036;\331M\036\275y\214\313<y\304\243=#d\263<\376o\177\274Nc\006\275\221\376\000\272\263;(=\361\323*\2750\313\343=|\237X=\320\212r=X\000\t\276\232\302\307=\254\315(=\206\324\025\275(\326\316<\006\314\001>\344\221\300;Z\017\326<\267\370M\274b\363\311;\236\'\301<\315`z\275\226/\365=\325\306\226\275\031XO=\230\305\241\275f\014\221<\327\222\364=\rs\331<p\326\367\275|{V\274\245\020N;\024\234\320=\317\004\231=/l\214\273\327\272{<6\252\021=<\346\343\274 P\222\275\005\013e=\276\000L=\013\246\356;\346\230\203;kH\353\273=3\267\275]\272\213\274\234}\242\275\263\024[<\316\001\231\275\236\003)\275\241)\213\275\205\210\024\275\270f\252=d5\212=\226\211\035\276<\032\234\274\003\325\320\274\376]Z=5>\323<\033\263f\275\230J\007\274/\222D;\213\\\272=\205\372\270=\274B\003\275!6\010\275\232\351\300=R\326\233=\352\004\266<\263O\021=\026\267\353=\364\246\232=_\304\366<\276\213\343\271O\275\314\2758\270T\274\2525\257\275\306\260[=,t\020=\315\374\325<n\323\217\274\311\256\027\275\221a\301\274)\303_\274\262CT=\336th\275\273U\313=\355_ >\236\326]=L\364\377\272\317!9=C\315\237\275\227\227G=\246\016\344<l\2179;\022\371\315=\263\'\027<\270\022\336=\216\340\261\274\206\034\210\275rKI\275\275^\363<\000\347\261=\361a\306\274?\213\266\275T\303\235\274S\374V\275\216\257~\275Z\274\313<+\tA\275\271\232A\275\024\355\024;)\"\362<\n\262\203\275O\377\251\275\324GH\274\211\275\346\274\335\354\264\275\321\272\002=\240{\025\2764\350:\275So:<\3208\360\273\206\312*=/\245\366<\206\251\t\275\363\276\331;\000\020\336\275\370?\331<v\314\356;3\233\303\274\202\266m\275)\327\256\273/\213\035\275\341\321j\275\016D\250=\2668\224\275\356\203\310\273\260\325\326\275u~\335<\224A\270\274\247,\251<\233e\316\275\326\376\214=\367\323k\275\371;\333<\360\315$>\\\021J<\242\216%\275\362\027\t=\220v\007\276\325\320\272<\375/\264\275\014\244\312\275K\255\305<%\373+<X?`<\352\345G=\313\311\032\273\363\310\314;\225\"\016\276~<\277=\3234-=h\354L<\370V\265<\316\2216\275\232\243\016\275\n\257[\275\243v\267=\207\250\231\275\201=^=\035x\351\274\n\213o<\356\274\220=\326\221$<L\005\226<\246\302\371;\323\353\004\272\203\273\363=\207\004\361=1\315*=\323\002d=\030\202\'>\227\031\244\275b\210\020=\214\211l>f\335\033\275R\000\017\275\372\241\330\272\000C\037=\312Z\347<[\377\026=\247s\215\275x\034\323\275w\224\023\275h\327\207=V\320\002>\375\204R\274Y\352\244=f0\231=4=%\275@\356\305\274\232\350\237\275-\037\375\275\377\321\204<\224\303\364=\tYz\274k\356\205\275\036\361\376\275\207\201y<-Wq=\376\323\200<o\347};\030D.=C\312\243;\237\226\\<\336\277\235=\316n\205\275\207V\212\275\213\022I;\373\350\017\275Sb\276\274\275\026\345=\241V{\274.\311\224\2744\322\027=\340\247\264<\2429\350<\356\224\006\275+\304\311=x\t\317\274\350$V\275\233\016\350<\266\030\225=\034L\341;\033\325\246\275\324y\262\274\206\311\022\274=\321\001\274\210I[\274\037\303=\275\360\233\260\274\257}\207<G\036\020=\364\315\r\275\366\215I\275\271\316\250\274\027\325\000=$R1=\317\235\222\275\2446\233\274\016\014s\275\302y/=\376I\002=\'>\354\274\366\013j=\245\331y\273\000\317l=\376i0\275\305\252\274<\211\343\212=bp\265\275Vn\344=\313\027N\275s\024\325<\356I\237\273\353p$\276\207\255\223=\374\251+<\222)\000=0\177S<\3153\007=\005\251\214;\347bF\273\212\242\261<\245\355\r<\262\272\207\273\2027\347=k\317R=\275\007,\274B\022-=;}.=\311\2745=gM \274}\230\331\275\246$\254<\\\225\014\275\224A\245\273\331\346v=\"#\242\275\2139\237=\256P\224\273\257_\315=\033\326\266\275O3\314\274|\203\004\276}\224\037=\207b+=\035L\331=\336\nF=Y\263\024=\371(V\275\224T\376\271\252\365\313\275?\243?\273L\351u\275W\\;\274\363:\247\275\202\352D\275\277q\017=[\331\t=\204\223\021<.\201\"\275\274\010\246<Vp}\275\325\367\337=\014\341(\275+%\032\276g\302\213\275L*\207\275\202\007\033=\377&\315\274L\266\350<\2745C=\354h\037\274\017\376\224\274\344K\321\274lu\005\275\355\002\223=[\017;=\206\024\312=\224\"\257\275\010\271\257\274\320\303$=w\252\256=\316R\254<jG\007\275\372\325\301\2759\025\036=^\025\354\274\272\207\211\275u\006\255;\271\343\210=\303\235\242=0\003;=M\304\326;x,x\275\027gt\275\267\374\374=\234A\207=\231_\232;\360A\334=\026mc<\247\r\376\275\365TT;\364f\227<\243e\206<|\271/=)\301H>\004\264\337\274SGw\275\261\346\235=%%\323\275 *\240<\317\311\300<7~\205=\036\"\263=7\335H=\325\206\235<\245X\276<\262\360\210<\360\014V\275;0\223<\331\n\351\274\345\253;<\250N\217<\347\237\233=\213A\354\273\347\025l=\026\226\024\275+\203]\275=\253\270=\343PW\275\355l/=\335\024\210\275v\257\023\275X\177\357=\031\210n\274\332\\\037\273\234\321<\274\013\341\372=\306\337%\275_8h;\000\210\302=O\030\305\275\335u\335\2731Tz\275\233\325\235<:\0146\274\000S\300\275\216ia\275\320\365\253=\324\267P=y\037\241=O\210\r:\265\232\371\274\'\202\247\272\304-/\275\352\335\352=\320\273y:\001;\220\275Z\230\024=\001)D\275\330+\366\275\206b\244\275\277\342U\274\217i\305\275\263u\253\275\302\026\220\275\274\234\243=\342k\207\275t\017@\275\034\311\"\274^_\345=L_\250\275q\364\025\275t~\020\275,\3334\275\364\255\344<\254n\022<}\2717\275\r\'\n=\0244 \274\271\274\265=6\231\271<\263C:=\007\245\345\275\203\2744=\313A\200=\2043\210\274\251\304\030\275\232\337o\275\337\3329\274\003i\214\274Dy\221<6U\035>\002O2<\310\347\215\274\301\007g\275\373f7\275^f9=.\302d=\010\014\326\275\013\276+\275\367v\333\273\352&\031\275\324,\201\275\026\305A=\2331\233\275\355\307q=q\230\311<\026+\350=\257\2409\275\270M\360=\024\325\226\275\264\204@\275v=\211<\376\363\332\274^\216\007\274\031\322\336=W\007\251;\331^\276\275`\252\205=\3151\226\275\363\275\306=R\001\215=X\233\027=\370\276\347\275\373\370B\276\022\016b\275\270\023d\275a\320\243<&M\024\275\362\254\310\274\333\026\321<\331\301\271\275\211\346\361=3W\204\274?\236\246\275\242y\326\274\314\206\346\273\232)A= \'|\274\007\201\270<A\260\314=pV^=\270\274\202\275N\2120<\343\306\256\275\357\033h\275\374\244\232\273\346`\340\274\337\301A\275\3774\257;\237\006\316<u\225\024;\256\321\252\275\374\017Z\2751;\371<\363*\\<\025\217}\274\340d[=\253\264\222\274\365\261\205\273D\317\024\276:\r\000\276\231H\005\275\02027\275\007\363R=\177\210\262\275C\233\370<\013j$=\003\'\2057\372I\366\274\010\021\275=\324#\302=\004i*\275\000\252\014=JR0<\001\223\327=\333Cn\274\231\261\305\274\320\343\340<\000\245j<?\235\205\275\226t\267\274\236\320\342\274V\030\355=^9\220\274$\006\025\275\341\033\246;:[s=7\274\240\274y&\217=\016\324\035=\311\354f=\t>\335\274W\023B=\026\000\246\274p\311\025\274\207\202o=\270b\274\275\231H\024=%t\220=},\006\275YJ\226\275a\313\360<\232\037?=\307\177\206<\256\351\213=\352$;\275\352\203\374\273dH\'\2758\301\243\275\272\227\212=\222\344h<\324\316\034\275\025\305,=mb;=:\036\004=\371\321\310<\321\330\014<\365\207C\275\275\343\031\275\366\311\020=\271\016i;\370\226\032\275\\\331\377;Q\376\377\273\213q\305=\303\261H<;\373\033\274\275k\226\274\256,f<f.z=\252\303\253\275\362U\r\274\2170a\275>\331[\275+\340\001\275\2002\244\273awc<\031eQ;\260?\255\275\020\033\252<\312!f=\031\245\375\275\"\314\240=\351?5>\266\362\224\271\007\364\364<b\344\200<\2123z\274j\3729;\264%~=\273Zt\274\276d}<\205\031S\275\033\210\336\275\025\2330\271\033\354\252=\277\350\314\275\370[_=\355wf\275\246\323#=|b\370\275\331h\\=\335\214~\275\t\214\013\273\317\035\235=\367!\200=\014?o=I\360\3259oV\024\276*\250\203=\301\221(\275\201\330C;\216\014\366=\340\034\316\274&\355!\275\2223\226\275\322=T=j\177\273\275\257\3326\275\224v\303<\273K\002\276\231\327z\275\022\000\203<&\243\267\275\2723W\273\023\200\344=Iy#\275\302\231\204:\204@\365=\210z\343<j/E<\354\326\321\275_\255\\\275\022\2004<b\302y=j\035\001<\267*\\=\256\016j<zPi<\264B\206<i\257y=w\266D\274nI\241\275\223\007Q=\305N#=\212\004\000\275\370\326\010\275\350\356\306=/gQ=\222\030\333\274\342\321\250\275@\264\205\274G\020\224=q\013X=$\333&<\333\031\034\274\333\210\272=\03187=\375\337\266\274\003\333\317=-)\321<\024\331\222\275\\\365\321=\020\357\212\275[\250\224\275\224\026\345=\331\343\202\274\030\366\220=]\257\266\274\226bV\275\325\350<\275\\E\010\275a\253\026=\201{/\274&\322\340<t\315r=\013#\024=\377s\022>H?\270\275\274\000\311\275$\360\274\274\306\340K<\322\037P\274<\262\353\274\317\331\231\275#\301\200<*a\230\274%\271\266=\207\3144\274\215h\226\275&\264\200\275\001Z,\275\266\352\'\274/\304\244=\371\362\217<A&\213\275G\304\235\274\226<4=\370\203j\273\005\337\\\274\177Q(\275v\022\024=\031Z|\275\201SB=7\231c\273\263\375\330=\360\0360\274P\305\274\275\335T\233<M\340\341\274\200\244W=-7\324\274\204\250\274\2734\002\301\274I\336Y\275H\225\256<\001\214\317\275\276W\215=\317\376\235=\366\035\366<~\247\347<\237dc=Al\276\275L\344\212=\377$W=TB\213\275w\037\252=:8\351=H\313\334=\315R\323\275;\005%<I\003\255\275m\212\016>\244`\215\274\256C<=\246\335Z=\342\314 >\246\036Q=y`\013\274\273\343 \275\263\271\242<\240\206a\275\227Ke\275\031\273&=\244\231!\276\t\322V\275\311[\325=:\234T\275\260\370y\276\034\322\362\275Y9\005\276\005\204\363<\250\030d\275\323\270;=\031\353\252=\213\264\317\275M\231\324\274h\330\273\275:\260\377<\2205\366\275\313\274H=\247\203-=d\233\243=\201\321\217\274\333wZ=\266\260\002\274\311\257M=\203\001\255\273\335\301/<\2160\r=++\342\274:\017\004\2750]\"<\362\245\215=x6[\273i\307\217\270;\226\376\275\233~\342;:\272\353=\324w\037\275\022.\205\271l\357\207=-\344\n<\017}\031=[3R=\263\231\305=\235+G=*\001\236<\202\214\232\275C6\003=\232e\264<\354\177l=R\2766\274\225S\327\274\273\217\r\275\n]\235<}\033m=\216i\261;\342\017\260\275\247\277\335<\303\353\325=U/\214=\376W\177\273\215{0<\n\314%<k\313~=F\362\322=\3606\364;\202\353\275\274\020\217T\276\0355*=\313\307\037\275\254\021j=6W\370<\264\237\263=s\003#\275\212\322\225\274Q\312\267<\315\\\016=\3134\037\275\2778x=6\030\215\273\235\355\221;\341?\207\275$\344\250\275\352\017\230=<\340\026\275\272\276e\275s\261i=\360t&\275\323\321\266\2749\205%=\n\253\267=\311`\005=\032\037\311\274\3065\014=\256\250\257;\233O\364\275P\336\235=V\020\267\275X\301\255=\\\243\307\273\273\364\265\275\305\032\003\275\005T\235\275\241\342P=k\371p\274\301[\246\275\252\2416\274\357\016\031=\235^\027\271\234\226\362\274;6\326<j4\022:\272\343\305=&\347\372\274;\020\237\275\326\000\235;B\301\347\274=\224\313\274\021\250\022\274}q.\275M1\302<{_M=\036\310\034=\210%-\275wR.=\222m\033<\006X\304<\350)\r>\252P\207=52\213\275\032\261\225\275\254|<\272x\320\340\275\317%\203=\372o\025>\205u\'\272X\371{\275\371D\200<\004&\314\275\013\370\336\274\3257d\275\003\016\275;\rS0\275\000\013\325\275\036\363\273=fn6\275-0\206\275\250\342\370;\241\2114<\245\357\\=L_O=+f\213\275;D\013=?GZ\274md\336<\337\227\243=\325\332\263;\314\317\257=R\354\336<\204\222g=\247i\234\275o-;\275\247\326\360<\342\t\276\275\227\035\232\274\354\024\032<\026\216\276\275^\311\\=\003\025s\275\001\250\245=-H\010\275z\032\326<\236\335\210=\206\371\022\275\3205\257\274\265\376];\254\240\317=\363w!=e\314\023<}\377\201\275.e\224=\306\355e<8h\177\275\276w\331<#\233\035=\2365\337<\377\367\240\275\222\264\220=M8\225<Y\352S<\323\270\026\275\372\006\244\274b\270\234=\360du=S}\244\275y\275\332\275e\277\024=!^.\276?\300O\275\376\302;=_\002\231=Y\216\330=mX\256\274\273\324\200=\256`\226=My\000\274\376\337\343\274\001\177\266\275\344\027@<9\243d\275\365\033\252\275&\254\326\274\232_@<f\371\345<\323\213\033\274\230\305\342\2757\372\304\274\010\361\207\274\371^\333\275\247\020\336=l\205\336=\360d\351\273\266\2015\2751\345e=?q\003=\317+\371\275\315N{\273{a\004\275\233i\002=\323S\260\275\302\3247=pu\005>\243(B\275\341\373\366\275\270\247\005>\243\201\220<\267\266\301\275\031\252\362<\372\2154\275\331h\345\274I\244\265\274Q!1\275\030\335\030\275\373v\230\275\250\3139\276\3425g\274IvR\274\310\014\364\275|\345\223=E\r\025=h7\214\274\322\337(=\036\326\305\275#\303\n=\362\305\260\271\363\207\302=\00770\275\237v2=H\353\223\274\300\241\305\273\370\323\302=\337iG;\201>\243=\217sV<\321\237\315\2738\351\005=\362h\354\274\355s)\275j^b;&\354\366:1,@\275\321u\313<\276f\246<\221\262\346<\350kB<\007\337\203<,\024\216=\034\320u=]f\367<{zG\275\246\330\030=_\332\223\274Y\277\030=\270\324A<\3307\207=\316O\267\275_\374\303\275y\311j\273\360>\224<jPp\275K\327X;\375U\251:\320\0316\274=\346\313\2746\343\001=x#\277\275\026K\312\275f+]\275j\364 =\264R\270\275\270\275d=\204\235C\275\321(\313=\360\277\352=\013\300a=l\310\225<5\317)\274\356&+\275\205\333`\2754[g<\365\271\207<\013X\205=\"\314\360<\031\035\210=\343\366\206=\252\"n\275G\007\354=\335n\203\274\352o\001=\007\306H=\347Q~=\342 \364:\036\207\340\274~]\'\275\340R(\274\222!F=\021\275Y=\360\004\315\275\004\344\034\275\3573\276<\035FK\275\327\016\332\274\363\210\242<\03488=\224n0\275)\341!\274\237\306\237\274m\231\034>}\221\241\275\345\3036\275\3628g=\334)\256=\036l^<\222\245\277\274\223U\301\273a\233\217=\253\270\215<\253G)=\221,\304\273\243\004\\=\306\003{=J\205\363<8\252\232<B\337\233\275\332\353\310<bk4;\211\344\250\275\370\214P=\340j\351\274\024-\026\275\241\311\017<EW\233=\006\316\212\274P\245w=\366,7\275e.\325\272\027C\";\221\323w=\003\316\322=\022\264\363<[\346\255\275\332z\261\274$\037M=\365\272\010\275\354(n\275\233P5=\215\212y:\366f\216;E\000\263\275\305\203\225=$<_\276\202\013\216\272\210\265\226\275gvM\275\367LQ\275U\237F\274\225\340d\274W\022J<Y\255\333=\027>\326<K\322\274=U\013\226\275y*\311\2753(?;\356\214\213\274\267\200\276\275\346\234\346\275\250\261\273\275\013rm=\360\022\234<\246\316\277=\240\344\322\275\371\275\211\275Q\002w=N~\272=C\272C=\323s\250\272\214\034\323\275h\t\214\275\361\213q\275,\220\314\275\314\020a\275\213\256\217=c\262\261=RM)=\007\016\233=\363d \276C\346\022\275\361\237\205\275\246\342>>\205:\253<\021K\220\275/z\241\275\327\320\206\275\314j\250;\0048 <{\252\266\275\030\310\254\275\036\334\233<\357\260-\275\217\356?<>\021\252=\021\350\254<S\351\217\275;\224\022\275\210n\251<\315\311\354<\350\000\005=-\331\245\2758\013i\274)\000\226=lL\347\273\262\355\377\2754R\n\275\303q\340\275\322\245)=\225>~\275\202~\257;\2041d=BF \276R\027\254\275\304\002G\275+\007\323\275*\325U=L]3\275U\251\230;S\371\256\275\375\344\214\274Q\355M\274\006KW=\007\214[\275K\323\330<\230\235^=\223Ti<\377\374\301=\215{Y=d\241\324<\346M\210=\253\'L\275\"*\036=\277m\214<\014\306\234\2753\352$\274\005i;>\005\305\245=z&\240\274\315\226\207\275Qo\227=\364,F=\357\250\204=\0251\337\275kwj=\242\331\261=\257\351I\275N\3177\275\367\327A\275\264\320g=U\312\347\274\322\254\226=VG\255\2745\362\256=\345\233\313<Of\214=\017\002\030\275/}x=2\332\275<\340O\201\274Q>\304\274\307\032\252\275a\342\320<9\215\216=\206\335\207\275>VW\275s!\201\272{\312\201\275YB\333=\301\322\260\274\240z\216\275)\224\021=\177v\251\275(\266%>\204\022\276\275x>\013=\306\003\255<c\356n\275;\370a\275r\337 =\352<f\2722\300\325\274O1\323\272|D\222=\230\342\025\274S\311\212\275~!\334\275\3371\014>\357\227\224=\267L\352\275\201#\231\275v\301\202=?\321B\275\333\275\327\274\3648\374\274\3013\014\276{y\251\275\030M2=\316>\322\273z\237\346=\036XT\272gY\303\275\035\320!;R\n\360=8bf=\".\265\274b\365\360:\036U\013=hw\316<^\262\373\274c[\216\275\017\325\001=8d\r\275\337\013\000\275\321d\t=\200\373\221=\202\272\270\274\342\002\006\276e1\204=\347\277\216=\324_\226\274\004~\t=P\221\014>\325\206\003<\\]\270\274ay\222<O\3246\275\340,\236=@\235\226\275u[\001=Y\225\222\274\31315=\365\0171<\211\245\233=\254}\375=g\207\016<\235\363L\272=\\\216<M\031\332\274\314^D=\325\256\310\275>\236~=\354\342\310<\3131\035\274<n`\275\352\224\220\275\266\342\032\275\0275\207\275`\247\216=\274\"z;i\216o=@\247C=@\3556=w}\234<\310)|=\340\244\017\276\252r\230\275&\036\001\275M2\205;\315,R<P\357$\275\331\005\365;\347\300\365<;\265\204=\370v\303=\017y\364:\236\204+=\257~\231=\275\016a\274wE%=\2416\335;\201\224\n\275\3554\270=\326H1\275\202\361\306\273\323\312\305<\373b\216\274\355x\027=\371q\310\275\033\235\305\275\277\1773=\033\004\251:\247x\021\275;U\233\275\326\315\254=zp\213\275\367\\\020;\257k\367\274\300\023Z=\237\2176\276\266\373*<\252\361Y<\016\323\003\275\246\241\030=\026\207\034\273\231\201?=#k\200=v\034\372\274K\344\304\275|\310\377\274\001p\225=\352U\360<\320\206)\274\267H\247\274\027m\326=\315P\232\275w\256v<\023\310\235\275\335\2172=\242\304\304=\213\254w\2759\276h\275\326\327\251<O\316%\275\212\360.\275\177<\373\274\342O\221=41)\274\2672\320\274\250\\\310\275\361A,\274\342T\237\274\t\013\177\275\260k\260\275#g\347;\003\033,\276\214\025T\274\356\216a\274\324)&\275\275\014 \274u\3664\274\210\021\357\275@\332\236\274fD\007\2757w\215\275\217\016|\275:bh\275\201\313\030\274fn\361<\251\351%=\30193=C\355\263\272\315R\207\275\243\350\242=;\033\024\275\322p\005\275\204Hn=\302\2316=\312\340\263\275\0213`=\365\034a\275\260\tp\275\253\275==\234\221\311\275A\240\216\275\252\222\354\275\235]\351\275(\222\007\275\273\373\353<$\303\211\275\352\261~=r2\241\275~$\240;>\274\034=A\032\032=\023\276\256<-\261=\275uj\311\273\261P\370\274\220\316\204=\241\331\316\274D\245\361\274D\316\260;\275\264\315;ap\224;l\320g\275H\3445=\336\326\300\275\251\303\t<\025O\013<\026\322\363\2747\277%\276\222o\024>\000\017\315=\377\307\345=\027N\277\275\211\235\226\274\310D\343\275\300\340%\275?\362Z\275D\214\243=>6;=\345\014G\275\021\260\272<\200\334-\274\247\207\261\275g\210\251=\236\341z\275h\2151\275\311A\222\275\263l}\275\026\220#\275\177\207d=\375\362\334=NA\005<\226]\327\274u\313\221\274A\027\342=\310\333b\275\327\306\017= \223\347\275\274\032.=4V\325<h\203R=\304\245\017\275\000d\274\274\370\027\035><x\031=\\\"\177\275x\233\000\273\213\353\213<\215=\223\275\271\254\235\275Z-\003\275\3554\004\276\322z\255\273\377\177\336\275\277\347\273\275\313<c< \306\217<\307\336g=\210y\177=\314\353\2347\216\360P<?\203\253=\352\2149<\004/\244<1\272u=P\275)=V\273C\275v\230/\275\266\320T=\374\264\333\274a\277\220<M_\274\273\'\347\332<*D\243<j*\214\275\302zA<\010\371\242=\013UF\273eO`\275\022Y4\275\355\004D\275\321\372\201=\340\\x=q\302\200=|`\330\274\022@\274<\314\033);\010$5=\255\032C\275\315-R\274\317\324\252=g-\245<\244\316\004=C\202\004\275\2256\346=\016\026p\275S\270)\275\023k\016>18\200\275P\220\340\274\361;\216=z\361<\275A\023\234\275\243|\323=+\303\377\274\246\245E\274W\3769\275\357w!=?\333$=\275x\301\274L\307\322=J\3022= 3\030\275?\330A\275@bB<k\325U==\351\247=\225\370`\275\304\313\205\275O\327R<\332\0229=\222\351\374;\2555\304=\377\322e\275b\222\205\275\017s\306\272\340\375\212=\334r\245\274C\244\365\275$\276\275\274\266\2019\274\265^\320\275\014\226\177\275\3704\321=V\014v\275\237\302.<\207\020\216\275\021\300\006<gA)\275@>\017=\232\233\353\274b\330\213\275\350*\244<p\"\245;\213\326\377<y\266e\275\\C\004\276\264\224\315\275\246\355\276=k\314\252\275\333\350J\275q\256G\275\030\032\245\275W\3637\275Kt\234=\253/\t\274<\376\212=\001]\016=\340\3253=\n\263\371\273\t\361\251=\215\240\203=!~&\274c\332 \274\236_a\275\026\264\267<\247\030,<@\3254>\n\002\375;X\201a\275ke\325<\314\376\313\273\273\022c<eB\216=.PG\275\017\303\222\272m\360b=\373\234~=\254\212\272=\272Q\242=\221U\024<\316\342A\275\377\360\243\274<\374\256<\0161:=\326[\253\275\340\250\307\274\227Z\r=\202\346\225<\317\3559\275\347\313\216\274\230[\346\275\024\000\215=\245b\007>\220!\337\272\300\350\002\276\034G\177\274\243y\263\274\nY%=\006\036\214\274$\323\272=\303\236\374=\213+8\274\266{\371\275\354?==\212\346,\275\366\353)=\313\203\322=\332\016\220\274\354\333\010=F\213\025>j\0230=\336\205\340;\252\316\246\274\262\344\301\275+\020\020>\246\211\373\275\362\322\263\274\203\250\371;\271\345S\275!\244\312\275\032\376\251\273\234\217\250\274!w\252\275\3640\301\274\350\362\t>\231A\220\274\234,\327<\216@\311=x\323\222\273\227\234\314<\342\201;<\211c\332<\265\357\332<\025\206e<@\310\301=\332\332\333\274K\203\234\274\017\014\034;\201\320\263\275]\2411=:\334\304=7\311m=_On=\351oz\275\006$\267=X\372\030=\301\'\331\272+\\\211\275\365\202\377\275cY\222=\317\273,\274\023\177\030>\256\274(\275\375\227\343\273&^\007>FAi\275\215%c<\317\'\025\275d\373\336\273\251\363\324=\222\204\224=h\241\201\275A+-\274\014\014\250=l\314\221<T\032\'=\002\031\277=\207\321\223=v\271}=\223\320\352\274\226*\001\276z\346\216\275\201E\\=\276\021\210\275O\216\244\2746\262\203\272t\006\211\275\216\370\212\275#G\r\276\264\237P\275\026\352\223\271E\216j<RKv=\327\241\241\275\327K\202\275\306\025@\275[\202\231<ya\001=5\360<\275\242\376z\275\357\266\006\274\037gH<e\354N=\004\251|\275\342B\214\275\242\024\224\274,\370\304=\361\235\211\274\t!j\2754m\341<\030\363V=,\346\275\275/H\340<\032\373!\276\373\010l<Z\276\262;j/\361=/\231\237\275\244*\202\275u\360\335<\325\3002\275/\267\375<S\030\300:\"\222`=\2055\264\275\230\177\321<\234\'_\275\264\350P=\217\262(\275\004\331\034<\2475\246\275.\372\261\274\257\037\233\275\177k\226=o\023\212<\3739\265\274,\235>\275\306\367\023>\351\024G=\324\335i\275\371t\221\275\265\320\322<\ny\244=\317\3236=\222\337C=\263\210y=T\303\t\273;\2535=\216\326\203\274\223\322\033>\325O\016\275>\275\002<.L\010\275\315R|\275FB}\274\250\277\025\275\363-\007\275\254\031\214\274\215\327t\275\262A%\274UC\365\275Qk\251\275@\031\025=\3545j=\372\036\207=\223(A\275\306Xl\274\301\017\267=?\3573\274z{\261\274@\252$\275\206\004\203\274\352\340\265=\342\3361=\025\306t\273\241W*\275\200b]\274\275vp=C\304\350<\355\254\333<\234e\017\274\211\212\311<p\372\221<\365!\205\275\227\325\004>6\211\267\273\341\336\277:\002\366\325;)\346\"\276\2467\201\273FL(\275/\307\324\275\254\223\016\275B\205~=_\243\247\275\360\220\010=\316f2=\270\342\323\2755\276\026\273\263E\001\2753\000x\274f\023}=Lv&\275\373\026n\2757\220\303=&\273\363\273=\367\234<&R\231\275\231\320\262\275^\200\334<\361\245w\274Q`0\275\335\325|\275\027\210\237<\032\360U\275\211\257\326=\377Q\006=\246\354\246\274\240\351\222;#\207\030=)\377;\275\t\024E<\251-\257\275k\252\206\275\270\341X<m\370\257\274\276\017Y\275A\331\337=\371(\227<\357\255\177=\252\214:\275\360\216\377\275]\277\324\274\373w\247\275:a\200=\331k\264\275\265\001\336\274$\376\303\274J\"]=u\344\021=5\326D=\325i\245\275\273\205\277\2758k>\275\246\\\037\275l+v\275\237\335k\275\257\331J>k\t\326\274O\237/\276\374-\250\274(\346\026<r\337d<\304;\305=oZ]\275\210F\205=\306{\273:\241\030^;\306\261Y\275\234J\344\275\376Q\277<AQm=h>{\275B\263\357=\3769\310=a\235\270=F\220\006\276\251\026}\275\312\245\234<\210\014\202\273\303\213\340\275\034\t\313\275)Cm\275\363\236\217;\350\350]\275h4<<\020*\244\274\010\346\342\274\244,\231\275qi\217\275\034)\207\274\026ZY<\215\023\304=\346\305\017<\231\340\016\275\270\222\034=*\006\006=\231*\036\275\214\245\010\276\010&p=\355\250\314\275\027\274\\\274!\342\244=\231\205\233;\315\230(\273\343h\312<\336y\020=\223\023$9\322*\323\272X\026\033<\362\325z\275\234\316\247\275\207\200\226\275\331\342\233=:w\320\273^\204\222=\034\334h\274(\364\237\275Gx\331\274\300\313\256=\034W\362;!+;=6Vt=\352\232\204\275\375\321\215\275\351\236(=p\334B\275\232\022\223<<\233$\275x\003\215;0I\300\274K\220\376\275\251J#\275\256\004\001>)_\227;;\206\304=\003\257x=\373\263\302=\345G\030\274+4@\275\261\265\023\274;\255C=\233\200\331=I\374\232=T\350Z=\317 \000=.~E\275\034sF<d\221K;\375\316\206<_\204\275<\201\262\213<\262m\233\275\224\315\316\274\353\355\t\276\202\350\'=\304\002\001\276\353q\036=Q\3754=\001\333\324<p\006W<\246Vh\275\353\227\232=\300\247\312\275.-\253\274jil=2\323\274=7\257\222\275\267\227\241<9\215\331=K\345\266=*\356\364\275=\327\234\275\222\254;\275\223S[=\236k\262\275\023\367\236\274B\257\207\275\241+\322\274\212\346\321\274~\3464\275\267\201\330\274\310\320\036<\322x\220\274Qw\333\274 \356\335\272;)\370\275\300\245\242<\336qC\274\227W\246<{\331=<\360\373\007\276\241OB=\235uo\275Yr\034\275N=0\274"
      }
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "LSTM_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/recurrent_kernel/read"
  op: "Identity"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Square"
  op: "Square"
  input: "LSTM_1/recurrent_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_1/mul"
  input: "LSTM_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_1/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_1/add/x"
  input: "LSTM_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/concat"
  op: "ConcatV2"
  input: "LSTM_1/Const"
  input: "LSTM_1/Const_1"
  input: "LSTM_1/Const_2"
  input: "LSTM_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "LSTM_1/bias/Assign"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "LSTM_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "LSTM_1/bias/read"
  op: "Identity"
  input: "LSTM_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Square"
  op: "Square"
  input: "LSTM_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/mul"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/Sum"
  op: "Sum"
  input: "LSTM_1/weight_regularizer_2/mul"
  input: "LSTM_1/weight_regularizer_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/weight_regularizer_2/add"
  op: "Add"
  input: "LSTM_1/weight_regularizer_2/add/x"
  input: "LSTM_1/weight_regularizer_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_1"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_2"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_3"
  op: "StridedSlice"
  input: "LSTM_1/kernel/read"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_4"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_5"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_6"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_7"
  op: "StridedSlice"
  input: "LSTM_1/recurrent_kernel/read"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_8"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_9"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_10"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_11"
  op: "StridedSlice"
  input: "LSTM_1/bias/read"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "LSTM_1/zeros_like"
  op: "ZerosLike"
  input: "LSTM_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Sum"
  op: "Sum"
  input: "LSTM_1/zeros_like"
  input: "LSTM_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LSTM_1/ExpandDims"
  op: "ExpandDims"
  input: "LSTM_1/Sum"
  input: "LSTM_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/Tile_1"
  op: "Tile"
  input: "LSTM_1/ExpandDims"
  input: "LSTM_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose"
  op: "Transpose"
  input: "LSTM_1_input"
  input: "LSTM_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_12"
  op: "StridedSlice"
  input: "LSTM_1/Shape"
  input: "LSTM_1/strided_slice_12/stack"
  input: "LSTM_1/strided_slice_12/stack_1"
  input: "LSTM_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/strided_slice_13"
  op: "StridedSlice"
  input: "LSTM_1/transpose"
  input: "LSTM_1/strided_slice_13/stack"
  input: "LSTM_1/strided_slice_13/stack_1"
  input: "LSTM_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/MatMul"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/strided_slice_13"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/MatMul"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_1"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_2"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/MatMul_3"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add"
  op: "Add"
  input: "LSTM_1/BiasAdd"
  input: "LSTM_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul"
  op: "Mul"
  input: "LSTM_1/mul/x"
  input: "LSTM_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_1"
  op: "Add"
  input: "LSTM_1/mul"
  input: "LSTM_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_1"
  input: "LSTM_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/clip_by_value/Minimum"
  input: "LSTM_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_2"
  op: "Add"
  input: "LSTM_1/BiasAdd_1"
  input: "LSTM_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_1"
  op: "Mul"
  input: "LSTM_1/mul_1/x"
  input: "LSTM_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_3"
  op: "Add"
  input: "LSTM_1/mul_1"
  input: "LSTM_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_3"
  input: "LSTM_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_1/Minimum"
  input: "LSTM_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_2"
  op: "Mul"
  input: "LSTM_1/clip_by_value_1"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_4"
  op: "Add"
  input: "LSTM_1/BiasAdd_2"
  input: "LSTM_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh"
  op: "Tanh"
  input: "LSTM_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_3"
  op: "Mul"
  input: "LSTM_1/clip_by_value"
  input: "LSTM_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_5"
  op: "Add"
  input: "LSTM_1/mul_2"
  input: "LSTM_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/Tile"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/add_6"
  op: "Add"
  input: "LSTM_1/BiasAdd_3"
  input: "LSTM_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/mul_4"
  op: "Mul"
  input: "LSTM_1/mul_4/x"
  input: "LSTM_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/add_7"
  op: "Add"
  input: "LSTM_1/mul_4"
  input: "LSTM_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/add_7"
  input: "LSTM_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/clip_by_value_2/Minimum"
  input: "LSTM_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/mul_5"
  op: "Mul"
  input: "LSTM_1/clip_by_value_2"
  input: "LSTM_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArray"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "LSTM_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "LSTM_1/TensorArrayUnstack/Shape"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "LSTM_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayUnstack/range/start"
  input: "LSTM_1/TensorArrayUnstack/strided_slice"
  input: "LSTM_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "LSTM_1/TensorArray_1"
  input: "LSTM_1/TensorArrayUnstack/range"
  input: "LSTM_1/transpose"
  input: "LSTM_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose"
      }
    }
  }
}
node {
  name: "LSTM_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "LSTM_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Enter"
  op: "Enter"
  input: "LSTM_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_1"
  op: "Enter"
  input: "LSTM_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_2"
  op: "Enter"
  input: "LSTM_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_3"
  op: "Enter"
  input: "LSTM_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Enter_4"
  op: "Enter"
  input: "LSTM_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Merge"
  op: "Merge"
  input: "LSTM_1/while/Enter"
  input: "LSTM_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_1"
  op: "Merge"
  input: "LSTM_1/while/Enter_1"
  input: "LSTM_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Merge_2"
  op: "Merge"
  input: "LSTM_1/while/Enter_2"
  input: "LSTM_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_3"
  op: "Merge"
  input: "LSTM_1/while/Enter_3"
  input: "LSTM_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Merge_4"
  op: "Merge"
  input: "LSTM_1/while/Enter_4"
  input: "LSTM_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Less"
  op: "Less"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less/Enter"
  op: "Enter"
  input: "LSTM_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1"
  op: "Less"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Less_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "LSTM_1/while/Less"
  input: "LSTM_1/while/Less_1"
}
node {
  name: "LSTM_1/while/LoopCond"
  op: "LoopCond"
  input: "LSTM_1/while/LogicalAnd"
}
node {
  name: "LSTM_1/while/Switch"
  op: "Switch"
  input: "LSTM_1/while/Merge"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_1"
  op: "Switch"
  input: "LSTM_1/while/Merge_1"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_2"
  op: "Switch"
  input: "LSTM_1/while/Merge_2"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_3"
  op: "Switch"
  input: "LSTM_1/while/Merge_3"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Switch_4"
  op: "Switch"
  input: "LSTM_1/while/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "LSTM_1/while/Identity"
  op: "Identity"
  input: "LSTM_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_1"
  op: "Identity"
  input: "LSTM_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Identity_2"
  op: "Identity"
  input: "LSTM_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_3"
  op: "Identity"
  input: "LSTM_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Identity_4"
  op: "Identity"
  input: "LSTM_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add"
  op: "Add"
  input: "LSTM_1/while/Identity"
  input: "LSTM_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/while/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "LSTM_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3"
  op: "MatMul"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "LSTM_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul"
  input: "LSTM_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_1"
  input: "LSTM_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_2"
  input: "LSTM_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "LSTM_1/while/MatMul_3"
  input: "LSTM_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LSTM_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_1"
  op: "Add"
  input: "LSTM_1/while/BiasAdd"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul"
  op: "Mul"
  input: "LSTM_1/while/mul/x"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_2"
  op: "Add"
  input: "LSTM_1/while/mul"
  input: "LSTM_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_1"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_2"
  input: "LSTM_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "LSTM_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_3"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_1"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_1/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_1"
  op: "Mul"
  input: "LSTM_1/while/mul_1/x"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_4/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_4"
  op: "Add"
  input: "LSTM_1/while/mul_1"
  input: "LSTM_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_2"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_3"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_4"
  input: "LSTM_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_1"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "LSTM_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_2"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_1"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_5"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_2"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh"
  op: "Tanh"
  input: "LSTM_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_3"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_6"
  op: "Add"
  input: "LSTM_1/while/mul_2"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7"
  op: "MatMul"
  input: "LSTM_1/while/Identity_3"
  input: "LSTM_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "LSTM_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_7"
  op: "Add"
  input: "LSTM_1/while/BiasAdd_3"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_4/x"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "LSTM_1/while/mul_4"
  op: "Mul"
  input: "LSTM_1/while/mul_4/x"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/add_8/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_8"
  op: "Add"
  input: "LSTM_1/while/mul_4"
  input: "LSTM_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Const_4"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/Const_5"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "LSTM_1/while/add_8"
  input: "LSTM_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/clip_by_value_2"
  op: "Maximum"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "LSTM_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Tanh_1"
  op: "Tanh"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/mul_5"
  op: "Mul"
  input: "LSTM_1/while/clip_by_value_2"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/mul_5"
  input: "LSTM_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "LSTM_1/while/add_9/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/while/add_9"
  op: "Add"
  input: "LSTM_1/while/Identity_1"
  input: "LSTM_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration"
  op: "NextIteration"
  input: "LSTM_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_1"
  op: "NextIteration"
  input: "LSTM_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_2"
  op: "NextIteration"
  input: "LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_3"
  op: "NextIteration"
  input: "LSTM_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/NextIteration_4"
  op: "NextIteration"
  input: "LSTM_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit"
  op: "Exit"
  input: "LSTM_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_1"
  op: "Exit"
  input: "LSTM_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/while/Exit_2"
  op: "Exit"
  input: "LSTM_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_3"
  op: "Exit"
  input: "LSTM_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/while/Exit_4"
  op: "Exit"
  input: "LSTM_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/range"
  op: "Range"
  input: "LSTM_1/TensorArrayStack/range/start"
  input: "LSTM_1/TensorArrayStack/TensorArraySizeV3"
  input: "LSTM_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/TensorArrayStack/range"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "LSTM_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LSTM_1/sub"
  op: "Sub"
  input: "LSTM_1/while/Exit_1"
  input: "LSTM_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LSTM_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/sub"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LSTM_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "LSTM_1/transpose_1"
  op: "Transpose"
  input: "LSTM_1/TensorArrayStack/TensorArrayGatherV3"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/cond/Switch"
  op: "Switch"
  input: "keras_learning_phase"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_t"
  op: "Identity"
  input: "dropout_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/switch_f"
  op: "Identity"
  input: "dropout_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/pred_id"
  op: "Identity"
  input: "keras_learning_phase"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "dropout_1/cond/mul/y"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/mul"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/mul/Switch"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/rate"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1417751
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/random_uniform/max"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/cond/dropout/random_uniform/RandomUniform"
  input: "dropout_1/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/cond/dropout/random_uniform/mul"
  input: "dropout_1/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/sub"
  op: "Sub"
  input: "dropout_1/cond/dropout/sub/x"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv/x"
  op: "Const"
  input: "^dropout_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/cond/dropout/truediv"
  op: "RealDiv"
  input: "dropout_1/cond/dropout/truediv/x"
  input: "dropout_1/cond/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/cond/dropout/random_uniform"
  input: "dropout_1/cond/dropout/rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/dropout/Cast"
  op: "Cast"
  input: "dropout_1/cond/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "dropout_1/cond/dropout/mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/cond/Switch_1"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "dropout_1/cond/Merge"
  op: "Merge"
  input: "dropout_1/cond/Switch_1"
  input: "dropout_1/cond/dropout/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5955162
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/random_uniform/max"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/forward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/forward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/forward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "bidirectional_1/forward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\257\344\022>\310\203\035\276Z\363\312\273\237\362\367\275Bp\355\275\303\354\225\275\366\004\353=N\322\316\275\261FQ\276J\333\277\275i\2459>ofa=\211<\n=\333\270l\274?t\253=\330\315\022\276\325\367\367\274U\205-<\001%^\275\217\327\247=\225\2327=\364\303\346<\005R\201\275\342\300\332\274-\221\207=\300\347p\275\\\034\333=\033zn<V3\311\275\366\000C=\231\273\212=\243\004Q<\350 5\276\361\016 \275\212|\212=\363Fa\275\005\0137\275\341\352\257\275\276\301*\275\311<S\273\325\333Q\274\037\275\360=5\026\003\276j\354\325\275\351\223\005\275\036\302\326\272co\202=\220\r\005\276\361_\201<\t\'i\2757\017E=\327NV>\025\227*>\363*\022>C\342\334\274\246}\234\273X\226\007>\020\320\023>d\\\366=(\006\023\274\205z\020\275\221\333\271\275\327\333\354\275\304\017\035=\357\241.\276\026\013;>\321\267H\275\251\364\276\275\311\\\013>\332-\221\272L\360s=D\020\363\275\2703\244=\021\261\001<\255\267\231<\010\255\201\274\202\275\331=\341\364P\275\n\374e=?\214\226=\314g\256=\356\307`=\306mq<\352$\322\274\232\217\367<\312\201\222=\365T\252=\226%\377\274b\303\372\273\025\220%\274\243f\030=+\325\006=\266C\r>\360\206\004\275\343\027\347\274/\301<<\360R\334=\235~\212<\326\342\336<a\370\005>\346\030\211\275\373M\202\275~?F=\264\243\200<\247;\010\276\230\207\245\2746\253E>eW\346<\362}\034=D\266n=$XK<\007\366\003\275\236\025\202=\256\025\273\275\271U\233\2740\302U\275\361\265+<\020y\362=>\001\333=A\223\006><\334>\276h\220I\274X\013\343=\225\333\\=%\002\301\275\366x\375=\352\257\372=_l\022\274\243 \322\275\302\344D>\327\371\016\276\344j\t>m\375q\275\232\271G\276\246\212\312\274\264l\276\275\377\301%\275 \201\t<\352\002\316\275\205}u\273j\250N>7\271\351;\367(\224=\020[[>r\362\364=\305o\370\275\273J\243\275\223\216]:bk\334=\275\332Z=4\311/\2753\217\017=6.\335=\237\247\004>z?\355=\204\354\241=\235\020\324\275a\265\334\274\216\373\210=\225{\032\275\267\316\013\275\246\027m\275\002\355V=\334\226\350\273\357B\205=\366\001*=h\004m9\207\276W\275\376\374%=\016#\334\274\274\022\004>A/\367\275Q\002|\275n\211\025\275\365h\230=\002\353\326\274\306\371Z=\031\316 \275\211!\306=\345\301\275\275`ov\276\262\331\227\275\2766\262=?\305\212=\362U\266\272\353C\035\275s\343$=,\336\241\275\355\353\240\275\251Rk\275Q\254\236\274\367\222\313=S\204\310\275\207\203>\276\225\232B\274@$`\275\207z\365=A>\034\275cr\206<t\211\364\274\001\3645\276\007\244\254=\354cV\274\312\210M=4\227\352\274\300/\203\275\240\233\201=\234/\305\275(\212\251\275\365\343-\275\225\212\253\274\254q\325\273\035*\246=\373%\306<IN\271=E\257\261\275*,B>\203\322\254=\334V\007\276\305\302\241\275\031~\r>\036\304\217=F\247>\274h\352\251<z(\345\275\242\220.=\"\222\222=\212\304\025=\035\327\261\275\301\312\256\275\340\304\037=X\304\217\275\263\n\252\272\327\"\n\275\030\350\026\273SMY\275T\361t\275\202i\004>\212\347v\272(\377D\275\201\177\325\274\246\216\224\275\262=\322\273\201w\031\276\356{\002=\t\332\230\275\353\250\025\274S\016\020<\037# \276\234\350\200=x\246\036\276\374zD\275p\027g\275\013\244\003>Pi\024>\261\311\262\275\327\ry=;\005?\276%\017\304=r[\221\274H\333\365\275\217\206S=\262#\313=\333\220,=\377\306~\275\211h\205=\347\224\231\275Qg\343\274\2346\036\276\000d6=\313\014\240>X\365y\275\335Wq\275\335\010<\275C\025\347\275\274\237\314=\nhK\275+S\325\275\323\346\220\275\345E\277\275\253\232\201\275\217\220\002>_?\006\276\032\0311\275/b>\276 Af\275\2321\265\274E\020\240\275\\\001\220=\020\036\305=\244\224\306=\276\024,;\374\264\t\275\013\035#\276\302[\231>Kn\204<\320\327%\276:qw=\371J\016=\000\247\214<=\214\337\275\004\263\252\275H,\313=\3560\242\275[\034)\275&/\304\275\276\002O\275m$\316\275\220\321\022=8\274j\275S\016O\275\371v\254\275}\327\336<\037{\304\275\314\326\341<K\306\033;\025+q\275\227S\347\274\213\372\241;\303:\353=\327A\">\255>B\276\3357\327=\241\006\310;\201b}<\321\220\236\275\217@\010>\026\222~\275\275\205\025\275\226|\225\275\2056\">GK\200<\357\307N=\334\2138=\326\333\'\275\313\"\303\272\221Z\204\275\256I\016\275v\234\016==$\222\275E\234\307=\266\271z\275\267]M\274\271\236\270=\004\266\266=\375>\311<,\010\250\274\323\275+=\236\325j<>\221\'\275\371\236\237\274\025{;=\273\026\315=t;3=\346\353\371=\200\306\266\275\264\224~\274lD\350\274/\353)\276\341\3435\276\305\351\232\275z\024\300=\202C]\275\224\341}=\270\212d=\036\346\371;\232_\305<\340\257\355\274\331\343t\275\3328\225=\222z\217\275\"o\310\273\251\214\244=\tn\324\275\211;\030=\241\261n=\354\370s=\372-\006>\352vZ\274\351\344\022\275A\206\t=\321\375\210<j\"\033=|\3373=0\257\212<\353\246\266\275\006\321\365\275\250)\003>\240\253\251<\032\336\307\275\005\204\303=5\277\005>\200\320\343\275\215\370\023>\232jy>\201\2027=\345\323W=\253`]\275\355\3621=F\307L\275\205\277\311=~\364\342\274\331\0256=N\277\240\275\260\216\356<\220w0>h\n\335\273f!\223\275\024KC\275{3,\275\026Qp<\376\201\326\275\347p1\275vZv\274r`>>\334\tf\2757\256\326=f\216\237\275\216\334\300=\\/\033=B\264\374\275\r\354\322\275\230nM=\315G\001\276z\307s=\342\200\234\274\215\366 >u>\007\275\245\230->vY\217=\330\354Q\2729\256W>\314J\221\275^4\265\275\253\211\255\275\"=\343\2744\324\324\274\244N\241=\233hO\276U__\272\233\202\'=\232\013\3669\331\272\023\275\373p\030\275(~0=\256\036\367\274\367hw<\236\347\025=31\323;\0315\321<\371c\335\275\025\351\014\275\262wa\275\n4h\274\301;\367=\224vm\275\252[\210<\210U\312\275\252\177\034\276o\263\004\276[\240\022\276R\034\277\274\341A\220<0\373\250=\201\350\023\275\025\307\252\275)_\010\276 \306\364\275\362/P=svI\274H\340\r<\374\013\213=\226N\022\275\034\"\204=H\225j\275\037z\222<\271\361\365\274\000Y\237=JN\255\275\2035\302=\275?\232<\t\247\212\275\270\021\200<r\246\321\275\346\016\364\274$7\264\273S\331\224\275pQ\377=\241\202\037>\325\036\213=\215\335\374\274\323\373A\275+\212\330=B\265F\275\260Y)\276H~*>\313\351=>\260\236\3209Z\204\213\275\004U\355\275\336\303\002\274;\330B\275\367\2369=\032\211\201<rhh=\277\345\253\275Q8,\275\206\265@\276H\351\331\275\022\364Q=u\320Z\275\344\211$\275\335~%>\"r\276\274,\267\264=\247\367J=\347T\r\275>+\216\275T+\001=\245\245\001=\251\210\210=\302\334\032=\372\276\201=L\324;\275a\206\340\274Q2\000\275\222B\323\275\272\212\177\275DS\334=\263\\\337\274\372J-\276W\016\206;\361/\312=,%\235\275Z\320\244\274\nl\337=B\225\203\275y\264\244\274=\257\232\275\315U\007\275\323#L=X\304\031>\tv\251\275=g\266;UA(\274AK]\275\267\351f\274s_>=\306\306M\276\246\026\302\273/)\037;\002\005q=\027[/\275d\330\232\275\023\256\367\275\022\030\214\275\022\310)>\252\203s=C\231V\275d\355z\275I\242\335=\313\212\301\275s\211 =B_></\314\341\275\302\332\264=\030i\301=\327\373\201=\014mE\274\000\031\256=\024\032\330;\\,\237=(b\203=g=\222\275\265\203m=\201\232B\275jQ+\275=/\017\276\032[ >\332\310%\274\2008d\275x\201\260\2756\242\035\276\000\2308\276\312\355\372\273\242\033&>\350\326\200\274.L\313=H\025\217\274zW\232<6\365\206\275\342\036\277\275=\343\257\275\352\341\315=S\257\352\275h\355\325\275V\305\207\275\272\233\221;^\325F>V3\346\2753%\242<\302;\361\275\227V\223\274a\230@\275\201\310\007;T\036x=gO\231<\177k\347=\'\013c\273\336;K=\354`k>\344\244\225\274\203H`\275Q\016\257\275W\200\326<m\320\302=\005\262\245=\323\227{>\324j\334\274\365+\001>\031Jr=\221c\031;\367\353\010\276\303\317V\275\017|\206\275\\\020\243=\344\215\310\275h\346e<\354\314\372:\345\373O>\356\205\334=f](\276\343N\273=D\016\324=\212E\026\275\\\006@=g,r\275\251\253\351\275g\034K\274\250\314/=\371@4>\336\217\345<\017#\\\274w\314\231=\214*\002\275Z\223\220\275\217\2337\276\332\263\255\275o\030\017\275x\260,<\234e\202\274\305x\224\275\031}\\\275p\023 <Y\243-\276\257G\020>0eB\275\232\361\275=\026\364\214\275\252Z\025>a\254\310\274\354\336\024>t\362\017\275y\321\034\275\224\017\n<\371w\323:r\360#<\035\374\002= \343\270\275\222\302\205=\264\003\230<\002\005o=\374%\177=b\033\206\275J\220l<O\260\263=\365(\236<\027\240\374\275K\345\201=\004)X\275\253\271\340=\257\360\365\274\3429\037\275\254\240\327=\036\203\210=\367{]\275\347\221\225\275\256\305\024\275?\322\351\2732\320\032\274o\337\346=\t\342\002\274Z\302e=-\276\031\276\264\214\372\275\321\275\245\275\232\345H\275\013m\357<R\372X\275*\006\230==\236_>d9\337=H\264&\275\345\247-\275d6\201\275\020\013\260<\256]{\276\255\326<\275:E\300\274\210\236R\275\273\036\230=\317(q\272\037-\315\275$\220z=\216X-=\351-4;\301\311\\\274\037\274S=\232\355\212\275\224\263e\273}\r\350\273\315\206\206\276-\215\365=\323\211\216\275[r\344\275\300\204\372\275\3551o=\010\002\304\274\005\352\023\276\274\237\325\275)\264|\275\206\344\250=!\3679\275i\277\006=\374\326\032<}\002\314\275\005ae=\236\017\342= *\"\275\340\354\232\275kC\n\276\006\367\316=\364=\n<\326^|<S\3469\276\322\030\236\274sS\'\276\'D\247=\024\354U> \370\271=\211\014\202=\036\241\036\275\304\261\263\275\347\275\016\275E\231i=\033\206\177\275\267\325\335\2756W\236=n2\233=5\251\351=\217\367\014\274\346\255f>=\314\202\275\n\353\006=}4 \275\277|R=\2173)\275\277\203t\2753\316\313=|d\263\275=\334\304\273j})=\227\345\024>\220\224\234\275=d\247\275\nE\020>\237x\213\2747\2523\274<\307w\274Y\273\211=\357o\260<\007m\221\274Hq\273=\255\261\r>\007\301\340=!\3052\275\267c\371=\314\272\004>l\014\304\275\227\022\037\275\333\325\227\274\3412\"\275\306\275\310<\257\350\246\276\307\211\205=\254\371D=\365\t\345;9\200\251<\374\302:\275%\017\306\275\351\345C\276\202!\326\275b\300\301<kc\217=\225`\275=\321l\223\275MI\205=`\3720>\2262\212<\r!S=!Pa\275\255A\276\275\357z\373=\225\3127\275\236\264\301\275\0303_\274)Q\t>\316k\206=\205\234\331=\315\377->\302\021)\276\262|\220\274\030\307\017;\367J\027=\t\036f\276%w\025\2760t\036>!\213B=\306>$\275\220\247/\275.6Z\275\350\352\210<\207N\272=\351F\227\275\346\026\033\275\300\316\214\2751\3671\276\tD\273=\032\267\313=D\000\322\274\344\355\004>^\204p<.\313\311=\204\311\276\274]4\n>\341=\365=8\245j=T}\221\272O\344\272\274\272W\003\275\206\317\346=\025y\243\275\303\001\006\275\334H/=\t\202o\274\213h\316\275\";\217\274\357\350*>\351\312\007\276\342\000\\=\242\023#\2756a\243\275\337\232\207\275i\373\235;\203]\304\273\247\027o\275\023\035\260=\252\026^\275\300\3566\275\360l\024\273\361\216\036=S^\036\275\357X\014=\224\352\307\275hH\261<\304\227\206\274\010\302t\275\247tZ\276\251\014\271\274\301\274\035=\334\273\353=\300\271\254\274\340\034\236\275\367\t\r=W\333\221;\325\250\005\273\376\327\303\274\007g\370\273<\005\214\275C\252\301=z|\303\274\235h1\2752\234\020>\rc\002\275%\375\027\275\304\374\206=\365\362a\275\340\331\274=Fe\201=\025\332~\274X\276\030\275\367\325\320=L\026\002>O\3500>\007/n<v\350\310<V\007\231=\373w\016<\301\031\021>DU\030>\345V\364<\341Z \275\035f\022>\014\224\006>\251Q!\276\317Z\307\275\010\347\275\274\374?o=\325?_<\250\t\277\274\362\342\252\275\207\210\016\276\304\031\335:b\006q\274\230v\026\276,\354\265<\006\025\361<C~\017\276\206U\020>\305\310\210\275\027\272\332\275\362\312\005\276wb0>\252c\267=\270J\330=v\302C\275z\205\211\273<V\254\275C\252)=s\364\337=$\3400\275u\271h\274j\203!=\222\276\335=\371ws=(!\010>\367\267\031=9\221\246\275\264\350\223\274-\326N\276Z\036\000\275\037#\370\2750 \344\275\350\360@;l\217\351=\261(\262\274$\010y=BQ\201:\t\001\273\275\0230\202\273\256\346\315\273\252\231\300<J\344\'=\251m>><cq=\313q\'\275\2373\023\276\rS\002=\330\263\034\275\317\265\252=v\220\247\273\210,*\275\247\277\332=\356\344R\275Rn\346\273\207\336*=\306\0061>\271\000\213\275\025E\334\275\240\250$;\215\260\007\276s\222\016>D\366\374=\200l\217\275\235#\360\274NP\034=\255\377E=\335cC=\344\277\247=q\032E\275\257KK=\250\376\274\275\340\010\"\275\325M\341\275@\275\005>\364^3\276\031M>\275\024\201f=J\0102\275\013d\220=\220,M\276\036\377\376<h\337\207=r;\252=w\334\222\274\203\2725\275\355\300\201\275\376\241\241\275\031\251\225=\343E(\274\341\032U<\201Q\206\275\332|\317<\343\312I=\243\\\365=\023\320l<\300\005\234\273\263\233\247\275o\354.>\337<\247\274\350!~=\304\231\275\274\251lB>\337\"[=H\020_\275\352\357\177\275\373-t=\345\321\261\274\3578n<s\207\027\275\010\201`=%\212\034>i\325\026=\027\256\006\275\212\010\362\274\001B\234;f\332i=>\255\210\275\034\311f=\271\315\345\274\003\365\276\275a~\266\274\265\355\351=\323\352.\276CS\241\274k\003\202;\365z\245\274\177\326\353;\210\353c\275\335\255B=\310G\303:\311\n\031>\221TA\275\020b]=\310[\321=\375\221\201\274\255\251p=w\n\230=\273Q\334\275K?~<\227\240\214=m\370\331:\304\371\232\275\250>M\276\343!\210\273\360\372\330:\241\354\244=^\005\000\276M\307\377<mv[=\347\302\204=Z\311b\275C\256e\275\024g\332\275\272?\247=\031}\026>\031b\n\276\035\317\314\275<+O<\030%\000\275\241\014\022\276I0\267=\340\337P\276\202\331\323=\244\006\'\272\302\315\326<i\322\200\275j_\250:\001B\222<\231\240)\275\263\200/>\311\026\250\275r\271(\274\332%\021\276\365\305\223\275{i,\276\230)q<j\217%;\357x\215;\016\265\261\275L3P\275c\303\024=\315\021)<G\372\323<\000T\323\273\rHv=\013\026\n>\273\212\316<\377\3768\275Z\372\213<\027o\032<\232\360\333=\266c\000\276\010\263\232<R\367\313=\017\241\356\275\242\212\017<\330\001#\276\010[\305\275\3102^>A\254\003\276$C\006>\023\206&\275K\223\016\275\206\005K;Y\237d=\340\036\222<H3\271\275\350\373R\276WV\205\275O\215\336\275\036I\033\276\351{\205\275\016\335\233\275\366\327\201=NI`>\376\324X\275\311\205\205\275V\356\346\275\000\371Z=\317\250C\276\272\004.>\201\010\362=qe\007>\003\030q;\356\267\031=\371\025\363\274\221\333+=I6;\275\230\017\'\275\031\241\251=\341\217X\274]\371g=\317\264m=\246`\270<\223I5<)\025\271=\242\245\244\275~\361\234=\262 \200\274\230\235\007=-\236\030\276\t\246A\276\344\303\030>\001\221\316<\222B)\276\234\037\314\275\251b]=\222\375\261\274Nx\216\275\276>\252\274\374A\213<\204\223\'>\013\"6<S\333\204\275#\014\207\275{\025I\274\231\236\014\276\255\2743\276V0\322=\266\357\016\275\377\022\222<\270\"\217=+#.\275\211P>\275\324\023C=,\256\323=\310]\314\274\r\373\250=\212;\237=%W\177=\310\323\017\276y\\6\276\254<\210=\244\3144\274\277\255S\274x\301\362=\374\3539>\026V\210=\361<T\273\261\345u\275Tu5\274\356\025:\274\333\315\227\275`\330\030>^\355o\275\233\362\023=\307\356\260\274m\205\256\275\362\313\024;|\353/\2756E\370;\347\361\202\275PV+\275\016\312\350\275\n\035\331\274i|\243\274\337i\034>#\356\253=Z\020\356<\243`\277\275\025\032\\=\213p_\276O\377\355<\332q\277<\313\255\257\275T\217\277\274[\010\207=X}\256=\317\2420>k\252q\274\332\010\037>\264w\017\276\251\271(\275)\005\203\275\355\314\224:\340- =\373\010\204=\035\345\027>\\~7=\\\035\322\274\350^\024={\006\230\275\220\311f\275b[\023>\264\311\000>\206g\252\275\2326|\275\027\303\223=s\023\243=\030\237/\273\347\032\027>;u\200=\213\207[<\274\2365\276V\304\336= \223Z\275\335p\336\273/\251\217\275\245\347\034\275\205\252\335=\302\266\361;$\2650=\274M=\275\213s\255\274\217\002\230\273\327%<\275\027\223:\276\231X==\032\305c:\255\021\\\276s\312I\273\214\357\360=\230F,=O\257\266<0\177\217\275\r{\352=r\227\031>\345~\222\275<n|=\247\264\260=\"\301\312=I\034\263=2k\336\274\364/\350=-\307\327=\310y\301\275\335\325Q\275f\203)<\276\311\275\275v\'\245=\204\247f=\225\0304\274 \351`<s\220\322<\225\0250\276\242\0011>\377\005\017>\"\r\217\275\332\321\225=\255\020\207=\234\2478=\221\350\332=2S\023\274\213:\367\274Sv\375<B\367A>\3129H\275\255\213\025\276\217\267\320<\365\256\362<\250\341*\275U\'[=\303\343o<\324\021\n>D\233\217;\225\324N\274\235\216\212\274\274D\362=\320\370\337<(\376\367=H\213\216=\' \247=WkE\273\307\032|\273rXI=\231\275U=B\t\230\275\274\020\016\275\025j5\275@\013\305\275\323V(\275\351\315k<y\211e=-~\260=\320\003\316<\220{\272\274b\260%=eM\'\274qAk<\224\346;>\265\027\315\274G\2055<\354a\314\275q\010\335\274\r>\310=\025pE>`b\254\275\370Xq\275b\373\271\274y[|\275)$\n\276\351\327\255=\035F\361\275t\301\244=\311~-\276\233\177\222;\360\360U\275@l :\363.\322\275/\204u\275\277\250%=\320\037\355;\342\n\013>e\001\177\275n|\262\274\374N\t\275N.\211=w\240W\275\352\"\010=\354\340\"\276\223 \213\275H\033\277\275\236U0\275\214\240\325\272V69\276|\377\010\276\371\377\231\275yG\\>\274\006\233\275\241Z\013;^q\331\275\035x(\275\027\002\300\274\370\215\254:,k\343\275Yd\204<\300\332\234\276\207B\312\274\034q\332=\324)\263<\311\346\261<\205\347\370\275\236\203\261\274\032^K>+\242\266=\274*\216=2R\016=;x%\275\240;\241\275\3671\034\275[S\311=;#/\275\260\307\302\275\020;\216=L$\247=6\214\307\275\026C\354\275Xz\274=\236R\326=\036/\242;M\035\247\274\253\333\177\275\343\210(\276(c\031\276L\222\254\275\372\350\225=\017\013\367;\310R\266\274\242f\360\275\341\021\024>tF\345<\333F9=\2265\336\275\305Nd<\350\316\003\275j?\234=uT\324=]\366\217=\022\375\010\276U\216S>\260:\230<\236\327%\276i(&<\303_\357\273\213\002\017>\337\360t=\344#\201=C\025\367\271K\271E\275\014\313\207\275\"c_=;\031\205=!\t\236<\313\327\225=\r\330\252=\335Do\275\231\303>\275\023\'\000\276\366)\335=w\275G;\363l\034\276IRZ\275!\313\347\275\213\320\241\275\375\356\017>\361@\340<\253b\214\275\263\322B\276Q\252\027=J\023\322=\311H\024>\321\335X=IB\200\275G\350\305\274t\254\336\275Z\336 =@\361\237=\236W\321=^LK>.\304o=\265\315\314=\216\006I=s\207\303\275\333\306\216\274\353+\336=\266^\323<v\302}= =\324\275\273\036\003\276+\207-\275\310\336\321\275\035\270\317\275\035\214\217\275\343M\245<\\0\003\275P\221\311\275\003\331\264<5\257\257=\013\004\302\274\343\213w=\266\275x;7S\307=\330D\324\274\355?x\275\224\367\326;\201&4\275\013\270\223=\370\014^\274\316\034B\274\224\200m=M\276\205;\312S\246=x\033\025\276\374\305\006\276?\232\013\2753\004\235\274#V\002=\227t0\275\316\234V\275/\347\344<><1=\354\363\303\275\244\254\"\274\331\266\301=\304\366\204=\2103}>\373\305=\276\314v8\276\362\340e=IY\224;\374\342\363<\370\265\335\274\004\243\t=:\n\306\274\314\303\311\275\377L=\273f?\303=(\245\016>S\333\177=\0313J\275%#\\=\013P\273\275\341\321\270:\003\022G>\007^A\275\3440\037\275\345\177\324=1\241\257<\211f\364\274h\356(>Z(\316;;\236\242\272B\354@\275\233MW\275K\027\237\274+ \"=\237Lv\275\301\034\222\275\010\n\245=\006[Q<_Y\270\274G\\\353\275]\362\020>\327\026J>\272(\201=A\026\231\275\311c\003=\237\312\252\274{ \341\275a\237;\275n\341\205\275\256l\250=\376\352\032\276\363\232F\2751\346\027=`\\\265=\246\271\001=\263eW\275\342L\217\274\361\301\243\275l\224\275=\324\312\347;\024\010\221=\n\241a=\347\362#\276\007M\021>\224F\255=\2733z=\370z\343=C\374D=K\265(>>\001\323;7\343\225=\353A\"\276\363zH=\273T\020\275_\2650<\211\031\335=\250\306E>\n-\333<\263:;>\303F\021\275\373\'\203\274zK\020>A\246\266\275/=\026\275z\315P\275\270\207r\274[\2417\274\342\220\020=\204\260\"\276\266$\262=\267\240\356=\232\315a=6u\225\275!\307\223\275\242R\316\274\231g\"\275o\212\221=e!\241<\024S\215>}d\\\275\017\3178=\202\262\256\274\227\372\020\276\033\300\'<&\212B\275\274\225A>\302\033\246<N\202\025\274\335y\255=\372M\340=L\352\224=f~\205\274s\353W\27505\207\275\266\035@\275_\261\256\273\326Y\235=\024\323\000\276\211\021\234\273\243q)=r\375s\275/\232\234=\346\340 =\306\t\211\275\177\235\326\275\022t\036\274\0047\246=\256\221\216\275\357\337\306=\006\027\305=\253>3>\315p\250\275\225\315\234=w\231\010>\302U\275=\r\360\225<h~\022\275Z\250\203\275\327\020\220=\322\301\\\275\276\334\322\2757\014\025\275\202\226B>\022\256\313<{\322\034=71\366\275\010\370\315\275\333\343\006=\017u%\276\334\\\275=\257\316\024\271!\304\230=\276\351\232<r\035\010\276:\255\027\274\225\265|\275\350\350&\276~\356\231\275K\202\354=\214z\214\275\241~\254=\r\210\034\276\220y\354<\311\'\324<\372\377\222\275\230a\245=a\302\217\274-\023:=\267|\342\274\235\037\002\276*\224\\>\277U`\275Y\"\277\272*\240\321\274!\213\317=\321\346b\276vKN\275\256D\027\276\335M\357\274\334\324\345<x\350\264\274O\344\n>k{\336\275\240:\262\274\306u\214\275\371\220\010\276\262\257\236\274N\235\317\274\302\356\022>ft\373\275\360\354\036;\2028\223<\272OU=\242\222\036\276\240\2017=\020\246p;\221f\030>f\351\325=W\2157>g$\314=\347\221\273=\335\202\300\275\3540\025\275\210\375\033=m\307\n\275-s\002\276\227jY\275P \326<T\224Q>v\021E=\240\247\212\273Y\215v=\332\t\241\275\006\261\205<\320|\354\275\231\253)>F_\320=\222*e\274@\2260:2\215\026>\355\337\336\275\310E\316=(\344k\275\266\340\266\275x\301A=R\347\027>.\200\362<\261\310\377\274*=\017==\313\035=/\202\302=\3448\357=\234\252\037=\2706\220=\372\275l>\\r,\275\3371\222\275\2612\213\275\026=\266;\313\244\374<\271\223H\275\305+\273=\225\206\315\274\321\273\217=\212\277\207=m1\306\275P]]=\002\241\211<\"\320\257=\305\317V=z_F<3)\"=\233P)\275\013\361\023=\201\321\006\276\321\320\240=\241\374\256\2746\270\316=\254\244\323\275\325\023/\275g#\'\275:\005r\275\210\363\364;\\\021.\275\335\034;<\"\323\316=\031~i\275\'\377\003\276\377\257\326\275\2033\276<k\222\313\275NV\217\275\022\014\300=P.\345\275~\320:\275\030q\221=e\323\320\275\034\340\232\275\247\350\023\275\373\260\274\275\215|\262=\302\003\t=\337\363\020\276\277\364==\371\247E=*|\251;\225\302\263:\016\331,>f\223\230\275\363}\007\276<<\315<t\262\365=\301\265J;\324\350\231\275K\200\240<\344\3320=\265\356\222\274\017\025]\275k,\232=cqr;\360\355\n\276>\355f=\213\023\362\275\350\026\326=\'[A;s7\374<z\344,\276?9\006\275\017\024g7]\353\003\275\315T\177\273\006;\334=Hu\017>\331O\244=5\315\372\274.\306R\274+j\236=\377\224=\275D_\023>Q\316\217=ts\305\272L\313\213\275\356B\240\275\312\033H\275\236E\256\275\377\367\017=\2564\033\275\327\307\223\270\256\024\026\276\023\036\276\275q5\231<\nm\034\276\371\265\227=\003\336=\274\227\236\025\274\r\301)=\227n\307=\nt\263\275\333\203@\275\261gE\274\363\314L>\253\034\377\275\0033J\275X\310)\275\333\377\000\274\035\344\260=\305_\016\275~\322\307\267u\264\234\274\377\177\034>T\223 ;\"\331\220\2757.\025>=\3623\275\244\024\006\275\031\267\210\275M\3426=\260Sd=\274\202Y>\314\337<=E]\035\276\3617\036>\037\367\274\275\265\030\005\275\336\364a\275\347\243\353=}\020\371=Y\335\255=4&\024\276\237\223*\276fq\r\275:\232\254=\007\362\233\274\026\236\006\276\302\326\364<4&\022>5z\336\275\270J\253=mk\314\275\"$\202=\360\356\370\273\214`v\275\344\024\343=h\256\263=\310\3070\275[\234\372=u=H=\034(\237<D\032\025\276\007!\251\275\224\362\201=\352w\355\275\240\374\344\2752A\\\274%\274\006\276\220\276\005\275\2264\031\275.O\271=\306\327\036>\234\350k\275\366d\216\275\362\037\006>\036\266\013=S\264\030<\316\256\240\275\346\2240\276\240\252G=\251\207\302=\303\016\275=\001In=\350bs>\262}6\276Fh\371=\360%-=6?\334\274+\203[=}5\202=\366\226C\275\214\021<=\363d6\275GS\210\275\026\206\202\274\305\240\020\276%\365\016\272\364\333\340<\210\204\346=\250\235,\276\t\032\224=\374\256x\274Z\200\032\275A*r\275\313\027\313\275)O\202\276\276\230.=\317\340\254=\301J8\275\354\036\265\275\375\337\243=\236\232\261\273iQ\006\276\372\223\307;\276\350D=\203<@\275\254\001\240=\242\352\230\274\0019!\274\304:\322\274\220\267\223=\324\356\354\274k\214F>\035\024\326\275\354\326#=4\267%\275h\267\014\276A\205\177=\177\234\201<SH\350=\016r\037\273\226\337S\275\177\325\302<\217\305\265\271\342b\212=\2407\350=\364B\233=\332\212\237\275\005F\010=RN\214\274\001\016\000\276\352\'\023>W\024\205\275y\214\377:TW\217<aeP\275\360\223\207=\214m\273\275\316o\314\274\314\001\037\274\373\244\374=\250>\357;\377\035\272<\324\260\013>L\003\\\272\317_4\275\376\2363:\363a`\275:\352\032\275>g(=\337\315\307<\037\020\376\275F\027\\\276\315\251y>,\312\331=\020\340\277\275\016l\033;f\236\254=\225z\016=b\307\025\276X\347l=\376\244\313;R\251\257=n-\230:aK\332\273\256\215\350<x\345\254=\220cO\275\037\335\n>\266\0324>i\263\335\275H\310\305=\266\221\303=Yl\234\275\333:Y=UB\322<\354\253\237\274\250\271#\275\305\3703=u\302:=\034\023\206=I\177\035\2754\257\212\275\021\305J=K\242\263=D[\235=\224/\265\275\2471\334\274c\254\027>\261\273\256=\376F\013<\t\004\016>\ttI=\365B\246= \253\211\274\\\007\247\274\3718\357\275w\351:>\017\003\362=\245\330\200\273\245\336\201\275>j3=\377\261\215\275O\252f<\2012\221=\350_S<\306W-=\261\254b=\351\352\220\275\3625\240\275\245\n\200>\247\305(:\273\0136\276\323\204\\\275\303\344_>\205\326\354\2751\225\315\275\352z\304<q\342\346\275n\320\227<\t}\017>\351\327\341\275F\263\212<Srx\275\3442\005\276\307S0\276\244!\231<\006\316F\276pr\034=\022x \275(g\260\275\335\324\277=C=\003>\010\207\252=\225\266\227<\263\024\350\274]3]\275\013\'\256=%\356\240=4_X\275&m\027<\235t;\272\005z\226\274\202z\002\275%\r@;\014$\304<^\320\252\274\t\3010=\212\017\332<\036\330\216=\373\245\022>\255?\335\275\362V\203\274\375$b<]\205\375=y\364.\2754\210\203\273T\256_<\202\310W<#\365\337\275FH\020\275\323o4\275^\255\177=\376\210\205<\206a\n>N\302\256\274\022\342\003\275\305 \177\275\361\322M\276OW\210=\326 \351=\307\260M\274\314<;\275\363\023\326\274\352\243\323\275\0332=\2746\326];\301)\332\275\367p\225=\240\315\010=\355y|=\036\020\335\275\006\225\321=d\242\267\274\032\024\255\274\014z\371\275\377{4\276T\2207\275\303\2255\274\351\370\020=\177\r\\<\037\003\002\276\177J\203\274{\2075:X\226{\275\212\226\334\275\330\333<\276\021\262A<ea6\275\202z\022\276b\271\310\275|A?\276\363\334a:cz\010>\345\244c\275\345\226\227=\017w\001\274\325V\307=\177\305\022>[\rO>l\262\211\275\370_l=\227}\270\275%D\223\275\312\267\323<\230\001P\275Nsy=*\360e=\006\246\026\276=\202F9\344\325\323\275c\236\325=\336\346\272=\302+\205=\364\331l\274;\211X=\177\007\230=\255\246}\275$8\276;\205\026\022=~+\201=1\200\241\275\202\"\234\274\212Z\262\275?\303P;k\246\t\275\005Z^\275`\216\275=a\323\375\275\335\310\201=\\\006\022\275\014\322O\274T\315]=\213\360P=W\312\t\275\350\343\202=[8\333=\251\343\361=\3641O=\324\315,\275\336\241\020\275\222\037\337\273\245\213\233\275C\336I\275\350\210R\2767\3674<\301\231\017\275\351^&\276|H\253<\200v \275\350:Z\275\022/\325\275a\205\230\274\020\363\252=+\210&\274\377\241-=\253B}\275}$\003\276\226\305u=\215\2035\275\013Tz\275[\226\005=)\261\010\276L\330\256\275\325\2113\275\r\247\267<\263\371\253\275\353\343\333=<\360\027>\320;\n\276\022\021\277\275\2419\025>\2518\000\274#n\025\2759\333E\275l\274\357<\360\0264\274Q<<=\270\343%=\375!f>\330\334a=\254\227\234\274\341H\251\275\203D\027>\333\363\017\274\320b\313=\271\366\034=B\035&\275\301\216 =*t\262\275C<\037\275\034\t\303<\005\237\003=\243\267\320=\036 \320\275\231\203(\276,R\221\275\016\274\264\274P\034(\275\255\362\366\275\236@\362<x\220\235\275\331\371\235=:\213\245\273\343\274_>_Y&\276\357\201%>\377\303&\276\351\254\347\275\237\2610\276\333*\214<et\026\275\003\001\361\275\362\"\210;<w\350\275\252\223\262;\271\275\341=\007d\264\2751\350I<\340y\235=h@\231=\023>\340<Xy\240=F\222\261\275\237S0\276\023\337\027\275\351\262\313\275\343\306\3008\275\004\335\273\234\243m\276kg\275=\327\026\334\275\035MG\276\335\334\261=\255E\371<\031\271[=\265\007\307\275B\374\2178\263RW\275\245\326\t\274G=\036\273s\312\376\274_\355N\274\007R%>q.\200\275E\327\364=5w\347=[e\377=\00350>\\\231\217\273\246\271\014>\337\037\210=\225\021\032\275\'\"\320\2754\373\371=LNr\275S(L;q\365\314=\003E\'\275\371\301\233\274]\200\331=O1Z\275\014\034\321\275\361\002\241\275\265+\205\275wp\234\275\337\240\370\274\3677\017>j\230\261=2\245x=\376H\240;jw\374=\374\351\353<]E\244\275\233\364=\275\237\367\301\275\315%\200\275A\r\354<\201]G=/r\236;\3113G\275Q\223\203\275\2106\311=vQ\272=\215@\222\275\020\007N=}\267\243\273\244\"\034\276)\241\240=\240\201\221\275\215\027\361=V\3058>XG\215\275\241L\314=\250_\200=P\201\201<3J==7\210\317;~.\277\274\270$\304\275\212\030\265<\233\204C\274\224\340{=!\355h=\330\265\301=vx\035\275s\027\221\275\010\177\027\276\241\246\307\275\3535\034=\373\342\271\275\231\316Y>b\034\273<\025\215\230\275\305\310\251=\276\216\207\275\027\307\016>\325\020\357\274\022\240\035>\272\036\004>\262\344 \276\305\215\203=\274s\005=J\266\356=\0005\323\272\320\361\241\275\204\307\271=\251\200w=\313B\211=\262\370\363\275\312T4\272^\246o\275\237\211M>/\037\232\275n\3369\274i\353\333;6\345\256\272g\'e=\226[\246\275\323\323\263\2753\346\215\275\016|C=\320`\035\276XI\210={O\307=\213\336\310\272\206\263U=\246,\007>\261Qb\275\030y\210=ga\327\275\331\014Y\275\340l5\276\014\016\276\275U}\027=\230\247\272=\304\200\267\275\217\370/=p\3468=\203R\360=\337\356\352=\226\005\301;\255\3001=*\376\207=\270D#=\315~\013>\360b\003<\247U\315\274\344\033m\276\317\277\367<\032\237r<\375\355\316=U\035|\275\231Z3\274\321N\026\275\224b\267\275\327e\232= 9L\276\374\236\202=\210\025\340=\337t\261=s\344O<\331\357J=@\375m=\371M\264=\210\033\237=\214\347\274\275U\361_<\226M\\\274\242\345\017\274\"\333\333=xt\256\274\023\245\251\273\025>\233<\203bp\275\264*\307\275L\216\326\274H\022\321\272A\305@\273\256h\211<\226\024\007=`^\240<\361\271\360\275\026\216\374;\206{\324\275\316\227\350\274\216B\016=,q\275=\033R\240=\237v<>\002\2701\275\rT\232;K\320\006\276\027\235\341\275\004\205\031\275\014\354\251=\237\253\270\275\032\3645\276U\324(=/\007\344\274\010\274=\274b\034\252\275\310s\374\274\371\026\212<\325\377\010\275\312\274\361\275@\217\347\275\246\205_=]\317\001>\257N\223\2757n\014\2757\254\276<5\023C\275\234\001\346<\325\225\242=\'B3\275k\244\335<\212#\234=\251\333\335\274\327\205\004\276\243\370\320\274/\333\317\275Xb\336=\270\t\223\276\242n\366==&\241\275pY\212\275\345\206\374<=\237B\273(\032]\276\273\340\030\276\001\255\242\275\023o\027\275_\024\311\274\240\257~\274:\207/=\200\230\305\275\310\310p<\'\203\202=\253\347E=\311\313\370\273\213\311\244\275V\270\205<R\340*\275\220\371\347\274=\017b\275\335\212\321\275\367\357\365\275\301\354\027=\362}\212=\345\261k=4\304\276<{qe\275\337*x=\374=N>\322\374\331\275\3038\233\275\362\350 >D\275\340<\037\026\263=\271\002\205\275\271\200\204=\376d\274=\355R\234=\205\t\230<\023Ge=1M\206=\330\260\364\275G\317\345=\276`\302\275bm\013\276\356\037\234\275\364\226\220=\377M\001>\300#\200>\352\351x\276\016p\006=!6F\274O\370\336\274Q:\232\274\215\020+= k\020\275\315k\213\275\226Z\360=]\364/=,\036S=o\rP=7\344\005\276\202\320h=\345}\003\276\356q\247=p\241\023\276&Z\270=w\374|\274\340\277\275=*\255\013\275\323\035Q\274\243\021\226=\3564O\276\277\246\330\275\341_\364\2745\270\333\275J\336\241\275GO%\274\026\202\314\275\214\217\211\275\3731\257\275\001,%\2756\355\003\276\267\251\252<4\245S\276\302m\027=\007t\035\276\0302+;\026\346\246\275c\r\274=\034\312v<\036\r\253=A\177\177=\2676M\2762c\251\275\003Q\322<]\023!;\327Q\t>2\304j\275\270\020\231<3\251\237\275s8\255=\002\010\215<\003E\236\274\213h\247=q\022t<\322\376\274\275\340\330\336=/\357\323\275\215&V\274M\256\022\275\'\223\234=/\245 \276\320!\257=\302\356\307=5\026\316\275\343\361\241\275\364\346q=\274\244\013\275<0O\275\000WH=\254\375\301\275\004b`\276g\007\371\275\377}\355\275i\246q=)\266\201\275\"\024\353<C?\333\274\346\210\335;\004\003\265\274\270\023\362:3\375\365<\022\213\333=\317\274C=~\373*=\336\342\\\275\240\354\321<#U*=\326cM\275\314\271q\275n%\277<\201\365\244=E\001\\=\306\273\214\275\261\3238<\306\304\006\276\374\257\020\276\364(\301\275R\027\337\275\006Z\311=;\216$=_\036i\275\255q+\275V(3;\364\214\202=*\025\355=6\n\337\273\342\222\227=\263%\033\276\262\234\r>\001M\333=zE\306\274\264\345\t>\007[\270\275\33461=\266\032\227=Z,n\276\277\346\353\274\260?u=\376\353\347\274l2a\276\0057\213\275\360\177\253\275\277\227\021\275\021\343|=W\222\274\274\212\264\330=U\222\320\275\271\361\277=\\\357\026\2756Xu=!6\257<\212\201m\275\"\017\033=\252\356\004=\315\224=>it\243\275\021\003 \275\361\206\002\276\320\267t=h\024\216>.$8\275\300\240\277=\235\320\311\272\326\001\302\274\023T:>\236\343\260\275\227u\217\274\376\272V9\230\356\245\272\026R\226\275\326c\350=1\030\277\274\027\367\202\275\030\3032\275\023W{\275\004&\006=\355\255u\275\236U\371=6\340\t>i\231\217=v\240.\276\247\266\315=>\3478<_\226\205\275$\212\025>\005\313\300\275\356\002\262\275 \271\206=\364\262g=E^\203\275\273\230\240\275\277\260\246=\017\035E=f2\200<\022]~=5\216\034\276\233\210\341\275}\367\252<\247u\t\276\256k$;Q\355\r\2751\220\221=\360\203\221<\200\321a\276\027\232\265=Q\003\302\275d\265T=\013l4=\323\341\274\272\321\314\004\275\251A\347=\033\231\273\275YY\371\275\355\243\343\275\025\235\023</k\245\275\207\322\"\275\373ue=\246\306\350=\010x\025\275\312\025\036\275\300!A=;\333\002<Z\321\216<\350\325\327\272\331d\010\274\337\365:=\354\274\035\276\303\323\375\274\254\3116>l\370\370\274)\252R\275\271\r\274=\331\364\231\275\036\006\010\275\032\223p=\275\232\254\275\274\301\246\274\243\307\035\275\312\310\323\275\264\265\243\275\236\243\021=\3540\013\276\\\362\370=\n\000\241;\252\326\014=\231MM\275\240\204>\276\262\003\214\274\3073\357=,\245\260\275\250\327%\275\345\213\037\2751\321d=\271n\301=Y\340\030\276B,/>\321|\236\274\336\206\016\276\304\332\272=vk\013>\247\241\377<n\266!;\225\3257<S\252\304\275\366\331\330\275bd\305\275\257\020\253=w9+>\235\275\213\275#y\n\274\346\337\336<\206\213/\275\020\014\363\274\370\212\t>\346\001\"\275\376\216\033=\n\210\021\273J\354\n=B\322l\275A  >\032\306\021=G`\225;\017P\002<V2$\276\240?\213<\211\2548=ri7=\223-\020>\2743\212\275*w\331<\005\236r>\376g\000=\024\345\214=\201\023\341=\036\r\260\274\203\215\257\274we\302=\300\321{\275\344[\207=\206\357J=\217O\225=\177\353M=\234\252\336\273\217\3350\276\220\036\343<\361\225Q>\212}8=\356\200\267=0\027>=2\327?=}F,=p\341\362=\263\236\216\275\275\271\213\275y\336\263=G\236\361=2\372\024<}\016D=v\3461>\311\255\010>\375u\226\275\256\343\311<:\231\376\274znO\275\2763\006\276\362\330Z=s\000\371=\366\306\210=\235\225}=O\357\254\275R\336\303\274j\341\017\2756\274\313\275\221\361\344\274Y>T\275\235\224\002\276\276\321\\\275\304e\231<\033\033M=|6$=\362\353\255<\275\0063\275}\3666>\317r\372=-\321\016=\252W\211=Z\222c\276\026\"+=\341\000\277<i\n\247\275\375\204u=\334L\357\272\350F\270<,\211,>\370_\227=E\353\254<\355_\232\274\221N\243\275\335!B=s\2753\275\267=\014=\235\211\030>\214\227e\275\373\373\372=\373t\304=\200n$\276\251\344\240=5\020\212=\327\362\213=D\367\234=\036\245<\276D[\242\275|p\000>W\266\327\273v\2232\274j\216\212\274\263\346\000>\377c\363<\271\270x\274Q\305\351=:}v=n\354\300=\210\025\004=\240\226\313<\212\215\001>|\017\266\2753\277\242=\371M\025\275\271\014\254\275\004b\221=\256}\257\275>\030Y>7\035\201\275\242\332\004\274\303u\231\275\347\257\256\275}\024\r>\261N\024>\235\205;\275]\253\215\275\223\014\246\275\337\217\264<\300~\315;\343\"\335\273=\347\'\275\244\223C\274\037\311\317=*97=W\241\032\276\340\004\367\274\216.\273=\310\377\272\275\273\332\263<\204\367\307\274\r>\240\275\217;\301<\376\023\263=w8\365=,Vr=\236\021\302=\027\177\311=\236\320}\275\222U\202\275\321\365\334\274\235\005X\274m8\r=\2045\270<\357\322\321\275\222e\207<\013\\\013\275\310;\372\275\344s\306;\322(:\274//\222\273\245e\033>\264r\307\274\230V\177\275WPI>\240\210\205=1ec>\305&\266\275J\007\351<q\267`;\307n\030\274\224\303\260\274\346\301\356<\226\251\025\276B5\003\274X\"\036>x\n\276=3m\245<`k\345\274\361\232\025=@:\263=(J\037\275`\362\r;\262@\333\275\024\265`<\230\330\322<\241o\007\276\005\337\347\274\316\356\263\275\020\210\242=\257\"\312\275!\274\353\273\244\205\016\275\r\316\006=\017\342\341=\254\354\207<\'\"~\275=\323h=}w\213\275\301\276\376\274\320\236\327\275m\003\013\275 \t\276\275\270\277\272\275\003\251\341=\327-\006>\205\031\212=\240d\334=+\'\037\275\014\205\364< \3151\276\223l\271\275A\033\006\276\2737\274=:x\316<?\014\235<\207{\330=\324\270N=(7\177\276v\214\037=}\312\366=\345\303\252=\354\231 =\350\272\205>\262G\r=\266\033\365=\033\3033=U\314%=\315gI\274\215J\\\275\233\'\243\275M\377\001>\220\253+8\032\0164\276\252@\344=\341?\264\275 D\222=Z\273{\274(\2260=\330\327\243<\037Q\006>=]s\275q5u=9\344t=3\266\"\276\335:\274\275hJJ\275\240%\301=`4\243\274L4\000=\021\334\007>\352]\225=\034\372\375\275\311{\233\274\225\260\023=w\334&\276=>\307\273\335\217\354<M\037\225=[\235\017>G\217[\276*R\227=9\"\037>A\310\242=*@\342\275B\362r\275\253e\t\274\326NO\275F\272\006<\303\310\306\275\233\374\302<` a\274\245R\341\275<f\003>\336~\350\275\353\322J\275\334\370\355\275?\331\020\275&J;<\\#\264=\331\014o>\375\256\033\276\324\255\237\275\025\370\233\275\2463\247\275\205\2403\274J8\220<\363\240\277\275\245\212\203\274qv3=P\232%\274\343U\t=\371\234\002\276sM\202\275\264\314\003>\302\255\303\275\367\304\256<\321\024)<\017vV\274\355\211o=\315\366\262=!\215`\275h0\004;rb\272<oQU>\016\3719=\271w\327\275\326\324\234=\301R\037>\177F\314\275\251\377\030<b\373\235\275\360\244b=U\200\304\275\222o\300=\233\3560\275\302\210\r>\0030\204\275$\016N\275\036E\007<\310\323\t>m\336a\274\301\'\t\275\254\311\352<c*\030>\373v\345=e]n<\241@\241\274\316s\255<\371\226\235<\202\006\000>\034\302\200=i\306\214\275\013\022*=\002/g>in2\275\363J:\274\314\360\224\274^\246\247=\\\371\371=\315{g\275P!\242=\240\'\037\275\325\322\000=\010\n\260\275y#\022=.P\326\275\361}z<t_\374\275)\221\000\274\222>\241\274_\333\230\275\305b/\274\205\267\340\275.\307.\275PA\030\275\254\317i\275\313\256\025=\000j5\275[\241\236\275\363\2120\276\265\363-\276,D\371\274)\365\022\275e\0220\275\226\020\203=M\020 \276\306F\030\274G\240\353\275]\354*=\311P\337\275>\244\343<\245\324\303=\332\247\224\275\013$R\276\350\236\205\274k\330_\274\240\215\355\274 b.\276#\337y=\222a\265\275\315n\310\275B\022\026=\350\216\023\275\231\271\300\275\213/\253\275\020\001\005>\265\253\006=\312\304\253\275{\230\206=L\r-<([\371\270\344}T\275\002\315E\275\376k\n>\007\324\r>(\2178\275\260*\277\275\303r\024=\374\337\214<\215ra=\243O8\275\221\304\"\276h\266\014\275$\333\214\275\014\342\220\274\025i\327\275\001\271~\273\3367\342=Hc\316\274\021\377\310\275\305k\337=\336<\247\275\007t\221\275|\356\273<\202s\235=\363\356}=.g\030=\2725l=\277mu=[J!=I\344\223=\275*Q=uta<\266\302\346=\276{C\274\217\007\023>\262\2651\2746n\027<`\305\203=\343\334\203\275\267V\242\275\332\247\271\275\212r\274\275o\241\"\276\353%\271\275+O\006=\032\205-<NkA\276K\225G=\001\255\017<=\317\'>\351\314 >\277\213\240=Ldf\274jP\364=9\254\024\275&\026\373\274I\364R\275\020\277v\275D\305\000>\177\223\324\275\362\257\267\274-YS\275\353\372\323\275\2546\320=N\337&\275\037b\211=\303\"\301=i!\017\273T\216\200\275]cu\275\327^\235=\030W\207=\374\277\010>.\326 <\302\236\004\276\341\340\r\275f\0047=T\r1\275u\265\205=0-n\275\031\326\033\275!\003d=(c\343=\330(.=8\215`\2767\230\313\274\201\221\264\274\310\325O\275\306\234r\275\313\360\222=D}\\\275\245s\'>~\274e\275\033\361\277\275\332p@\276\301\026f\276%z\320<{\334P>PL\205\275\327\260\033\276m\245\263=\243&,<w*\021=\246\206\021\275:W\251\274\241\270\007>\345\233:\275u\223\231\274\254x\276\272\007x\202\275Z\033\314=\030\236\033=\321\316==\264b\373\275\2058\000>!\247\216\275S\014\223\275<\241<=%\365\365\275Qm\374\275\214\333\232<\030\007\004>\017\000\233=/(T>>\'\312<\377\307b=Ivr>5\364b>~XH\275\270\347\215=\334\222\210=\231\347\206\275\371\214\226=\326s&\275\225+a=K+3=Vy!\275P\304\310\275\263(\304=\243\t5>\021E\021\276\251\311-\275\320E\326\275\320\251_=\240\006\322\274\362vi=Y\302V=vP\214=\270\003`\2751\252\002>\316\t\227\275\231\022\356=\0170D\275\214\301f\275\247\306~\2753\300\277\275\221\361J\274M5%=\373\177\310\274\307\2158>F|\265\275\223R\270=\3153\006\276\307LV=o)\211=\213\310\000\275\001y\254\274\262\220\024\274\215\351\364<\333\240a=\317\225\261\274\277%\256\274?\033\002\275\216\302\216=Tz\037> \230\'\275OF\342<\244!(>$\2330\275l\211\001\276[\342}\275\277\007\322=\272\210T=F\034\003\276\346r\330\274\257\203i\274\031\216&\274\030\223\302=[K\010\275O\234\014\275\324\273\335=-\274\203<\013q\253=An]=y\320\302=\274\032\232\274\332\235*=\231TS=0\320\200\275\025\002,\275\000b\377\274v)\331<\'UN\276\355f\363\275\277\250\005\2742\370z\274\262(\034>\027\021\343<A\023\200\275>\357\202=\346\351t=\013\260K>e\200\000\276`)\003\275g]\250<]!k=\303F\266=U,\237\275\224K\022=\230wx\276\357{c=s%q\275\375S\216\275m\334\240\275V\367\020\276\255\374\r\275S\006\204=\007])<\312<\031>W\214\'\275\203k\330<\224K\022\276\252\213\201\275\r\226\210\275\301pG<E\306\240=\371\235\031>F\305@>\252o\265\275\313T6\276\345.\273\273\024\332v<i\237>=#\307t\275\tU\257;\356\375\365\274\016\243\217=X\"2\274\2428X=\007\034\347=\030\232>=E\334\224=u\307\336=\310\240N\275\272\352\213=\024\270\310\275\303Z\014=\350\036c=P\371\263=\000\223\242=\370\033[>\314\342\014\274\354^\253<\234oY\275\310\353\266\270N\201u\275gS\343\273\024?\006\275D\314\301<\306\006\200=\251\rM\275{\274\007=\'\213\231=\272o\006\275\300\277Y\275\253\017h\274\225*W=\250ka<\361\311\202=\300\250\252\273\366x\350\275\203\t\312=\323\274\347<\0301\270\275&\005\332=w\'S\273J\003\224<\252+`<\260Q\307</y~<\370\200\332\275\2601\236=\2738\211\275\037\221`\275\350\341B>lI\370<\355\226\204\275\274c\255=u\236\346\274B\303\327=\267j\376\275\025\300<\276\306| =\"\000\007>(\320\215\274/6G<2\341k\274\274\211\n\273\241\276\254\275\21172\276\246m(=4\007#\275|p;\275\327\010L\274a/z94f<\276\353G\223\275\024&\270\275E\027\357\275\323\343\232\275\013B\372=J\267\236<J\304\267<=\343\212=\271{X\275/\236\013\276$M1>\356-\007>a\021\324\274N5*>8^\377=\356\341\324\274\326\3313>\312$58\314\310s\275\235\021\207\274\377\244}<!\317\272\274g\260\375<Q\3179=\347\0364\276\352\253\010\2769\231\275=\247\323\270\274}]\263=\243^\004=w\257\265=P\004^=Q\227\r=\226\310\220\275\023\274A\274\241K\r>]\340\014\276q\3348\276\356\364\314=\330\212\373\275\323[\302=\206\240\036\276\354\250\372\275G\337#>\177\365M\2752k\327\275\332\241\002\275\200q\304<\201\271k\274p\017\346\275\327-\241=\216\321e\274\t\305\003\275\246\354\033\2758d\022\275*Lp\276\211\'\234=\213~\351<\351\2304=\010\276\351\274\311\370\\\275W\331\033>-\260A=\267\225\322\275F\252\033=\003\223\362;\345\376\251<_\'\001=\372\267@<\207\002\354\275N\237\204\274\264\005\234\275\032\274\210\274~\033\251\274\037\021\251=\211\021\335;\222\254\252=\373\324[\275\026<\006\275X\210\206\275\230\'\231\273\356I\371\273\036\t\225=S\260\215\275*5T=\206\302\256\274\324\022-\276\020\216@=\243\200\004\275\352U\336=?\016\354=\224\036\230\276x\332\346=\2212\301<\251\r\324=\244\266v\275\014r\264=_\016\010\274!\t8\276\366j\037<n\211\034\276G\232\236\275\351V\373\273\315\264\202=\023|\244\275\021\014\277\275\253L\336<\240(\034\276\342:i\275\220\222\273\275<i9\275y\254`\272\207qO=`\301,=-\224|\275\222W\276\275\372#\032=T\336\256\275E=\304\275E\226y\276\3563\271\275\325T\240\273Lf\346\274\300\021\323\275\266I\367\275I\326*\275\204\020\202\2767\'\341\275\212\177\234=#6\004\275\010\254\217\275;\230\234=8\232$\275\264\273\353;\0142\343<\2742\215\276\002Tb\275\035m\374=\253\360\000\273k\372\037\2752`l\273\336\322\225<\271;\353<\266\311\273\275\024\232\374\274m\211\266\274z\026\203\274\361\004Q=F\035\367\274\233E =Uu\271=?G\217=\321\\\321\275\2555\007>\n\031\272\275>\265\256\275\306d \276\252\270&\275@\210\265=K`\335\275\226u\237=*\262\301\274L\037K\2750\023->d\220\n<\002)\004\275M\002\210<I\375A\275+X}\275(\255\312\274#?\034=\310\337\033=.|\205<\343 \002\275\'\022\177<\025\017\256\275\270W\266\275b!d\274V\301\016\275n*\373=\177\267M\275n6G\275\\\371\016\276\002\3334<S\263[:^\346\351\275\323B\316\275/\326\276=\207Z\370=\314:\346=Y\374\010\275h+>>\326\236t\275\365\tJ<%\"\217=\370%\264=\323\372\305=\2349Y>\216\'\037\275\017\233\014=\263=\237\275.l\242=\220\275\252\273\357\236==\332\204\320\273\004\247\017\276\213\177\265<\033\300W=\326$\201=d{y\276\312[#>\271\352\\=r\260\204\275md\273\275x\264\020\276n\365!>,\345)<k\366Q\276\214\325\027\276\342\027\341\275 \005\223=a\037\210>| \022;\344\230\261\275T\004\277\275\245a\311\275\004\212\'\276vV\305\275\026\226U\275{\036\204;?rI\275\343Ql=0\226A=0a\370\274\201\222\263=\325Rb\274`J\316\275\263\247\314\275\363\364\331=\242Q1\274F\341\252\275\351\224@\274\270\275\216\275\227U\317\274\245i\224=\335v\330\274d\361\014\274\2648\263=\342NX=\356\031\334<ov8;\001\335\357=\350\020\225;e\250\273\274a\207\214=Q\354\244=\007X\202\275\336\027\367\2747:d=\317\344\005\276\036\017\307<\027P\035\276\010\322\343\275\'\n\217\2741\2020\275\010\377\373\274\247i\246=\372\251\261<\022\326 =\243\373\013\276N<2=@l\027\275-\032\027>/*\227;z\261\231\273\034Y0\276\010\222|\275\312N*\276\252\373\231=J\227\021>\2654M\273\352\177`\275\253\236\356\275\004\314\206=L\317|\275\214\\\t>\350\216\310=\335w%\275L\'\261\274\360\310\370<\2605\332\275,\257\307\275\006\256\206\2756b\306\275\247.N\2756@\375<[\253\260\273d\272\010\275:\2651\275\361\250.\276=\\9=AG\027=\245\334\006\275\343+C\275$\303\274;\336+\211\274c\325\313=\261\367\205\275GM\002<\237xX\275l\311\260\275\224<\026>\027j\313<X\314\001:|\322\336=n\027\227=\025Wh\275\301qJ=\361u\342=jm\373<\006SX\276Q\224\027\276t\335?\275Q`\017\276\254\323\301\275\353\327\222=d\026\001=\360\3100>\014\350\374\275\177\303\227\275\3022%=]\205\275<\363\321\212=\205\002\341\273\n\027w\274\240\370V=\202,\312<K\214+\276b\322\002\276\210\324`=\027\263\373=\022\346.<|\243J\275[\267\352\275\324\274Y<\242\220\377=P\026\t=\022-{=\205\347V<\265\324~<\217Cm\275L\017\212\274\220\204\004\276\301t\374\273R\312|=\274\343w\274\2313\353=\314z\221<\245\360x=t\263(\275\345w\036=\024\227\360=\003(\031\276-\324-\275iX\200=+{\210<\327\223\007\276\032J\253\273\020*\021\276\005\212\021>\2011y=d\036\010\276K\314:\275\376\260\337\275)@V\276\236\013Q\274\345\263 >G\030\276<#:\270=$\334\002\2764\332\025=N\362\367=\246\203\376\274\023\2474\275\006\221\020\275H\261\025\275\301\226\260<\350\210&\276W6\303\275U\235A=\025\211\257\275\221\370>=\031\353\344\275\356\273\246\2753r\245\274\326\025\340=\311,\220\275\346g\212\275,\222\026\275\302\\\010\276U\344\264=\"\375\333\274\230@\232=elq=\220;\\:\r\023\226<\023\231\331=\235\217(=\004vp\275I\231\231\275<\025\274=\363\260\326\273\343\3138\276kU\035=\016\255\304<\260_\305\274\330\325\000\276\206p\002\275UeB>g\023\r>\325z\204=\0255\206\275\210\031\327\273\216\013L=v\007\365=\022.\234\275<JO\275f\212\3179&\371r\274\312P\255\275\346\355\033\276I\\@=7\252\215=\202\036d<\204\375\351;\342\023\032>X\231\177\275\307$\200=\204Y^\274\035\353\007>\252V\337=\317\274\264=i\007#\275\362j\021>\026\365\274=F\233\241=\304\263\n\273\271r(=i\365\346=\210`\333=\200\230\214\275\232y\344\273\302\260\271\275\332\210~=2\311\325\275\272\245\014\275w\274\360=%wf=\277.\223=M\351\342=\313\250\214=\373\304\263\274\335\353H\275\315\345\223=\177\3724\276T\320\346\273\210i1>\013&A>z\216\324\274\365\322M=\254\346\232\2757\230N>\032\027P\275n\027\222<\360\307\246=|\026r\275x\261\260\275W!1\275\\\013\035=\373q&<\275\004t;!\201\026>\000\221\230\274a\017\350\274\236A\343=\214\246d\275\201\031\\=U~\201\275\211-\022\275\274\252\032>\274\2011\275\366\272\304\274\260\025%<\323\002?\2754\275\004<\254\352M=\236^\245\2756\366d\2738~+;\313bu\275\3127\336\275\302\234\313\275d\200.\275h\232=\274S\305\317={n\000\275J}[>;\316Q\275]\034\021>\377\253\241=\021~\022\276=\364\350\275\026d\372=\245\272O=\022\001\236=\2065E\275\241\202\354\274|+\206<2\251\375\275\305\207G\275\335\353\022>\205q\001\276wT\022=t\230\203\274Y\032\226<\027\340\361=\354\347\020\276\341\323r\275D\254A\275\216$c<M-\"\276\"\376\235\275\237L\374=O\032\356=6\364\206=\243\305\203\274\234U\240<S\254\214\275\272\252\231\275\003NL=,I\303\275z\251\316;\366\016\326\275T\250\225=V+r<0\352N>\257\324?\275\221\223\335\275c\273\213\273T\255\252\274\2753\322=\014\264\034\275\224P\212=\000\'\203\275\371t\010=QZ\306;\365\025*\276\021\006\314<<\020H\272\220\273\244\275~ /\275q\233\010\275T(h\275\326\305\360\275>\231\220=\n\024Z\275t\2331>\256~c\275\361\264\207=\273\344G\276\3317\001=?\341\013>\005\017;\276\325.\223\275:g\340:\003\340\360\272"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/forward_lstm_1/Const"
  input: "bidirectional_1/forward_lstm_1/Const_1"
  input: "bidirectional_1/forward_lstm_1/Const_2"
  input: "bidirectional_1/forward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "bidirectional_1/forward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/forward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 974278
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/random_uniform/max"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  op: "Mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/RandomUniform"
  input: "bidirectional_1/backward_lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/random_uniform"
  op: "Add"
  input: "bidirectional_1/backward_lstm_1/random_uniform/mul"
  input: "bidirectional_1/backward_lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "bidirectional_1/backward_lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\270\342C\276\235\316\223\274\3562\247\275\263\302\021\275\2064\354=\366P\253=\360\301\326=\254:/=t^\277=\010\302\t\276\\\363\037=\276\340\003\276Q\370\314<\217\220X=5\347\250\275\205\035\024>\305>\253\274\375\225\200=-\203\010\276\361\014N\275\225\346\001\274\316a\274\275\036\276\237\275\024\230\227<\333\276\334=\251/\314\274,\224k\275\321\022\n>\200\211\364<wy\317\275\004#\n\276\202\244\235<\351h\264\275r[a<+\3400\275\261\311{=0S,=\214~\377=cC\306;q\232\231=mr\257=\'\276F\275kbH\275d\273\215;\037\005z<\rj\003>\355\201\362\275\277\013\263\275q\300{\275\014I\347\274\302/=>Zp-\27444\205=\357?\376=\177?\221\275.p\304=\017!\330=\354e\n;\027\251\232\273\377SZ\275;+\315=\202\307H=\014_\014\275\251\253\304=~[\275=\353\236\037;\262\341\341=\325\332\376<\361\033d<\000+\351\2759\267\n>\337l\020>\004`\301\275\004\316\300\275\306\276I=\355\262\265\275D\315\025\275\354\256\215\274\326$Z\274\022\354\317=\2204\n>WcQ\276v&\312\274\023Z\311\275v~!>\\\217\237=\246\262\251\274[\375\027>\255\301E=6\274=<\314$\214=/U\274\275\016\256\212=\370\326\017\273\232L*>\326\312\343= \000E=\334\370\006\2761D\013\274C+\224\275\007\371\317=\300 \210=QX*\275\0302\'>\210\373\n=\363\232T=9y>\275\337I\276<\256o\016;%\303\232=\007\024\365<\346\372\245<\315\274\016\276\267\0024<B^\034>\256\033\r>v\t\201\276*\020e=\303\265O\275fW\337<\311\234\r\276*\303;\274\207\236\223=y\227f=N\001\312<\345q\245=d\257\272<\002\226\210<\217\324\n\275=\271\261\275\277\341\177=\200{\360=\002\322\207\275F\2155\274\226\372\216=?\'\357<U\240\330\275\024h\302\275\322\207\253\275\200I\363\275\016K\245\273n\007\320\274\276\357\264\275\304\006\033=\250\316\271=\221\330\033>\206\302\016\276\347`P=\224\245\377\275\214\233\035>$E\031>\244\331\230\274{\303\326\273\364Z\304=\235\035\205<w\3742\275o\234\305=\231\277A\274\030\004\346\275\337o/=t\214%\275,\031\222\275\'\205\212=\210\033\253\273C\253\306\275\363\021\035>\032\314\240=\354x\371;g\347W=\306\366\222\275\2475\246\274\221+\365=\014r\246=E1\232=\245\241\304\275\014K\222\275\253\233\323\273\004u8=\261\273\277\275\216\020\317=[\035\224\273\341\'\264\275j\371\264\275e\243\020>\304Z\205<\275\273\t=xl\344\275\n\341U\275\024\256*\275\225S\221<H\261\261\275\014\312\220\275\217\260\236\274y=\026=\235\364\255\275\253D\021\276{\3775>HG\222=\307H\242\275\252H\376\274\230\316W<\333\217\010>\340^\267=\315\365\016\275\222\376W\274\302B\354\275\375XQ\275s\303\t\276W\354\315;\304\310a>2\241\227=\353\324\036=n\277\321\275\315F\223=\253\344\002\276\271P\274=\033^3>\310U\270==\350&<\371\016`<\013\261\"\276\337\023 >^\227\316\273\354z\000\2752\254~<-g\314<\201\036\201=\2578\3409\233\237u=\020\2423\275^\257\216\275n\367\340<\031\352\233=W\330\376\275\323A#=cx\013\276a;\223\274\373\371e\275\221\315\007>\337\261\207>\211k\t=\223\245\004\275I\2345>\342c\207=\344c0\275\017\355P\275W\002\005=\215\235\037\275o|\023\275\nF\200=\253\n\367\274i\347\244=\352D\370\275\275!\027\276\304\220\334\274RH\316\275\362`\307\275@\252\250\275F\265\246\275\'w\335=m\205V\273\017\236Y\273\026\355\331<\237F\004>\00369>\251\304\372\275\004\\\347<\260\3443=A-\304=}J\t>\377\306\234=c\212v=5{\264\274\316\230\007\276\245\r\375\274\037c/=\020F\376\275\276r\310\274!\027\212=\030\342\314;\210x\202=\\\351\353\275\3019\344\275\242\347\206\276yQ&\275\2002\205\275\213\325\247\275\005\216\312\275\314\265\225=\302\270+=\257Bj\274\\\301\334<\257\307Z>\352N\024\276AW\177=\222E\t=?\004t\275|\352p=0\334\246\274~c\230;kD\340=\207\323\034\274\317r\264\274=\2041=\337G\r\274Q\260\246<\245\347B\273\347\366\n\275\345\255\207=\025\316\354\272\267N\250\275ez\030\275\025F\005>\260\035\240\2755\034\036<\333\002\206\275P<\021\275\263^:\276\335\365\221\274\217\344\365\274\306S$\275Ee-\276e\303\341\274c\007\264\274\323\364K<\250lU\275]\253\333\274\3739u=\321</=mL\224;;m\252\275B\342R\275\361\027\373=\331\316\313=\344D\002\276Z\177\020\276\373{\206\275\344\302R=Cn\244=2\310\241\274\325\351\027>\022\205\211\273\250\203\320;,\022\"\273S\237x\275\2221\356=g\307\034\275?+P>\001\032\026\274\304E\206=\000W\232=j^f=\303@\226=\241\231\022>\013\373\242\275\264\256\354\275d\313<>\034\230\357\275\313\271/\276\024\323P\275\231\224m<\326)+\274\320|\016\275T\245\211=Mx\353\275\000\244Z<>\225=\275\223\316\257=\370\253\000<\270\367\366;\313\'\276<$\314H\276s\025\177=\010\207=\275\027\242\031>$\230\305\275:\361\375\275\363\010\256\274\231E\355=\237 .\276za\260=\354X@\274\261\370\310<\253\330\033\275:\375\265\274\340\334B\275e)P\275#>\006\275\343\251\035\275\322FQ\274\362u\036=u\312\024\276\257C\t\274\215j\311\275Ib\006\274\265\276W\274\211qG\275\321\005\"\276\303\203\003>\340\203\206\275u#\233=\376\320M=G\221\322=\230\036\315=\206\031-\275\003v.>\363\232\347=\n\032\037=\003^\010>\213\223\004\275u\355\240\275\014~\032=Q\351/=4\235\032=\224B\330\275v!\025\276V\310\330=\301e6=D\361\232\273\375(\036\273(\315\320=\371v\313=y\211\273<\005\277\247\275\031\254t;\357\314\304=\256\353\351<\013\316\311\275\rw\232=\363\351\276=\013o\202=\2659~\275\210\236\222\275\227n\177=\256\326\331=\264@\362\274\025L\020=\33007=\264\346\243\275\007\320\350\274\246U\337\274\224d\324\275\201[\215\275\330\312\257\275C\225=\275\274\026\021\276g\364\351=L\266Y>\334\267\306\275\351\361\270=\214y\212=\364\022\202\275\2008\213\275\306\334V=%\247\331<\205\360\231\274\204\2208<\026C\n:\2749\210\275B=\257\275\300\r}\275\257\003z\275\253\333\372=\357\351\336=Af\216=E\330\307\275\027\027\266\275y\202\270=\333\023\010=\371\346^\275\356>6=\335J\253=\350 s>\226\n/\276\010e\277=m\304\340\275\263\003\342\275\201v\301=\017\362!\275\207\303\022\276s\327\363\273\370}\000>\254\016\210\273\242\342\334\274\313\r\010\276\362\343\275<\213\261\250=\007y\225=\364\252\000\2769^x=5\222\347\273\347\253\307;\215\341#\276\335\307\257\275\361S\274<\273\254\014\275\247!\221\275\034\355\n\276\033Y\\\274\345k\217<<v\241=\266\242\224=\273\255\321<\252\313\240\275`-\242=\260\240\313\275X\020\307=[Jq\276\251@\345=c\261\t\276\034&\205\275y\344\034\276\361>\252\274f/\344=\324\'\242\275\367\351e\275B\177\276=\267P\244=\007\330\361\275\213Q=\275\336\204\333<V7\361=\'\366\275<R8\323=e\222\240\272\353\360p\274\322R\200\275\242\242\302=\273\033\003={m\321=\372!*<C\307N=j{\n\276\215\321S<x\022\211\275z\021@>\035z\313=\235@c=G\321\371<\306\223o\275\305\300\252\274S\346\002\276\177\366\006\276\360k\352\274\256\300\006\274\214\214D\276\224\321U\275\321\365\361=K\314j=\27731\275\t\307\230<\271\200M=\202\'\010\276\253P\005\276\257b\032\276\211\243@\274W\2022\275\255(U\271\3051!>x#\n>3\267\000\275\335vy\275\024&\251\271\342i\201\276.\336\316\274\240\234Y\275~\235 <U\3542<\257*\344\2753\267\215=\354\200\236\275\372\260\001\275\221k\336=\266K\271\275\226\376U\274\346\361R=5l\373\275\001\267\236\275D\335\243\275\004}\034=d\2061;\312\036\032\275\254\036/\275\3669:\275x\021t=\270\237\025\276\347O\270;\211\314\027<\024\334\267\275W\036\003\276\225\'{<\2153\336\275^yN\276[\372\034=\313<\215<\256\310\267;\210m\337\274\225\205t\274\303\204\r>\213)\273<c\355#>\376R\016\276\3167\307\275^\330\206\275\001a\245=l9\027\276\204&6=\002\221\300\275\'a\200=.\263\355<\320\237`\275\013\t\307=\327\223\";(\363d<\227\032\'=k0\204=[\235\263<b\227\032\275\362\330\036=\030\271\033=\244\300\276;\2427\225=$`*\275\001Q/>\351\031%=\353\344D\275\307S\005>\301\243\022\276h\025u\274\313Q\263=\247\321\002\276\371\220\250\275\365\203\236\275I[\236\275\227\017\n\276;\202a>7\305\254=)V\227<^\223d=g\336\005\276HR\013;\337\033\253<\306h}=\017Q\215=\240(\020=\241p\316=\333\373b=\364a\'>\255\255r<\006?\370\275\345w\024\273\240r\240=6\246\324\275\344\311\277=m;D\275q\'\243=\274\0333\276\005\235Y=cv\024\275\214z\024=\036\247}\275\234\332-\275\324\010 =\036\274\t=n\010h=\275e\216;Z\377\002=O#\255=\025\000h=\243\327y=\034O\240=r\236\024>\36522>\377\240\315=q\334\242\275E_B=\252\2223=Qq\273\275=ND\275\321\244\007\276\211\030\231=\242\315[>\274\"\312\275mZ\217\275\'\031>\274\362m\020>\260.\250<z\017R>_sj\275x\327\267=x7\265=\253\'\303<\305\013B=\346)\367:#\324\206=\013\372\227\275\t\245\267=\273\2029\2767\326P;\024\3469=\230\347\337=\217f\217\275 \366\275<\352\266\201=\335\332Z\275k\304Y=\240\363\306\273q\313\250=\253X\205\273n\333\322\275e\270C\276\315\327\336<\t\313\265\275\001]r\274\n\365\260\274\237\367,>Si`\275n!7\276ni\t>\217\327\026;\321\336Z<\355q\212>\234\021!>Q\321\217=\237eZ\274.\273\177=Zv\363\275>\277\n\2769\262\331<\207\304y\274&`-\275E4\233=@?z\275\355y5\274\252\307\317=\265\301h;\276\343E\273\351\\\272\275\243u:\276\260\177\210=\352ds\275\312\\U\275kWP\274\253\014t=\356\177\335\275\033P\262=\204\310\246=\370(Z\275\2059_=LP\351\275\311\213\354;\210o\215\275=Z\303<\010[\021\276\017NE=G\3136>wg\263</\245\362=$7\001=\017\234\313\273)\341\263\274(sc=\241X\212;\344f\206=F\243\t\275f\031\251=\360\231\230\274^j4=\263\362A=\006\376\221\275\342\223\364=\361U\313<\3700#<\020\235\212=\002\217\253\274\213\033\277\275Y\303 \276\344@9\274\371\230&>C\002z=>b\306\274\306S\231=\341\022\320=\265\365\303\275O\330\013=r\007E<\363\370\260=\272\375\"\276\353\341\202=R\301\215\274IP\307=\364\263S\273_\307\244<v\255\352=0\242u\275\356y>=\244O\273<@\360A\276\363\347\340=|\260>\275Zp<=\261b$>\374P\246\275\265-7;~\320\024>\234\374\347=L-\226=\377\302\333=\027i\017\276\271\232\365\275s\373\201\275\276q\262\273\0067\367\275\000\377\310=@i2=<\0246\275\350\024\301\275\270{\233=QE\t\276\201\305\014:MH1\275)\271\343=\200\217\n\276\307e\225=\316\221g=\277b1\275Y\272\344;/\311\334=1:i\276\221\316M>:\342%\275\345:\220\273]xz=\217\343==\201=\225\275YG\214\275\254\007\021>\356<\344<\323\252\210=\254\254\204=\300\376\021\275\022@9\276\030\214\246\275\371\336\r\274v!_=v\212a\275\357D\t>\240\202n=\030\354\274<_\332$>\214i\363=v\\\311=\277\022\211\275\263\200\332<r\274\364<\246\376\206=\204\033\010\275~\323\250\274\036\225/>o\32158\177=\273=\021h\r\276}\327\217=9~\207<\333A\246=\251\327\022>\360\307\225\2757\217D\276S\260\234=b\360\373\275Js\332;\337\237\222\274i\272\267\273=\013o\275\363>8\275\030\252\017=x!p=\314\247\217<+\224F<\317 \"\275 4M\275W\262\342\275\324\027?=J$\341\275\304\032\331=\022\326\205=\200]\206\275/lJ=\314\333\021\273{\0245<<2\302=\355\271\300=\027\277\346\273\256\241\365=\362\031\276\275\277q\024\273L\250l\275\250%N\274\264p\253\275X\305\225<\251\343\362=\256\375\026\274l0/=\267~K\275\234\252R\275\353)\305<\177\332\274<K\322e=\332\357_\276\357\325\233<wD\014\275g-\235<\320\2127\275\261I\231\274\001\r\003>\203FA\276\362T\303=2\"\245=\252A\307=\212\371L=\265.f\275\036\020\332<\221\035\364\275\036\227y\276\327\270\271\2757P\343\275\330I\177\274\374\322\202\275P;\257=_\376(>?\316N\275\326\301\013<O!\342\2757\340u\275\277\324F\274\3476:<\013\020\224\275\005\3558=*\235\010>S\023r=\366D\314\2749\024\255\275y\263\027\275\341\274\234<\315\236\242=\005\000\004>\234g\005>I\247\230\275SC\035>\240\361X\275\021*]=\335\372\226=c\2063\275\217\221\245\272 \245\247\275 b\234\275\245\ti=\222q\201=\350Sr=?\032M;\246w\267=\000\275\002=s\204\2778\222\251B>d\210#>=L\202=!\0038>\024\376x=\324\033\236\275\226\'2=\016\372\'<\241\256\001>g\010\301=P\252\260\275\035O\313\275\327\312\376\274\377\243\211\275\326\241\243=:\232\265\274\220\250\340\275\221\361:=n\327-\276xD\300\274g\016\333\274V\200\310=Zz\346\274H\322\310=\377\002!<\217\325\023=\365x[\274\264\245\221\273\255O\237=\022=\t\276\235$\211\275KE\376<]g/>K|\034<\026i6\275\217c\023\275\035\372k\275\000[\300\275\217\323\001\276\267!\316=\234\277\251=B\263\370\275p6\344=\303\033%\276\371U\231=\333n\227\274\244\374\302=\241\311/=\245IV>\306\305[<\003\235|=\003a\211\275\033\251\231=\205\300\033=Hs\212\275\215A\346=)\321M<f\312\345\275X\345\363\275,^A\275\314*\326\275|N\212\275\361\251\000=x\375\305<\254R\201<g\177\034>\034A\310=[\221W=\\\351\226<\210\276]=b\020\">R\3728>\224\3252\275\242\027\033>K\360\215=\363\213\357\274H\247,>\310\320\014\276Gx4<H\272F\275\326\337\262\273\225\013\253=\023\026\305=\261\3120=\267.\236\275\340\376I\276\254\204\350\274[\002\212\275\305l\331<\010R\324\275\352\026\221:.\373\313=\241\317\t<\344x\352=\216\020U\275\241\305\030\276\237\217\325=\366\332M\273\007\276\313=B\036\202\275tM\340<\r\251\030>f\2257=>kc=\321\271H=\034\232d\275E\350\033\276p\254\253\275\270\275\331<\327\276\021>\2216\227\275\244\331\225=O+\033\276\264\272\271<\331\017$\276`\'\216\275\226n3\276Y|\334<U\330b\275\033\364\r>-g\255<\265\315\016\276\246\017\236\274\224\256\211\274\363\336\226\275\254X\222\274\322\300\242=\342%\037\276\345Wi\276C\006\311=+$\177\275\025u\233=#t\245\275)X>\275\372\r\025=\276\227\274=g\022\030\275\276~\037\276H\244\242<:\266\366<\317`>>n\231\220\274Z4\332\273\307\'I=\215\300\335=&\003\305\274\033\035x\274\306Mo\275j\214\007>0\273k\275$\232o\275:\013\251\275LB\376\274\207\200%\275\032\264\033\275\013\372@=\306<*\275\035\006D\275\221U\226<qQ\203\275M\006\000\276Q\231P=\356\005\036>$/\031\275\370\227\201\275>1\004\276a\215\276\275\307\324;=;\337+\275\'82\275m\240\343\275U\317\\\274\230\017U<_\"\013=\201\021\222=h\003\216\275EMM;Q\251r\274\242\017\242=\362M\271\275mM \276\330\302p\275\257\252\222<\266\375N<]\360\271\274o\026q=x\253\022\276z\2451<l_\n\276\262Pg=\3251\204=\241M\331;\0056\223\275\217\210%>\014\350v\274\023y\333\275\"\320}=\376\210\025\276\274\247\361\274\030m\265\274\363\033\007\276Y\025\302=\3752\370\274W/\212\275L,\034;\030\364\3549cX\357=X\315\356\274O\275\210\275\343iD\275\254d\030\276\333\2054>R\363\r\274g^\256\275\211s >\202n\206=\271\"2=\033>B\275\307x\034>\320^\267\274\3252\307<U\023\231=\373d\001=\335\325h\275E\375<\276|\301\021>\006\305\035>\032\253j\274an\216=\263\207%\275#}\274\274\341\000\250\275\244y\240\275\371JH>[\3000\275\310+s\275Ys\362\274Po\341<\261\236\261\274\300\025\370\274u\223N\275\315\267\315=\033\263\362\273\340\263\201=)\307\344=\222\213[;\022K\033\275\006\351\202=G\361\021>T\014\206=\3635\260\2752\351b=\226\017\004\276\034\267\206=\030#\"=@\263\236=\037\3350\274\017\364\270=\360\361l\275\177*\032=\017\022\374=\260\332^<i9\276\275\271A;>\224/\327<\026\270R=\3613u=r\272\323\275\272\346@\2761\331\n\276\366\274\024\276\375i\224\275\371I\213\275+yR\275\363y9>\031\177\235<_\005c\275\354\032\027=\351\260\002\275\223\024\265\2747`\2368\201\320D=\202\210\367\274\263V\257\274I\344D\2752\017\245=\307.%\275\361.\341\275\027\003\221=\024\235\222\274\353\004\013\275\326Y\227\275\216\255\310\275.=K\275?\317d=\374V\030=\200\214\203=\217\314\211\276\352\203a\276\260\350\255<\206\324\242\275\357\224\215<\210n\000\275\230\032\257<GHA\275\274v\203=\177k\312=\320\241\240\272\360\024\356=\242\320\t>\264+\247<gaB=\2716\225<i5\030>\216\224\244\275w\371\367\275EC<=\355\220y>\221\357\013\276\360\n;=s\373\246=\\T\273=nl7>\031\300\204=1T\274\275\342\'\231\274\220\250\304\275s\005\325<D)\n>\331\\,=\301\373z\275\273 \t>:\220\231=1m\237=\315i\r\274\324v\377\273\"\326C\275\016_6\274\025\014!\275\037\300\316\275Ok<<\t\242,\275\026/E\274\223t#>\343\260\367;\2608\375<\314<\366\274^\003\227\275b\222\217=x\305\332\274\306\223)\275\000\2778\275\355\367\317\275)\005\006>/AS\275\321\336\036\275\'G\355\273\177\217Q=\036IL>k\272\363\275\005\306}\272\252t\n\275y\036\005\276p\2348<v\246a\274nI\204=\255\324 =G\335d\275b,\221\275\"$\034\274 \r\030\275\256&\232:\'\266\254=xo\035=\254\310\263\275\2033\230=\306\274\371\275?z\253=eJ\254=\312\017\243<;\312\262\273\365w\207\275\316\274\022=\214\273\023\276\016\320\222\275\037\376\226\275pn2>f\327!<\006\227\346=\303\277U<P\244\252<\232A\203\274\273\261\202\275X\373N=\342\3022\276!\001n\274\317\345#>x\265%<u\254\204<[t\017\276\377G\270\275p\320A\276\356\244\247<\312`\214\275\347DO<>\247\013\274\204\360\230=w\020\025\275aQ\t\276\246\333-\275j\036\345\275\223?\376=t\3130>\224\326\233\274\322\373\213=\363\007\263<g\276\363=[\030\356=\217\376\214\275oA;\275\244\324\210\275\273\347\252<\350=\365=x\221\251\275=t\205\275\027\030\264\275\374!\200\275:\257\374\274\234Z\372=9\360\025\275\310)\362=6\240\357\274o\304\211=\260\372\230\2751p9\276\006\323\216=\301\225\n>Z \261<\324\t(\276\021\350\327\275\372Z\214\275\017=\016>\007\341\276=\r\007\313\274\230w\374\275=Ju=\377\310\361\275B\305\204=\271\340\261<\\\027\347\275\2255x=.\233\205=\0363Z\276c\333Q<Y\336z= \234\037\276\221\014\316\2750\014\362\274\036x~=`\007J<nl\n\274~\375\017\274\370\tO>?\217D=,j\234\275\006G\276=\266J\274=}F\013<\033/\'\275t\327\265\273\226\225\273=\034\003\013>\365m\032\276p\254\246<\374\271-\274i\014\331;\214\2706:\232\273\312\275\367v&=\271\316P; \271\0369o\321\260=\200#@\275t\035g\275\353\373\272<V\364\332\273\356\034\227\275\203@\236<\364&3\276\0334\207\275\033a\252\275\256\t\362=K\260\\>F\347\275\274\366D2>\304\335\325=o\300\371\274\303\217\304\274\252\231\016\276\350\254\265\275\217&\210\275\375\331z=\017\311\355\274\250\244\245<\317\211\030=(\004\221\274\227\321E\275\2053[\275v-\220=6]\027>\263\327E=18\003>\353\376\231<\374\373u\275\341w\023\275\003\367\357<s\363M<\342\010\007\274\360\023\246\274\214Y\351\275f\021\320\275\231\241\215\274\212?\271=\373Lj\273\254<\035\276LQ\317<`\212\221\275\252\222\035>\202\003\325\275o\301\341<\227\235]=\344\316\233<\343\3141=\233O\024\276\312\206_>\311\243P\275p\314\037\274\224\224\026\276\262\272\365\274[&a\273\213\204 \276\034\305\222\275\202Y\343\2750T\213=wAv\274f\027E=\331\260\260;3\004\251\275\273\261N\274\331\201\271\275tH\026=vy\377<~\242\230\275\031{\340\275\320\027f<\t\205\035>\356\271\034\276\240\213[\275\203\366V=\3612\264=<\035\030\275\247-\232\275mm\007>\2530\226\275\306\341\330\274=H\037\275w\r5\274\227\266S\276\036\314\t\275\205\264\206\275\307g\347=-\3004\275\262\306S\276\333M`\276\271\256~\274\216\266\355\275z\311R<\361+-=-\243\205<EJp\276t\030H=p]e\275\300\321n\274\367x\263\275\301Qe\275Q\343Q<\205\014\216\275\264~\353<\373Uo<\223\222\317;LT\263\275Iy\204\274,&G\274\013\262\236=\357\264\030\275\275i4\274\364\251\361\275\235\230C=\311\307\267=\303\002\240=\t\240\215=P\365\207=\014_\010>]r\371=\263\300\242\274\350\333\222=\327W\247=\347\311\266\275ox\240=O\365\031<\262\352K=\223\334\365\275/\350\003\276\177\337(\275\006\354^\27304\276\275\251\006M>\225\251u\275\263\352\252\275@\2569\275\037\200\341=_\322\212\275\362\304\221=P\302\245=\274r\234\275\327h\316\2740\031\347=\336\004[\275\254\2733>,b\"=\277+\200=\233e\"=7(\010=~\025 >\345\231\340\2754\301D\276\345\331\035\275\027\326\341<\233M\263\275\022B\363=1\037\247\275z\246\362\275\332Z\262\275c\247\267=\007\201h\275\336L\003:\277\325\307\275\037\331\347\275h?\003;\n\325\276\274\207Z<=v\326\344\275#\032\362=\340;\262=\372\324\214>\203\231\311<\245\242\207\275\034o\344\275\374\276\203\275\013\301\020\276\254\310U<\376t\035>\323h\356<\324\231\362=\250\2701\275\303\367\217\274\247Z\206\275\203=\370\275\270=\207\275\273\003m\275Q@x\274\213\357\241=\r\032\231\275a\326\220=n\273/=jE\352<\310l\003\275\240\315\320=+6\032=O\244\252\275\222\017\237=d\014I\275B\377z=WK\254\275\252\032><\244\3259\274\331\345\370;\353I\320\275\023\353\254\275\026\262W=7\003\023<\225\241\\=\372\345\336=\022\272\274\274q@\372=\220w)\276\270\003\240\275*3\220=+\205\307\275\300\310\002=3/\r\276\271\272[\273\253(\224\275>_?\274-]3=\256\232\034\276\237p-\275\335\302\255\273\324\322z<6@\273\272\275x\031<^\206\000\276\302\003\261\275\347\271\256\275\030\234z=o! >\237\355\004=\226;\220=G\006\317;{e\373\275\235\004\345\275\313\t\225;\354F:=\314\314\204<y\212\374=\303-v=\022\316{=V=\010:$I(\276\204\304\010<\0167\264<\370\251\256\274\353e\361=!\210P\275z\036\230:\233\361\273\275Kvd\275\320\367S>\334B\350\275\225_\200=\241\202U>7B\273=M\000\335<\324H\312<\361V\360=\033\267w\275,\324,\275n\262\260\274\202\t[\2759\230\306=\314D\361<?\335\305=:\346\024\276\032!\000\276E\314\266=T\0039>\262e\230<\301SX=\252\330f\275j@\242\275\027\213\031>\306]\237<L\0006\273`2\005=\232]&\276\235\'n=u\232\005>\014\327\021\274\013\370\236;j\000\367\275\213\247\007> \350\200\275rT\031<\371\227P\275\203F\355<*\2471;\232\225\212\275l\360\357\275\351\352~\275f\004\250=\341\0351=yo`<\215 A=uma\275\261e#\274\271\326\016\276\227fU\275:@8>\340\202\277=\026#p\275\345\304\017=\266\336\027=\344\211\203=VU\213=\274\313\374=\313\213\000\276\221LR:\2340I>\343U\377\275m\334i\275\003\006\241\274U\021\240\275\201t\034>\024\2333=\032~\254<Oo.=\260\247\211\275wa\023>\343\265\327\275O\316\254=*%\242=,\337\371\275\030\221\034<\240U\007\275\013\246\n\275\201\344\215<X\334I=QM\n<9\251\367=\227K\373<\214\311\254<\001\230\225\275/\256\033>g\211\314=\224&N\275\016\023~>\236i\262\275\266b}=\'\2546=\356\373\274\275\231\253\316<6[z=G\326\204<\223zI\275\252\256%\275\372\207^\275I\333\200\275\355\317h\275\n\374\010\276\373\034\201=?\324\006\276\265\332\250\275\346\2754\275\344\236\277<1\013\r:\233\352\036\274n\353\014\275\256\275\005=\262-.>\305\004\314\275\232Iq=\030\343\221=\211\342\373=\222\002\316\2741r\203=\231h\"\276h\026\034\276\255\324\371\275\006\016\205\274\203\2334>O_\241=D\324\347\275w4\207\273\265eb\275\023Kw=p\004\260\275`\3443=\"\205l\274\254y/=i\'\222=\021\201\017<\336\017\345<jH\234=c\351\351\275\330\t\343<\351#\325=XPN>\355\251\n\275\247\035\265\275O|(\276Xz\331=\245\032v\275\260a\027<\224\247 \274gq\265\275\003E\363\275/\206\307\275\254E\004\276\312\240\362\2756\271\365<\016\201\253\275\343\255\002\275\262t\243=&\215#>F\236\271;b\232\365\274\236\337\337\273\354&\325<\224\252\217\275C\220\246=\220\201t\2736y\262\275\330g\362\275\321\215.=\207$\301\275\2207G\274\213-&;\362|\257<\247Ks\275\357$\312<V\226\270\272\373\324X\276&\240\034\276\323t\253\275r(\364=@\007\372<\021#\021<#\324\225\275\035\023?;\004;\235;\007\363+=\3376*>q\360\023>F:\273=\243\367\226=\0063\340\275^\323\233\274\245Y\313\275\334\242\322\275\344\272H>q}\337=\372\320\234=;c\006\276?d\212\274\206_T>-7\005\276\016j\230\275\246\3257={\303\203\275\334$%\275\367\315\002<h\370?>D\031\302\275\344\307\314<\021%\334=\013\260N=\246j\206<_,a<S\037{=\206C\272=sS\014\276g\333\215\275\0211\314\272\376\346?=\246\377@\275:\025\017=%\316\n\275\t\307\034\276\005\206\224=\217j&\276p\311\014\275n,\305\274\226\322\032=z\274\373\275\365\034U=\002\330\261\275\014\274!\275#o&\276\364Fi=\227\264\202=\035[\376\274\000XQ=\276\007_\275\3147\374=\203\350\310=\323\376\031>Q<\016\275\370y!\276P\007\341\273\336\031\314\275\260sR>\322m\027\276\2527\324;>\316\036>e\0319\275\274\234\025\275\314;7\275\023\271\275\275*r\024>i\\\024>\266\344f\271\267E\371\275\352\335=\275\367\322x=\244\225\212;\344J\022\276\016\3222<\221@\270=\215\375\010>I\261\362<]P\001>\001{\323=S\002\204=\225r\016>hG\215<\227\270j=\361\350\275\275\313\277\367\275\200\324\010>\317\244k;\3703\263;\211\215Y=\203\367\274<6\034\027\275\036\360-=\013\337\036\275\216\033%=\215Bd\276\203\013r=\343\\E=\375\024h\274\313\000E=%M\225<7\337\217<\003v\206\275ALo\275B7\305\275r \246\275\261\220\342\274|\303\020\275\334\207\340:#\303A\276\341\263\006\275\355\037\243\275\325H\354\275\'\357\372\274\217T\377=\337\251\311\275Yu\317\275<\233s=\330\311\226\275\013\037n=\204\341\034=\371@\206=Kn\241=\2205\343\274\313f\320;{\246\">jnF\275\300W\306\275\371j\372\274\2751\r\275\233\263\367=\216\272\334\2741\266\361\275>\343\027=\001?\251;K\025\007>\344\266\347\275wQ\264\275\317\316\361\274B\240\006\276\371\335\333\273\234\224\373\274\254k\372=\0309\213\273\013\301]\275\006\250q=6\227\036\274\220J(\275\344\266\204<[\247)\275C\221\302\273\200\203\307<\205\013\217;\317&\000\276\261\275\257\275\212e\364\275\252\312\354<\021(-\274\200`G\275\202\245`\276\243:\352\275%\362^=eF\367=mw\003\276:n\246=\220\210>\276\031\262\340\275\213\354B=]\210p\274\311\335%=\t@\020\276\036z\200=\371\022d\275:;J<=\367&\274$I\003<g]+=$P\224\273a\200\200\275H\023\201>\365\372\023<@\326\350=\001\231\264\275H\005\306\275\232\237!=@>\033>h\242C\275\204\223\207<3\245\245\275R\027\003\276\263\350\312=\244\370\344=4]G\275\020\201\204=\370S^\275\275\261\234\275\377\rk<\330\254\352\275\256\357\235=\037\232^\276\'Da\275S)\312;\247\243\212=\351\253\t=\023(\315<\367-g\275\022\025\027\273\310\217\035\276O\262\016\275\2244 ;5\323\024\276\367]\n\274\316\360\343=i:\306=\027\224\242=tG\205\275Dp\311\275\363\001\027=\330\311i=\363\006\006\275\361\t\002\276\321-\254=\260\317c=\231S5>\251\250\254=\303\202S=\t\305\207<7\255\277\274\353\202?=\263\203\026\276\\\023\006<\260\001\257\275\222\260\024\276\376\033Y\275?\347\343\275\216\305\217<\271\2236=Q\"\031>\007!m=\377\0257\275(\016\321\275{\357\t>\332A@\273g\226&\275!\215\225;Gl.>\375K\272\275\364!\272=,\210\021=\321\"\276=o\360\255\275!\032\302\275\336X/>\213\0319=\017\325\252\275&\220i\274SA\256<\346\230\217=z\227\016=[\234%>\241U\225=>\313\263=\016\n\301\274\320b\227\274\027h\365\274\265\343\344\274h\343\346\275\301\2015={\333c:\225\225#\275\230\244\036= \376\372\275\001\363!\276XnS\274\010\375\261=\355\216.=\004\253\004>\364\355P=\354\212\215\275\335?\267=3k\013>\314V\334=]5:\273l\200\272=\357\314.=\352\326\370\275k\273\210\275\366\321`=\217\363\023=\262\032\343=\021\355\301=$y>=\362&\371\275\223\022@\276\315\006.\275\306J\r=hz8<6\357\275<j+\020>*\251\275\275\346\345\016\274\224\242\365=\003\333\342=\241\033=\275@2\214\275CPV\276\034+\234\274o\343\270\273\257\355\353=\367\241\t>M^\010\275\205\224n=\252\311\215=-\366J>\035Gw\275\262\323_=\275|\213<\210R\005>\236\221\236<jQ\261<0?\375\275\266\352\212=\202\207\241\273\324\007\r\2754C\014\274;\\\235\275\200\'\210<3\233\304<V\342\212=\006gm:A\274\301=\004R5</\r\211=\030\027@<\234\266E=\3437\020>z\201\020\276Q\225:>I\345\322=\220\020\n\274t\261\007\276\2534\r<\210j\204\274\037\251\250\274j\023&=K\023R<\201o\307=\2700\266=D\265\353\274Zj\036\275Y\364-=\334\233\303\274\352\325@\275v\3371=\022\343+=\304-\332<}\000\302\275\021?\355\274W\241\327\274\342|\000\275i]:\276\321Y%>\202\367\255\274\340\317\031>\272(\373=\016K\2779\300\233\314\274\343\275\344\275N\332\226\275\207\236\344\273\007h\025=\340;X=\371\3519\275\364\\[\276\305Y\003>\326<z\274\007>\312=\353\t\264<\241\267\274\275[\372\006\276\252\027\373=\352h\311\274\321[6>\233\020\340\274\340\017\250\274\021\271z\274\234\022\317\2759D\323=\007\315\014>t\207\240=\245v\316<j\344\304\275\352\320\200;\305\305o\275e\340Z>t\316\230\2739V\355;\021\316\333\274\273\305\250\275U\240\320=\264^\335=F\021Q=_\321z\274\363\327\311=\307~\023=;\275\023\275K\355\253=+\200\306<\253\303[<4a\236=%)B>I\242B\275\022w\016\273\227!\013>\235\177\3169\261\\\224\275\340\355\347<\234\2508>{r\347\275\263\314;\276\235,\346=\272\225\304=\261\003\343\2746\027\035;\004\251\005\276\271\327\300=+\365\346\273\205\314^\275\374\367[\275\256\331\020\275\007\333$\275wH\355\275\247\001~<\316\002-\274\232\021\232=\373\250L=\244s\234=3\241\302\275w\010#\275\177\303\341\274+\t >\273\314?=\213k:\276\377}\032<<\271\275=\271B\335\274\216K\013\275\034\345\036;x?\000<\324*\202\2755\ng=\3063\270\275\263\024c<\254D\222=\003Y\230\274\355\247\312=D\326\301=qt\250\275\260\334\031>\204?x;l\243c>\316k\301\275w\326\345<\013,h\274\356|\262\275\276n\307;\001Y\302=*\215\014\275\217\377\230<\021\336\200<>\221\300<G\361\035>\023\260\207=\342\245\213\274\3405\204\274\3302Q\276Wn\201=)}\245;\376\250\t\275r^\267=\242\t\205<\355\036;\275\216\211\273\275F\212\n\276;\306\340<IH\330<f\305\325<\036\377\277\275\251\3427=\225\035p;\227\332%=b\333\014=\027I\265\2755A\267=\267\334\362<oV\252\274H\216\014\274X;\215=m^\">\340\252\035>\335B\237\274\226V\267\274\257D\005>\341\332\236\274]\332\335\275b\311\267=zTF\276U\366\331\275\222\241h\275\n\360\r\275r\316\014=B1\217= 2\202\275\237\335\016=J\346h\276\375\001t=4\375\272\272.\312\003\276Eh\242=<$<>%\177\006\275W\273\037\275\321\002$\276\033\202\205\275\006i\227<VZ\372<jd\220=[\353)=\273\3170>\350\266m>\370\361\003>X\237\210\275N\342\266=\312pW\275\206@\001\276\250\234\244;Prt\275-\226\210\273\017ca\275L\332\n\274\273b\221\275\333c3=\260\201\204\275j\334\016\276S\037\231<\035\326\005\276\006\254\336=\236\303\222\274n\307\222\275\006\253b<\t\245d\275\377\3777\276p\310\265=m\354\217\273j\240\245=0\2754=\336\235\203\274Z-\346<\273$\222=\305\236A\275\243\007\372\274r\022\027\275\303\3433\2760h\211<-\326P\276\"O\247\275\306KH=\250\244\322=S\354\326\275j\361\"\2757T\n>\367\331\022\275\313\304\346\274Pu\326\273.\272\036<\217V\232=\230\271\367<\271s9\274K\332\352\275d\nI=,g\242<j\257\350\275)}j\275\200\330\201<\322\212\026>P|\341<\000\n5>\242\356z\275\217NA\275\322\201\240=/s\023\276=\033\025;\007v\r\276\'O\377\274\354.\332\274\350\034\232\275\207\030\204=\277\321\220\273\021\361\204\275\036\017#>sw{=1\362\000\275 yp=m\303\025\275i*\347\275Ai\240\275\3445y\274\302\304\377<m\016\036\276\001\344\205=\346\267\327\275\275\335\344\273hL3=\266\273~=\206\245[;h\377\250\274\240\010A\276|8,<\254*\n\275\263\363\033\276\000\313\356\275\335\014\222=\372\007\310\275a\254\260\275L\005\n\276C\332\204=\253\376r\275\036\350\231<iG\235=\262)7\275\201z\007<\321\207\262=\255\332F;X\030j=\010\323\207\275:D\231\274R;|=ud\334\274>\256\355\275=\3019\276\317\376\005\275\031,\322\275^L\010>\242\334\303;\365\032\366=\037\323\232\275b\3151>\005\304\020=Vc_>p\326\240\275\014\1772\276\005|\335<qE\"\276\034\330\206\275\264lV\275Y_S>\3078\320\275\354\310\322<-\220\300\275\2552\262\275\365-)<\0267\014=\363\221\r\275.\335\224\275.\254\036\276\301G\343<\260}g\275\266\223\227\274fq9\275\200@\220\275\020\275\213=\034x\030\276,\325\242\275\274 6\275\214Ma\2756\322\230\275\355\276\205\275\225O\221=\336\234\301\275\336f\315\275\346\376\224=i\034\027\276\377\201\251=\245\031\241\274\364\216\005\275\276=\221\275\302\367B;+E\307\275\002y\365<\001\344\211\276\004\246Y\274^\206S\274:\360\004\276\031\273\275=V\236\260<\023\302\252\274\371\322;\276\354V3\275\004\346\313\274\021\032\336\275\361\007\371<\205AZ\275\233\263\340<\213\006\'\276\331|\317\274\261\244\367=\366\037C>_\272;\276\3465\002\275v2b>i\021\271\274\233\243\345=\367\2376>\244$\350\274\265\260o:9X\234\274\212\325\324<\211\004\315=\204~\254=\345\241\217\275\225\315u\274\373Z\255\274\363N+\275.\320\177\274\311\003\207=\024[_=>@\305\275\007j$\276\3265L\274\375~\244\275\014\264\230\274\344p!=A\302\251\274)NV\275\361\336\'\276}\321i\275\2073W\2749\262\362\275\010Mj\272\200\035f=e\"\033;E\263\210\274nnw>\260\013\n\276\334\332\213;\315\240\211\275V\276\\\274\'\356\016\275\320\361\314=v;\273<\334\n7\275\246#@=\315B\264<\305N\210=C\341\030>\355\014\017\276\315qO\275\255cM=e]{<\301\337\273<v\235S;\223\237\261\275\236\204\033=\214\362\224<m?\242=\323O\024=\266a\236\275\232\364\202\275-\336w\274\005\032u\275\001\315J<\204j\027>:\030E>\3630\343\275\326\377\016\274\261m\036\276LU\332\275\217\021t=)}4\275\177\276\023\276\265\230\347\274\3578\222=\305G6<\2270B\276\226\207\2239.\r\217=J1\255=n\000S=\235#\337;%W\036<J\026\030=\3717\004=z\026-=%\265w=\220\220\037\275@A%\276\263\354\353\275\200+\374;\203vH=\346\332u=\204\341_\274H\037@\275\001\256\021\275\313\357\326\274Pq\r\275\330\356\t>5\200\033>\227_\035=a(\202\275\376\361\007\274\312\'\346\275\213f\035>\212\273\032=\356N\255=NKt\2768\376\203\275X\345l>\303\254\266=\254<\202=7\227\205<7z\234<:\351\253\272:\312u<\200\365\214;\362\212\252\275\363\264\024\276\272\274O\275iJ\246<\276q\246=T\260\365\275\024H\017;A\t\354<\364W\244\274\247N\206\275\214E\001>\305\335\315=\326\2066\275\304\027\025<\276\241-\274Og\343<\033\302\317=a\300\253\275^\354\027=\374\004\255\275 \372\200\274MR6\275M\342\275=D\204B\276\322\007K>}\210\023>\266d\223\275\367l\017\276\\\223\215\275\3118\323\273\207\222\004\276En\002>\312\326D=\035 \273\275\210J\201\275\347\372\213\2755L\255\273:\332\206=/v\002\275I\004B=\224\261\005=)X\333=\205G\226<D%\016;/\331\347\274N\343\234\274\302\204\037\2752\263A\2752\332\362\275\266Z>\274\'F\037\274\323\316\004>v\254\266=\007TG\275\307\342)=]\3456=\217\023\037\276\315[\375\275Fk\003\276R\203\266\274\355\250\313<\351\266\"\276\267.\334=\311\016a=b@\274=\330\230\333<T\024\021=G\027\202\274\020oB<J\360\212=\237\021\216=\353jp\274M\332_\275c\001\212\276\311H\000\275\202e|=\254\235\021=o\204\027>LV\272=F\"\302\2757\274\213\275\023F7\275\031r\306\275\2272\020=\336\nE=Dw\324:\025\204v\275\002\031#<.3C\276\177\177X\275^\235\362;^\302>=\223k\006>7;7\276\245 \366=\226\336!\275\201\2353=\255\366\202\275\244\272`=Y\302\261\275\246\']<\344\020*=\026\200\274\275F\004\275\275\253\200<=\342\254\347\273\233H\036\275\250\006\005\275\027\330Q\275\323\326\210=iSS\273\304o>=\320\025L\275\271\005[=GV\004=\014y\330\273\334\241\231\275\250\320\005\275\325\220\303<{\275K\276\034\267\356=\323\266\215\274\2736\033\2761\236\270\275\375\263\272\275\375e\013\275U\341c\275\336\247\301\274\334\267\245\275\267\350\273<\354@\225<\332\363\220\275)y\372\273\267n\352=\032\374\275\275Y\204J\276\211FI\275y\303,\275\304\374\035<\014\313P=#\336\033=Y\323\n\276\234\272\006\276.H\242\274\373A\357=\3422h=|\352\326\273\207X\274<\232\376\032\274\005\035\352<\355a.\275\033f\324<kZ\343\275 \374\003=>\235\246\274\350\247@\275\2148\001>\3165_\275\010\177e\275AW\305\274U\354P\274\244>\361\275\033\335*\276{$\007\276\211\314\033>\217\016\013\276\200\374f>\\\210\006>t\"\303\274\215\203\325\275\325S\225\2738\314\356=\320\014\275\274\227\361f\275\0070\363\275\301\002R\274o\356\022\275@\355\037\275=\334j=m\363\252<\351\236B\275\'Z\326<5\336\363<\034\2532=F*\356\274vN\334=\271\267\234=\022V\372<\234\005b\276\212\272U>$O\200\274\203\202L<8c\376=\273\204\263<\0374\312<\220B0>7\253?\275\0300\r\275\177B\200=Y\213z\275|\203]\275\214\031\036=i_\242\275_R-\276\262\023\242=\037!\241<\027\242~=\177\312\013<\265.\342:[\250q=*\r/>\240}\025>W\000\334<\204K\213\275\330\224\304\275\227`:\2745\r\352\274\367\302\310\275]\362x>\\V\226;\227\355\362;=!\000\276\231\352\212=+\367\226<\243\204B\275\233\315~<\265%\247\275$\302@=;\302\346=\312a\322\274\372]&\276\370y\023=.\317\002>\232r\034>\225%\251=\373\007g\275\203&j=\260/\355\274\274\344\n\275\351\342\230\275\317\205\210=\347\362#\276\027\306!\276:\3228\275\222\027\251=\270\031-\275M\315\226=\0369\255<\220\013\000\275E\353\303\274`\206B\276+O\274\274\3265H=*\210\r<\033\265z=\027~\270=\341\370\275<\017d\221\275e*k<\244*\243=\371^n<\t%\354\274\005\320\362\274\026\242\203=\023\273\277<Y\"<\274t\320\260<U\345u=E\341\230\275H\230\253\273\230\252\200;\337\347\271\274\337GC\276\233F\365\273$\007\255<\376\035\211><\300D=D%\255=YP\305=\224\0343<p2b=\314\036\364=\r\330\375\275\266\302\034\276_0\375\274\t\335\002>\272)\261=\006q&>\224\276K\275p\020==\025\326\322\275\312\031\357\275\244I\335<\022\334\366<\262\033v=\331\3261\276\031h[\273\334\266\r>\247\254\277\275~\361W>\313?\261\275\376\334\326=uv\317\275\022B\234=\024\276\005\276\337\020\236\275\316\206\025=L\276C<\000\247\021<\246JG>W_\337\274\302\375g>\2242\220=kW\270;\275q\241=\200\272\255=X\375\272<\021\254\354\272)bu<+{\020\275,,\n\275\317\362\216\275z\023\374\274\023\004\377=`\035\010\276\313\313\t\276a\"\007=\226k\362\274`\016\271\2755\277\023=>\216(\274\314f\334=\023\252\024>Z\0056\275\326r.\274\226E\316=\027_\201\275\321[\343\275\005\346\210\275\271\327_;L\254\274\273\255\304m=\276\004\334\275\231\212\326\2747\250\347=\343*\212\274\004\255h=\265\256\007\275\256\3105;\016\305$=\016\337\311=\2444O\275)C\250=\276\275\026>\013\002\n>2\010\342\275\3333\235;\224\242\236\275\312\242\246=:^\020>\200\314\304=\201\357\201\275\374\270\222\275c\031=\275B\204\007\275\262\004\213\276\350\231\200\275,<,\276\303\303\177=\030\027\223\275\000o\207\273N\373\233<{8\312\274\235\365\237=q\216\r=>OY<\255Z9>:\024\237<\177\373\004<\274\221\207\275%BL>\212\014\020=\222E\024>00[=\336+\013\274\025\003J=Y\211(>o\343\026=F\207\264\275\270\253\010\276\323j<>6\337Y\276m\007z=`\322\345\274\314+\272\275\250\211\352\275f\324,:\366\311!\276\246\303%\276a\027Z\275\021\334\007>(\276#=\034\005)\275~\n\020\275\267\376\004\275t\314\223\274\347\367,\275+E\232=%\237\013=c3B\274\202x\316\273\324\223\277\275P\222\311=xM\324\275\356\036*\275\304\361W=X\213\013=\240?\332<@b\266\275\007y\257\275 \314?<\323\254\244\273\035\327\r\276O\004\331<\244\346\216\2759c\237\274\r\317_=\211J\222;\323j4>\021\254\265\275\201\376S=\214\320f<\341z\t>\346\355\014\275{\307\337\273Y\272\252=\374\244\230=Zx\345<g\340u\274\000w\354=p%\200=\250\2437\274!\032h=s\206\005\275\204\212Q>1\235C<A\001u<\035\\\374\275\267\256\'=v\236\211=\252\275\327\274y\005\002\274p\'\002=\330s\234<\200ui<E`s=5\253&\276\234\353\t\275(\'\322=\300\277\021\275\367\3728\276[>\033\2750\0069\275K\n\305<z@>\275\257/\327\275\211=\304<\214%Y=\031\030\261<\265\217\205=\213;8\276I,\325\275\301\343\027>\025O\010>B\256\317\275\2722\300\274\347\031\035>tz$\276\363\340\241\275\3378\350\275qn\014<\227S\356<\210q\260\274\301~\n=\025\307\303=\323(y=%\271\240\274\210:1\273\277\036\002\2757K$=A\310X\274@\256,>\002\352\307\274\344H\220=\220\205L\275\374@\224=\220\267\177\276R]\234\275\304\010\242\274\202\367\353\273\221\021\334\275E\237\232\273\022\035\367=\334\274\007\276\271\272\275\275\340\211\307=\315\257A\275\023n\331\273\364\375\222=u\206|\275\367)\370;~{\032\275\314\375\032\275\302\314\216\275\356\343\337=\207\346\027\274\207r\t\276^\342\205\275.\314\211=t\3363\274\323\307\214># t\275\255\206y\275Q{\235=y\366\026>\031H\306==\223\223=M\316\035\275\276\323\303=.AE=\266:|=\037P\277=\304\n\007\275\271\353\265\275\222=7;i4+\276\254\312\310\275\301\007>\275\023\301\006\275\364Y\252=\002\201\337\275\334Q\354\275t\014+\275\332\002\013=zEp\275\026\356\376<\272\206\226=V74\275\025\002\003=\nFg=\275\340\256\275\331Q\r>\332^\376\275\031}e=\001`\233<\366\254\226>\232\330\265<\373T9\275\320\\\302\275\341\021\210\275\263\016\200\274L\003\254=\236w\004;D\306\221=u\227K\275\332\360\232\275l\323\003\275\003~\342\275\030;\275=\317k\343\272u\316N\275<\032U<ko\310\274\233\202\014>\224\321\236=\364\202\234<\323WY\275q\310t\275\264\372j<\370\375\303<z\236\000>\017\223N\275s\001\311\273\257\312\317<P\211\206\275O|\365=\304F0=qG/>9`\300\274J\366\2619\317\331\234;\1771\276<\005\013E\276\215\363~9p\005\337=\310\025\000\275Ld&=\230\245\223<#.\267\274\204\357\020>\303\334\300<\323\202\325;\234\364\323\272f=\337\273\201L\r>\"\272\217\273\2558\237=\226\2231>8\306\346=\212\373\222\274\330Q\304\275=l0\2768\204\035\275d=\221=\215\035N=\272\216:\275\233t\342\275fg\312\275\003\317\307\275Z\216-\275!\223\251<zI`\274\024\2128\275l\231\243=\350\320\227=\314\270*>\253\017\255\275\242\200C=\372}\312\275^\301\t>`\312\252\274u \315=\321\305%\276R\030\025<\244\306$\276[d\357\275\207\273\206<\362\021\037>&\'e< \220\222<\'\3759=T1\254\2756\037\267\275n\301n<\312\355\r\275\232\232\032\276<X3\273ip\251<\254lI\275vM\013>+\003\313<\260\360G\274\203\337\263=\365\366\227\274\373y~\276\201u\014>\247\017\254=C\265@=\277[\314=G|\246\274\023\313\200\275\253\242\013\275H\266\013\274Z}3\275\300]\205\274\347\305\241<6\272\276\275U.\244<\326\261\266=\300\315*\274\363\335\365=\345\036M=\021[\256\275\257\244\230=\016\023\256\272O\375\031=\243\025\235\271N\340\263\275ew\024\275\020<\315<,&\033;\221\367 \275\007X\236\275\236\342r\275\341:#\275Q\252s<\241\005\305\275 \270d\275R\031\366\275\233\017\220\275\000\372,\276\333\274\211\275\376\006#=\024\t\036\276\322\341\n>#\205\030\276C\223\236=\016\033\270\276$\370\206\275\027P\010\276\205o\232\274\346\371\210=\317\264\213=y\014<\275j(\233\275\341\377\303=\372ve=\031\262J=~;\220\274?#+\275N|~\275h\346,=!=&\275\253\272\355<\000\222\202\274}l\236=.\244!\276\205\'\255\275\310\306\\=1\211\204=G\224\230<\376Nh>\320\302H\274b\255c\275\022\213y=\207?\">;z.\275cE\315<8\302\310<\225\364\265=\016\266\374=\325\206\241\274\354\006\362\275%\027\337\274\220\361\262=\343\230\037\275\334\003\234\275`\034\004>u\361\301=\362}\266\275\335\'\002=\215[[\275dC\340\274U\270\001\273\340\370\267=b\361d=0\273-\275V\265/=\256\347K\275\360\024p=\177\345\216\275\257J\341=>\373u>\322\343\302\274\177^^=Uv\245=]\357[\275\\\345M=\375\200\312<(;\273=/\373\244\272\216$X\275m\003\246=\262\371\372=\322\013\n\276\230 \025=K(\271=\310\270\331=\370s\235\275\376\212\315=\246\326\355\275\244`:\276\243\325\032<\032P\266<\177Mh\276\233\2766=\257\034`\273P8\347\275\306\224\024\275\205B\340=\355\305\230\274\215\007\216=m\214Z=\207\300\001\275\021\261\004\275\270\326\376=\270TF=tD\263=\332\376\r\275Q\t\317=c(M=\365X\036>h\366\251\274\202b\334\274\023\002\204\275q\216\376\275\357\255\305=\326\256\350\275Z\324$\275\3237==4\347V=\263\203\331\275\214\300\266<`\262\010\272\n\361\311=\005\212\270\275R\245\026\276\343\035\376=\254\352\034>M{\347\274\323\023\372=\232\221_=\227\320F=\232\230\216;\3254\350\274\222\322\304\275\364VQ;\017\r5\2763\003\035\275I\r\t\275\312\r\226\275k\206a\275\335\254,>\025<\210\274\323\033\342\273^\272\220\274\245\347]=a\240\371=\006\025\001\275\255\243\310\275\0031\236\275\232\322\226\275\304\304\203\275Z\3509>\315\371\227\275\032\3155=\037\036<=\235\305\030\276\234L\270\272t\241/>Kr\004=\274.\343\274\267|\361\274\347\374\200=\001\310\032\275{f\313<\034\225\367\275w\311\024\275[s\332\275\322\244\001\276\362v/=B\270\266\274J\360S\273\263s8<\346=\257\275\3075\306=\237\001\\\275V&\353=H\230\270\275\227\260\337\275g\300<\275\034\250\337\275L\037R=\303\206\267=\304\377q>MI\217\2752\201\230\273\274\006\035=\342\377\204=l/\017\276\200p =\213)\276\274S\374\353\275\014\330\006;V\3574\274aX\267\275\211\217\377<\360\220Q>7\311\006=;\367\341\275\342\327}\273-\020\216\275\031\224\251\274\2769j\275\211c\321\275\276!\270=\334\272f\275w<;\275KQ\335\275\310M\000<S\027c=\0331!=\030\247\376<\232D\033=H\260D;\2170\236=#rX\275\310u\232<\035C*>M\300j=\237\036\211<\224=\257=\255\274\264\275o\320\256=\013\230\021=[\371\225<\324\"\026\276\323\252|=\327\274@;\224\034\354\275\207\371\202<\033s\200\275n\223<=\316F}<\226=\224\275\252\010\014>\354#\024<\265\027\237=Mh]<\376\005\005=y\224\037>\316^e\276\007<d\2757]\263\275IN\003\276\247#\350\273\323\257\034\276\205\377)\275\3012\222;\014\2276=\351Y[=:\352\327\274T<\233\273o,\254;\374\256\202=\216\244\222\275\321\036o=\370\021\357\2743\266\212\275V\232\343\275\330@)=4/c\276h\377\204<o\020\255\275\213F)\276\024\357\253=\2030\266\275\337\006}=\274\020\020>U\241M\275\346\341k<}g\235=,CI>\204\235O<aH7\275\374+\035\275\367\347\305=\272\211S\275\312 \020\276\251f\214\275\022\263\276\275\312@\374=6\234j=Q\265\322\275o\020\021>\251\305\300\275\322i\343<0\3207\275\331\212\324\275\177\264S\275j\311\237\275\243?&\274\362Q+=\004\226s\276\035\324\251=\035\004\330:\217\224\374<\001;\262\272\301\353\200>pV^\275a\277G=\327\371\003\275\373R<>\264*m\275\276\3703<y\205\305\273\365\247\277=fo8\275A\2735=w\370\243<\016\301\244=\271v\261\275Q\254\301<N\224\036\275\346\206\346\274\236\265\252=\212\350\255\275\333\\\240\275\r\217\376\275\003\320\214\275\306m\033>\225?\330\275\215\335M=\226~\202\273\2008\315=:=D\274\0020\025\276\314v\317<@~\305=\ti\376\275\321\203\363<?\256\300=$\223\017\276\215FG<m\372\007\276\354\233\233=9=l>]\314\003\275\355#\014=\002ey>\204\253\302\275\247\242h<\034\243\032\276\340\277\325\275\004g\357;@\253\265\275:7\335\275\203\205\337=r\333\001\276\036\023\325=@4\240\274,w\n\275\307\352\002>\265N\311=\26636=\305M#\275\034}\023>!8\035\275F|\252\272\265>&=f\351\336\275\037Mj\274nw\267\275\253m\357=\323\3703=\353\216\203\274\324\356j\275\267QX;\3021\023=\260E\017=\235\215Z\272m\274\"\276\312\240\245=6Hv\275\025`\033<\325\017_<\256\200 \276s\022\204<y\203\255\274\351r2=\\\205&=`\032%\276\344\337k=\356kj\275E\341Q=\237\035\017=\027\263\342\275\271C9\275\263{\234=\343\241\177\275\363g\243\274{\243Q=\312\273\025\275\021(\274=\206>\001>\037]\356=_\010N\276Jhj=\337{\213\275\357^\250\274%\t!<\213&\255\274)\305\262\275\314\342\244\273\374\'\223\274\351\274[<\335\215\025=Y\321\205\271\272\303\363\275W)\231;\312G\332\274\275#\005\276\345\304\373\275\241\267\210\274\032\235.\275\257OV\274\36483<\340\\i9)\254\200<3\022\212=a_\273<\r\022^\275\202\370\326\274\010\300\366\275x\360\227\275i\231\032>/\037\247=\337\306\225=\230\317\007\275oJ\024<\222\203\377\274\3732;\274\242\n\312=\350\201\220=6\361\035\275\352R\007>(\001\"\273\312X\013;\n\342\025>\331\300X\275\222\216^\276\023+\260\275\232\334]\275^\273\305=\347Y%<\016\203\001=\254\2322:\346l\234\275\27244\276|\323\262<B,\212\276_\226\225\273\375\024\346<G?\232\274\226\373\t=?e7\275\350P\360=p\221c\275\003\206\262=\231\020!>\214^\344\274`#\227\275\201\263\277=\221C.\276~z\014=\n$\371=*q\303\274Lil>\272\te=[H\247\275@\"\005=Yx\032>w\260\257=\224\227\267=tD\317=\206\013)=\277yU=L\361\377=\325\377\355=\022T\030\276\337G\234\275\"C,=\224\245\255<!\311\360\274\nN.\276\2524\332=\023p\331=\330\3351<A\371\r=M]I\275\032\344\272\2753\260\236\274\324\2209<\032\224>=^\231\022\276\0051\277=\326\247i\275\277\325*\276Jvc\275\201\267\355\274\025<\260=q`Z=4g\034;\200\345\265=\271\220\204\274)\374\221=\370\355$<\246\tR>W\355\227\274\365_k=a\366\255;K\016\250\275F4\230\273P5,\276MG*=\220k\021>\313\272\244=\345\245\211=\212I\037\276\030\030T\274\004y\337\275\227N\205\275\2365\247\275\263Hb\275\324\324m=\277\246\371=+\320\341\274{\227U\275},%\274\347U\246\275V\'\367\275\r\327\244\275\352\0174<\024\020\245\275}T\016>l\362?=^>\020<\353\246\212\274\252v\032=\267\004D\274\242\030\300;\200\367\227=1O\017\274\272\230C>\352\356&\274\352Z\n=\317\266K\274\261\036\365<\234\023f=\312\242\232=\277R\200=~\025\331=\376U7\275i1,=\321\232\035\276bL\335<\354\3106>VS2>\026\211\350=\232W}=\022\244\253=\000\177\221\275.^\315=D\023\3369C\321h\275\017\303\004\276\nb\300=\025\257\r>hb\221\2746+\032\2766\261\256\275\266\205\302=\366\360L\275\206\340\027=\\\324\352\274M\020\235\274v\022\022>\352\227\254<%\002\301\274m\021\226=z\017\200\275\037@\260\274\216(\266=\305\356\007\275\325s\370=\300z\265\275\207\251\013\276\322^\305\275\354\337\250;\035*\253\274#\2332\275q\2628\275\365\325\256=7\3544\275\256c\005>Wt\005\276F/\307\274`\004.\276\314\230a>\214\260h\275\3343\315\275e\200\334\275u\257z\274\217\006\213=6\251\022\274\2621\t<\201\"\350<\272\\;<\313\332>\275\217\217\212\273\332!\346\275\215d\263\275\251*\365=\035\236\315=\276\313\253=D\200\317=\022\027\346<\335[P\276\n\006\004=\365\300 =e\303\'\276*&T\274\001a\245\274\220\333Y=\034?\002<\233N\311=\201\3548=W\247d<\251\257.\276\350I\t=\347\345\324=`\213\336=\373Z\273\275\242mL=\001\363\363<t\244\226=\201\341\222\275\371<^\275\264\266\035>+\032)=\225\351Y=>\313j=f\033\222\274l\370&\275X\230\253=\255@\226\274F\212\344=\376\320\032>?v\260\275\2661\225\275\003!\361\275\031Ra\275\336\247\215=!\017w;\374\037.<\231\013!\2763-\035\275@\351W\274\345\375a=\324:\247=\205:4\276\332\261\032=v\223<=\337\237\354\2752r{\276\037w%>}\006_\275@T\246=7&P>R5\256={p_\275\253\236 \275\205\3150\275I\014\221\273\253\203m=Oy7\276<k\242=?\000\223\275\300\273d\274g\375\205=\205\002\023\276\316l^\274\005\225\202\275y\250\036>\336\264\212\275K\223\245\274\241\263\261=\255\333Z\275\314\006;=$\024s=\244\242C=p\322/=\372\234\256<\326\032}\275\220}g=\225\220\t>`2\205=\260\201\202=\232Zx;fh\006>\375\260\201=\010\324\304=\222\224\330\274vL\223=\327<\355\274\256\343X=K\224\236\274"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/backward_lstm_1/Const"
  input: "bidirectional_1/backward_lstm_1/Const_1"
  input: "bidirectional_1/backward_lstm_1/Const_2"
  input: "bidirectional_1/backward_lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/Assign"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "bidirectional_1/backward_lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/bias/read"
  op: "Identity"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/backward_lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bidirectional_1/zeros_like"
  op: "ZerosLike"
  input: "dropout_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum"
  op: "Sum"
  input: "bidirectional_1/zeros_like"
  input: "bidirectional_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims"
  op: "ExpandDims"
  input: "bidirectional_1/Sum"
  input: "bidirectional_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_1"
  op: "Tile"
  input: "bidirectional_1/ExpandDims"
  input: "bidirectional_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose"
  op: "Transpose"
  input: "dropout_1/cond/Merge"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/Shape"
  input: "bidirectional_1/strided_slice/stack"
  input: "bidirectional_1/strided_slice/stack_1"
  input: "bidirectional_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_1"
  op: "StridedSlice"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/strided_slice_1/stack"
  input: "bidirectional_1/strided_slice_1/stack_1"
  input: "bidirectional_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_2"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_3"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add"
  op: "Add"
  input: "bidirectional_1/BiasAdd"
  input: "bidirectional_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul"
  op: "Mul"
  input: "bidirectional_1/mul/x"
  input: "bidirectional_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_1"
  op: "Add"
  input: "bidirectional_1/mul"
  input: "bidirectional_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_1"
  input: "bidirectional_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value/Minimum"
  input: "bidirectional_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_2"
  op: "Add"
  input: "bidirectional_1/BiasAdd_1"
  input: "bidirectional_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/mul_1/x"
  input: "bidirectional_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_3"
  op: "Add"
  input: "bidirectional_1/mul_1"
  input: "bidirectional_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_3"
  input: "bidirectional_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_1"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_4"
  op: "Add"
  input: "bidirectional_1/BiasAdd_2"
  input: "bidirectional_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/clip_by_value"
  input: "bidirectional_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_5"
  op: "Add"
  input: "bidirectional_1/mul_2"
  input: "bidirectional_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/Tile"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_6"
  op: "Add"
  input: "bidirectional_1/BiasAdd_3"
  input: "bidirectional_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/mul_4/x"
  input: "bidirectional_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_7"
  op: "Add"
  input: "bidirectional_1/mul_4"
  input: "bidirectional_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_7"
  input: "bidirectional_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_2"
  input: "bidirectional_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack/Shape"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack/range/start"
  input: "bidirectional_1/TensorArrayUnstack/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_1"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "bidirectional_1/transpose"
  input: "bidirectional_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "bidirectional_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Enter"
  op: "Enter"
  input: "bidirectional_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge"
  op: "Merge"
  input: "bidirectional_1/while/Enter"
  input: "bidirectional_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while/Enter_1"
  input: "bidirectional_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while/Enter_2"
  input: "bidirectional_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while/Enter_3"
  input: "bidirectional_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while/Enter_4"
  input: "bidirectional_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Less"
  op: "Less"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1"
  op: "Less"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while/Less"
  input: "bidirectional_1/while/Less_1"
}
node {
  name: "bidirectional_1/while/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while/LogicalAnd"
}
node {
  name: "bidirectional_1/while/Switch"
  op: "Switch"
  input: "bidirectional_1/while/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while/Merge_1"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while/Merge_2"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while/Merge_3"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while/Merge_4"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Identity"
  op: "Identity"
  input: "bidirectional_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add"
  op: "Add"
  input: "bidirectional_1/while/Identity"
  input: "bidirectional_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "bidirectional_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul"
  input: "bidirectional_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_1"
  input: "bidirectional_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_2"
  input: "bidirectional_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while/MatMul_3"
  input: "bidirectional_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_1"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul"
  op: "Mul"
  input: "bidirectional_1/while/mul/x"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_2"
  op: "Add"
  input: "bidirectional_1/while/mul"
  input: "bidirectional_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_1"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_2"
  input: "bidirectional_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "bidirectional_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_3"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_1"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_1"
  op: "Mul"
  input: "bidirectional_1/while/mul_1/x"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_4"
  op: "Add"
  input: "bidirectional_1/while/mul_1"
  input: "bidirectional_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_2"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_3"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_4"
  input: "bidirectional_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "bidirectional_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_2"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_5"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_2"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_3"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_6"
  op: "Add"
  input: "bidirectional_1/while/mul_2"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while/Identity_3"
  input: "bidirectional_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_7"
  op: "Add"
  input: "bidirectional_1/while/BiasAdd_3"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while/mul_4"
  op: "Mul"
  input: "bidirectional_1/while/mul_4/x"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_8"
  op: "Add"
  input: "bidirectional_1/while/mul_4"
  input: "bidirectional_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Const_4"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/Const_5"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while/add_8"
  input: "bidirectional_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "bidirectional_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/mul_5"
  op: "Mul"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/mul_5"
  input: "bidirectional_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while/add_9"
  op: "Add"
  input: "bidirectional_1/while/Identity_1"
  input: "bidirectional_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit"
  op: "Exit"
  input: "bidirectional_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack/range/start"
  input: "bidirectional_1/TensorArrayStack/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub"
  op: "Sub"
  input: "bidirectional_1/while/Exit_1"
  input: "bidirectional_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/sub"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_1"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/zeros_like_1"
  op: "ZerosLike"
  input: "dropout_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Sum_1"
  op: "Sum"
  input: "bidirectional_1/zeros_like_1"
  input: "bidirectional_1/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bidirectional_1/ExpandDims_1"
  op: "ExpandDims"
  input: "bidirectional_1/Sum_1"
  input: "bidirectional_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_2"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/Tile_3"
  op: "Tile"
  input: "bidirectional_1/ExpandDims_1"
  input: "bidirectional_1/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_2"
  op: "Transpose"
  input: "dropout_1/cond/Merge"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_2"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/Shape_1"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_2"
  op: "StridedSlice"
  input: "bidirectional_1/Shape_1"
  input: "bidirectional_1/strided_slice_2/stack"
  input: "bidirectional_1/strided_slice_2/stack_1"
  input: "bidirectional_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/strided_slice_3"
  op: "StridedSlice"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/strided_slice_3/stack"
  input: "bidirectional_1/strided_slice_3/stack_1"
  input: "bidirectional_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/MatMul_8"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_9"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_10"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/MatMul_11"
  op: "MatMul"
  input: "bidirectional_1/strided_slice_3"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_4"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_8"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_5"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_9"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_6"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_10"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/BiasAdd_7"
  op: "BiasAdd"
  input: "bidirectional_1/MatMul_11"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/MatMul_12"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_8"
  op: "Add"
  input: "bidirectional_1/BiasAdd_4"
  input: "bidirectional_1/MatMul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_6"
  op: "Mul"
  input: "bidirectional_1/mul_6/x"
  input: "bidirectional_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_9"
  op: "Add"
  input: "bidirectional_1/mul_6"
  input: "bidirectional_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_9"
  input: "bidirectional_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_3"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_3/Minimum"
  input: "bidirectional_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_13"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_10"
  op: "Add"
  input: "bidirectional_1/BiasAdd_5"
  input: "bidirectional_1/MatMul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_7"
  op: "Mul"
  input: "bidirectional_1/mul_7/x"
  input: "bidirectional_1/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_11"
  op: "Add"
  input: "bidirectional_1/mul_7"
  input: "bidirectional_1/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_11"
  input: "bidirectional_1/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_4"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_4/Minimum"
  input: "bidirectional_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_8"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_4"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_14"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_12"
  op: "Add"
  input: "bidirectional_1/BiasAdd_6"
  input: "bidirectional_1/MatMul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_2"
  op: "Tanh"
  input: "bidirectional_1/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_9"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_3"
  input: "bidirectional_1/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_13"
  op: "Add"
  input: "bidirectional_1/mul_8"
  input: "bidirectional_1/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/MatMul_15"
  op: "MatMul"
  input: "bidirectional_1/Tile_2"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/add_14"
  op: "Add"
  input: "bidirectional_1/BiasAdd_7"
  input: "bidirectional_1/MatMul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/mul_10"
  op: "Mul"
  input: "bidirectional_1/mul_10/x"
  input: "bidirectional_1/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/add_15"
  op: "Add"
  input: "bidirectional_1/mul_10"
  input: "bidirectional_1/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "bidirectional_1/add_15"
  input: "bidirectional_1/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/clip_by_value_5"
  op: "Maximum"
  input: "bidirectional_1/clip_by_value_5/Minimum"
  input: "bidirectional_1/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/Tanh_3"
  op: "Tanh"
  input: "bidirectional_1/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/mul_11"
  op: "Mul"
  input: "bidirectional_1/clip_by_value_5"
  input: "bidirectional_1/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_2"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArray_3"
  op: "TensorArrayV3"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "bidirectional_1/ReverseV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "bidirectional_1/TensorArrayUnstack_1/Shape"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayUnstack_1/range/start"
  input: "bidirectional_1/TensorArrayUnstack_1/strided_slice"
  input: "bidirectional_1/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "bidirectional_1/TensorArray_3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "bidirectional_1/ReverseV2"
  input: "bidirectional_1/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "bidirectional_1/time_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_1"
  op: "Enter"
  input: "bidirectional_1/time_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_2"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_3"
  op: "Enter"
  input: "bidirectional_1/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Enter_4"
  op: "Enter"
  input: "bidirectional_1/Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter"
  input: "bidirectional_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_1"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_1"
  input: "bidirectional_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_2"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_2"
  input: "bidirectional_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_3"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_3"
  input: "bidirectional_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Merge_4"
  op: "Merge"
  input: "bidirectional_1/while_1/Enter_4"
  input: "bidirectional_1/while_1/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less"
  op: "Less"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less/Enter"
  op: "Enter"
  input: "bidirectional_1/while_1/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1"
  op: "Less"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Less_1/Enter"
  op: "Enter"
  input: "bidirectional_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/LogicalAnd"
  op: "LogicalAnd"
  input: "bidirectional_1/while_1/Less"
  input: "bidirectional_1/while_1/Less_1"
}
node {
  name: "bidirectional_1/while_1/LoopCond"
  op: "LoopCond"
  input: "bidirectional_1/while_1/LogicalAnd"
}
node {
  name: "bidirectional_1/while_1/Switch"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_1"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_1"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_2"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_3"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_3"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Switch_4"
  op: "Switch"
  input: "bidirectional_1/while_1/Merge_4"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_1"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_2"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_3"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Identity_4"
  op: "Identity"
  input: "bidirectional_1/while_1/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add"
  op: "Add"
  input: "bidirectional_1/while_1/Identity"
  input: "bidirectional_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3"
  op: "MatMul"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "bidirectional_1/while_1/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul"
  input: "bidirectional_1/while_1/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_1"
  input: "bidirectional_1/while_1/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_1/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_2"
  input: "bidirectional_1/while_1/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_2/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3"
  op: "BiasAdd"
  input: "bidirectional_1/while_1/MatMul_3"
  input: "bidirectional_1/while_1/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bidirectional_1/while_1/BiasAdd_3/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_4/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_1"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul"
  op: "Mul"
  input: "bidirectional_1/while_1/mul/x"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_2"
  op: "Add"
  input: "bidirectional_1/while_1/mul"
  input: "bidirectional_1/while_1/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_1"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_2"
  input: "bidirectional_1/while_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "bidirectional_1/while_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_5/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_3"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_1"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_1"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_1/x"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_4"
  op: "Add"
  input: "bidirectional_1/while_1/mul_1"
  input: "bidirectional_1/while_1/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_2"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_3"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_4"
  input: "bidirectional_1/while_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_1"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "bidirectional_1/while_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_2"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_6/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_5"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_2"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_3"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_6"
  op: "Add"
  input: "bidirectional_1/while_1/mul_2"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7"
  op: "MatMul"
  input: "bidirectional_1/while_1/Identity_3"
  input: "bidirectional_1/while_1/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bidirectional_1/while_1/MatMul_7/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_7"
  op: "Add"
  input: "bidirectional_1/while_1/BiasAdd_3"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4/x"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_4"
  op: "Mul"
  input: "bidirectional_1/while_1/mul_4/x"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_8"
  op: "Add"
  input: "bidirectional_1/while_1/mul_4"
  input: "bidirectional_1/while_1/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_4"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/Const_5"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "bidirectional_1/while_1/add_8"
  input: "bidirectional_1/while_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/clip_by_value_2"
  op: "Maximum"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "bidirectional_1/while_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Tanh_1"
  op: "Tanh"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/mul_5"
  op: "Mul"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/mul_5"
  input: "bidirectional_1/while_1/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/while_1/add_9"
  op: "Add"
  input: "bidirectional_1/while_1/Identity_1"
  input: "bidirectional_1/while_1/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "bidirectional_1/while_1/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/NextIteration_4"
  op: "NextIteration"
  input: "bidirectional_1/while_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_1"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_2"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_3"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/while_1/Exit_4"
  op: "Exit"
  input: "bidirectional_1/while_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/range"
  op: "Range"
  input: "bidirectional_1/TensorArrayStack_1/range/start"
  input: "bidirectional_1/TensorArrayStack_1/TensorArraySizeV3"
  input: "bidirectional_1/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/sub_1"
  op: "Sub"
  input: "bidirectional_1/while_1/Exit_1"
  input: "bidirectional_1/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/sub_1"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bidirectional_1/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "bidirectional_1/transpose_3"
  op: "Transpose"
  input: "bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bidirectional_1/ReverseV2_1"
  op: "ReverseV2"
  input: "bidirectional_1/transpose_3"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bidirectional_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bidirectional_1/concat"
  op: "ConcatV2"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  input: "bidirectional_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/Shape"
  input: "Flatten/strided_slice/stack"
  input: "Flatten/strided_slice/stack_1"
  input: "Flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/Prod"
  op: "Prod"
  input: "Flatten/strided_slice"
  input: "Flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Flatten/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/stack"
  op: "Pack"
  input: "Flatten/stack/0"
  input: "Flatten/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/Reshape"
  op: "Reshape"
  input: "bidirectional_1/concat"
  input: "Flatten/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\031\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03046666830778122
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03046666830778122
      }
    }
  }
}
node {
  name: "Dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9045990
    }
  }
}
node {
  name: "Dense_1/random_uniform/sub"
  op: "Sub"
  input: "Dense_1/random_uniform/max"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform/mul"
  op: "Mul"
  input: "Dense_1/random_uniform/RandomUniform"
  input: "Dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/random_uniform"
  op: "Add"
  input: "Dense_1/random_uniform/mul"
  input: "Dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6400
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/kernel/Assign"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "Dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/kernel/read"
  op: "Identity"
  input: "Dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Square"
  op: "Square"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer/mul"
  input: "Dense_1/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer/add"
  op: "Add"
  input: "Dense_1/weight_regularizer/add/x"
  input: "Dense_1/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_1/bias/Assign"
  op: "Assign"
  input: "Dense_1/bias"
  input: "Dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_1/bias/read"
  op: "Identity"
  input: "Dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_1/weight_regularizer_1/mul"
  input: "Dense_1/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_1/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_1/weight_regularizer_1/add/x"
  input: "Dense_1/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_1/MatMul"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_1/BiasAdd"
  op: "BiasAdd"
  input: "Dense_1/MatMul"
  input: "Dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_1/Relu"
  op: "Relu"
  input: "Dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2970442771911621
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2970442771911621
      }
    }
  }
}
node {
  name: "Dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1905460
    }
  }
}
node {
  name: "Dense_2/random_uniform/sub"
  op: "Sub"
  input: "Dense_2/random_uniform/max"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform/mul"
  op: "Mul"
  input: "Dense_2/random_uniform/RandomUniform"
  input: "Dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/random_uniform"
  op: "Add"
  input: "Dense_2/random_uniform/mul"
  input: "Dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/kernel/Assign"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "Dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/kernel/read"
  op: "Identity"
  input: "Dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Square"
  op: "Square"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer/mul"
  input: "Dense_2/weight_regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer/add"
  op: "Add"
  input: "Dense_2/weight_regularizer/add/x"
  input: "Dense_2/weight_regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Dense_2/bias/Assign"
  op: "Assign"
  input: "Dense_2/bias"
  input: "Dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Dense_2/bias/read"
  op: "Identity"
  input: "Dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Square"
  op: "Square"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/mul"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/Sum"
  op: "Sum"
  input: "Dense_2/weight_regularizer_1/mul"
  input: "Dense_2/weight_regularizer_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dense_2/weight_regularizer_1/add"
  op: "Add"
  input: "Dense_2/weight_regularizer_1/add/x"
  input: "Dense_2/weight_regularizer_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dense_2/MatMul"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Dense_2/BiasAdd"
  op: "BiasAdd"
  input: "Dense_2/MatMul"
  input: "Dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Dense_2/Softmax"
  op: "Softmax"
  input: "Dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "Dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum"
  op: "Sum"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv"
  op: "RealDiv"
  input: "Dense_2/Softmax"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/sub"
  op: "Sub"
  input: "loss/Dense_2_loss/sub/x"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Log"
  op: "Log"
  input: "loss/Dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul"
  op: "Mul"
  input: "Dense_2_target"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/Dense_2_loss/mul"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean"
  op: "Mean"
  input: "loss/Dense_2_loss/Neg"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "Dense_2_sample_weights"
  input: "loss/Dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Cast"
  op: "Cast"
  input: "loss/Dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/Dense_2_loss/Cast"
  input: "loss/Dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/Dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/Dense_2_loss/mul_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/Dense_2_loss/truediv_1"
  input: "loss/Dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add"
  op: "Add"
  input: "loss/mul"
  input: "LSTM_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_1"
  op: "Add"
  input: "loss/add"
  input: "LSTM_1/weight_regularizer_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_2"
  op: "Add"
  input: "loss/add_1"
  input: "Dense_1/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_3"
  op: "Add"
  input: "loss/add_2"
  input: "LSTM_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_4"
  op: "Add"
  input: "loss/add_3"
  input: "Dense_1/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_5"
  op: "Add"
  input: "loss/add_4"
  input: "Dense_2/weight_regularizer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/add_6"
  op: "Add"
  input: "loss/add_5"
  input: "Dense_2/weight_regularizer_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "Dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "Dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/add_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "bidirectional_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^bidirectional_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "bidirectional_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^bidirectional_1/while_1/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "LSTM_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^LSTM_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  input: "Dense_2/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/bias/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_2/kernel/read"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\031\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_1/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_1/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/bias/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/Dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\031\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  input: "Dense_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Fill"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer_2/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer_2/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "Dense_1/kernel/read"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/Dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Neg"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  input: "LSTM_1/weight_regularizer/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  op: "Mul"
  input: "LSTM_1/weight_regularizer/mul/x"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/bias/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  input: "Dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/Dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  op: "Const"
  input: "^training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  op: "Mul"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/Dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/Dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "Dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  input: "loss/Dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "Dense_2_target"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/Dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/Dense_2_loss/clip_by_value/Minimum"
  input: "loss/Dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/Dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/Dense_2_loss/truediv"
  input: "loss/Dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Neg"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/Dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/Dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/Dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/Dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/Dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/sub"
  input: "Dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  input: "Dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dense_1/Relu"
  input: "training/Adam/gradients/Dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul"
  input: "Dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/Dense_2/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  input: "Dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/Reshape"
  input: "training/Adam/gradients/Dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Flatten/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/Dense_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/Dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  op: "FloorMod"
  input: "bidirectional_1/concat/axis"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "bidirectional_1/transpose_1"
  input: "bidirectional_1/ReverseV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/Flatten/Reshape_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/concat_grad/Slice_1"
  input: "bidirectional_1/ReverseV2_1/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray"
  input: "bidirectional_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "bidirectional_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_1_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_2"
  input: "bidirectional_1/while_1/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "bidirectional_1/while_1/Exit_2"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayStack_1/range"
  input: "training/Adam/gradients/bidirectional_1/transpose_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "bidirectional_1/while_1/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayStack_1/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_1/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_6"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "bidirectional_1/while_1/Identity_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_2/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_3_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  op: "Pack"
  input: "bidirectional_1/Tile_3/multiples"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/stack"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/Enter_4_grad/Exit"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_7"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/Tile_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/Tile_3_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Tile_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_8"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  op: "Add"
  input: "bidirectional_1/Sum_1/reduction_indices"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/add"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/start"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Size"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/range"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/mod"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/ExpandDims_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_4"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_8"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_4"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Identity_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/Enter"
  input: "bidirectional_1/while_1/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/Enter"
  input: "bidirectional_1/while_1/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Enter"
  input: "bidirectional_1/while_1/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Identity_3"
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_4"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "bidirectional_1/while_1/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/Enter"
  input: "bidirectional_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Identity_3"
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/Enter"
  input: "bidirectional_1/while_1/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/Enter"
  input: "bidirectional_1/while_1/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Mul_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  op: "Shape"
  input: "bidirectional_1/while_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  op: "Shape"
  input: "bidirectional_1/while_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/bidirectional_1/while_1/mul_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Sum_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/forward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_12"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "bidirectional_1/backward_lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/bidirectional_1/while_1/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/forward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "bidirectional_1/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_16"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_1"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/TensorArray_1"
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/forward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/bidirectional_1/while_1/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/while_1/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/Shape"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_1"
  input: "bidirectional_1/backward_lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/bidirectional_1/while_1/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "bidirectional_1/TensorArray_3"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/bidirectional_1/while_1/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
        s: "loc:@bidirectional_1/TensorArray_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "bidirectional_1/TensorArrayUnstack_1/range"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/bidirectional_1/backward_lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "bidirectional_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/ReverseV2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "bidirectional_1/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/bidirectional_1/ReverseV2_grad/ReverseV2"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/bidirectional_1/transpose_grad/transpose"
  input: "training/Adam/gradients/bidirectional_1/transpose_2_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "training/Adam/gradients/AddN_21"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_6"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity"
  op: "Identity"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_1"
  op: "Shape"
  input: "training/Adam/gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros"
  op: "Fill"
  input: "training/Adam/gradients/Shape_1"
  input: "training/Adam/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/dropout_1/cond/Merge_grad/cond_grad"
  input: "training/Adam/gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  input: "dropout_1/cond/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Mul"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/dropout/mul"
  input: "training/Adam/gradients/dropout_1/cond/Merge_grad/cond_grad:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  input: "dropout_1/cond/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Mul"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Mul_1"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Sum_1"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/dropout/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/cond/mul/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  input: "dropout_1/cond/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Mul"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Sum"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/cond/mul/Switch:1"
  input: "training/Adam/gradients/dropout_1/cond/dropout/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Mul_1"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Sum_1"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dropout_1/cond/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_7"
  op: "Switch"
  input: "LSTM_1/transpose_1"
  input: "dropout_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Identity_1"
  op: "Identity"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_1"
  op: "Fill"
  input: "training/Adam/gradients/Shape_2"
  input: "training/Adam/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  op: "Merge"
  input: "training/Adam/gradients/zeros_1"
  input: "training/Adam/gradients/dropout_1/cond/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/dropout_1/cond/Switch_1_grad/cond_grad"
  input: "training/Adam/gradients/dropout_1/cond/mul/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "LSTM_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/AddN_22"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "LSTM_1/TensorArray"
  input: "LSTM_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "LSTM_1/while/Exit_2"
  input: "^training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "LSTM_1/TensorArrayStack/range"
  input: "training/Adam/gradients/LSTM_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "LSTM_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "LSTM_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "LSTM_1/while/Identity_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_23"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_8"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_24"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_4"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/Enter"
  input: "LSTM_1/while/Identity_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/Enter"
  input: "LSTM_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/Enter"
  input: "LSTM_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/Enter"
  input: "LSTM_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "LSTM_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_4"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "LSTM_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Identity_3"
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "LSTM_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
        s: "loc:@LSTM_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "LSTM_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/Enter"
  input: "LSTM_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/Enter"
  input: "LSTM_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  input: "training/Adam/gradients/LSTM_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/Shape"
  input: "LSTM_1/strided_slice_11/stack"
  input: "LSTM_1/strided_slice_11/stack_1"
  input: "LSTM_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/Shape"
  input: "LSTM_1/strided_slice_7/stack"
  input: "LSTM_1/strided_slice_7/stack_1"
  input: "LSTM_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "LSTM_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "LSTM_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/LSTM_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/Shape"
  input: "LSTM_1/strided_slice_10/stack"
  input: "LSTM_1/strided_slice_10/stack_1"
  input: "LSTM_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/Shape"
  input: "LSTM_1/strided_slice_6/stack"
  input: "LSTM_1/strided_slice_6/stack_1"
  input: "LSTM_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/Shape"
  input: "LSTM_1/strided_slice_3/stack"
  input: "LSTM_1/strided_slice_3/stack_1"
  input: "LSTM_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/Shape"
  input: "LSTM_1/strided_slice_2/stack"
  input: "LSTM_1/strided_slice_2/stack_1"
  input: "LSTM_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "LSTM_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/LSTM_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_25"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/Shape"
  input: "LSTM_1/strided_slice_9/stack"
  input: "LSTM_1/strided_slice_9/stack_1"
  input: "LSTM_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/Shape"
  input: "LSTM_1/strided_slice_5/stack"
  input: "LSTM_1/strided_slice_5/stack_1"
  input: "LSTM_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/LSTM_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/Shape"
  input: "LSTM_1/strided_slice_8/stack"
  input: "LSTM_1/strided_slice_8/stack_1"
  input: "LSTM_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/Shape"
  input: "LSTM_1/strided_slice_4/stack"
  input: "LSTM_1/strided_slice_4/stack_1"
  input: "LSTM_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/Shape"
  input: "LSTM_1/strided_slice_1/stack"
  input: "LSTM_1/strided_slice_1/stack_1"
  input: "LSTM_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/Shape"
  input: "LSTM_1/strided_slice/stack"
  input: "LSTM_1/strided_slice/stack_1"
  input: "LSTM_1/strided_slice/stack_2"
  input: "training/Adam/gradients/LSTM_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_26"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_2/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_2/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_27"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer_1/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer_1/Square"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_28"
  op: "AddN"
  input: "training/Adam/gradients/LSTM_1/weight_regularizer/Square_grad/Mul_1"
  input: "training/Adam/gradients/LSTM_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/LSTM_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/weight_regularizer/Square"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\031\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6400
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\031\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6400
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "LSTM_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "LSTM_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "LSTM_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "LSTM_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "LSTM_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "LSTM_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "bidirectional_1/forward_lstm_1/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "bidirectional_1/forward_lstm_1/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "bidirectional_1/backward_lstm_1/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "bidirectional_1/backward_lstm_1/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "Dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "Dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "Dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "Dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "Dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "Dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "Dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "Dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/add_6"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "LSTM_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "LSTM_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "LSTM_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@LSTM_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "bidirectional_1/forward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/forward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "bidirectional_1/backward_lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bidirectional_1/backward_lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Dense_1/bias/Assign"
  input: "^Dense_1/kernel/Assign"
  input: "^Dense_2/bias/Assign"
  input: "^Dense_2/kernel/Assign"
  input: "^LSTM_1/bias/Assign"
  input: "^LSTM_1/kernel/Assign"
  input: "^LSTM_1/recurrent_kernel/Assign"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^bidirectional_1/backward_lstm_1/bias/Assign"
  input: "^bidirectional_1/backward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/backward_lstm_1/recurrent_kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/bias/Assign"
  input: "^bidirectional_1/forward_lstm_1/kernel/Assign"
  input: "^bidirectional_1/forward_lstm_1/recurrent_kernel/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Dense_2/Softmax"
}
versions {
  producer: 38
}
